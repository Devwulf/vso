{"version":3,"sources":["extensions/array.extensions.ts","managers/ScripletManager.tsx","managers/NodeConnections.tsx","models/NodeSlot.ts","utils/Types.tsx","managers/NodeSchemaManager.tsx","utils/Colors.tsx","models/NodeSchema.ts","managers/Console.ts","managers/VariableManager.tsx","models/NodeItem.ts","models/Scriplet.ts","managers/VisualScriptingDB.ts","components/ScripletNavItem.tsx","components/AddItem.tsx","components/SidebarNav.tsx","utils/KonvaUtils.ts","components/KonvaForm.tsx","managers/SlotConfigManager.ts","components/NodeHandle.tsx","components/NodeSlot.tsx","components/Node.tsx","components/Edge.tsx","models/Category.ts","components/SearchBar.tsx","components/SchemaSelector.tsx","components/Modal.tsx","components/VariableForm.tsx","components/CodeEditor.tsx","components/ScripletRoot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Array","prototype","indexOfWhen","predicate","i","this","length","currentScriplet","id","VisualScriptingDB","getScriplet","then","scriplet","catch","error","console","inputItemId","inputSlotId","ScripletManager","inputItem","getNode","inputSlot","schema","inputSlots","find","entry","outputItemId","outputSlotId","outputItem","outputSlot","outputSlots","Map","isCorrectType","type","isConnectable","otherOutput","getInputConnection","deleteConnection","itemId","slotId","setInputConnection","setOutputConnection","updateNodes","deleteInputConnection","deleteOutputConnection","toItem","some","result","conn","checkGraphCycleExists","inputFlowSlot","inputFlowSlots","outputFlowSlot","outputFlowSlots","getInputFlowConnection","deleteFlowConnection","setInputFlowConnection","otherInput","getOutputFlowConnection","setOutputFlowConnection","deleteInputFlowConnection","deleteOutputFlowConnection","nodeItem","forEach","connectedTo","inputFlow","outputFlow","NodeSlot","name","TypedNodeSlot","InputSlot","defaultValue","isEditable","item","getInputValue","otherSlot","NodeConnections","getOutputSlot","evaluate","OutputSlot","FlowNodeSlot","InputFlowSlot","returnToSlot","OutputFlowSlot","getInputFlowSlot","evaluateSlot","returnSlot","GetVariableSlot","variableId","variable","getVariable","value","startValue","Number","constructor","regex","match","parseInt","className","Boolean","Flow","Variable","nodeSchemas","schemaId","get","Error","createNew","values","Colors","Gray","100","200","300","400","500","600","700","800","900","Red","Orange","Yellow","Green","Teal","Blue","Indigo","Purple","Pink","BaseSchemaTypes","onMessage","SimpleEventDispatcher","func","subscribe","message","dispatch","color","AddSchema","target","origCtor","instantiate","args","newCtor","NodeSchemaManager","set","BaseNodeSchema","uniqueNamePrefix","width","isDeletable","isNameEditable","Math","max","createNewSchema","Start","output1","goNext","StartFlowSchema","IfElse","input1","output2","thisSlot","getValue","IfElseSchema","ForLoop","outputFlow1","outputFlow2","input2","input3","input4","index","increment","start","end","returnTo","undefined","ForLoopSchema","ForLoopBreak","ForLoopBreakSchema","WhileLoop","limit","counter","WhileLoopSchema","Input","InputSchema","GetNumber","GetNumberSchema","SetNumber","setVariable","SetNumberSchema","GetBoolean","GetBooleanSchema","SetBoolean","SetBooleanSchema","Output","OutputSchema","InputNumber","InputNumberSchema","PrintNumber","Console","log","PrintNumberSchema","PrintBoolean","PrintBooleanSchema","AddNumbers","AddNumbersSchema","SubtractNumbers","SubtractNumbersSchema","MultiplyNumbers","MultiplyNumbersSchema","DivideNumbers","DivideNumbersSchema","ModuloNumbers","num1","num2","ModuloNumbersSchema","PowNumbers","pow","PowNumbersSchema","SqrtNumber","sqrt","SqrtNumberSchema","CeilNumber","ceil","CeilNumberSchema","FloorNumber","floor","FloorNumberSchema","LessThanNumbers","LessThanNumbersSchema","LessThanEqualNumbers","LessThanEqualNumbersSchema","GreaterThanNumbers","GreaterThanNumbersSchema","GreaterThanEqualNumbers","GreaterThanEqualNumbersSchema","EqualNumbers","EqualNumbersSchema","NotEqualNumbers","NotEqualNumbersSchema","AndBoolean","AndBooleanSchema","OrBoolean","OrBooleanSchema","EqualBoolean","EqualBooleanSchema","NotEqualBoolean","NotEqualBooleanSchema","NotBoolean","NotBooleanSchema","typeCount","getBaseSchema","count","NodeItem","x","y","inputValues","customName","variableName","VariableManager","getNextVariableName","getNewSchema","Object","defineProperties","enumerable","writable","filter","slot","push","pair","Scriplet","items","itemCounter","variables","variableCounter","addNodes","reloadOnFinish","nodes","node","key","updateScriplet","window","location","reload","newNode","convertToNodeItem","deleteNodes","itemIds","delete","addVariables","scriplets","version","stores","open","table","mapToClass","seedData","toArray","addScriplet","add","changes","update","where","equals","modify","ref","Dexie","ScripletNavItem","props","state","isHovered","closeNavMenu","onScripletDelete","onMouseOver","setState","onMouseOut","onClick","to","icon","React","Component","AddItem","itemNameInput","createRef","itemName","isAddingItem","buttonName","onSubmitClick","onCancelClick","onChange","event","defaultProps","SidebarNav","scripletNameInput","isDirtyDB","isNavMenuOpen","isSidebarOpen","openProjectModal","openNavMenu","bind","toggleNavMenu","openSidebar","closeSidebar","toggleSidebar","onScripletCreate","getScriplets","input","current","classList","contains","focus","scripletId","deleteScriplet","map","noScrollX","KonvaUtils","cursorType","stage","getStage","container","style","cursor","KonvaForm","cancelInput","Dropdown","cancelDropdown","showInput","onHover","onHoverExit","height","fontSize","padding","textColor","hoverColor","borderRadius","zIndex","scale","scaleX","top","absolutePosition","left","document","createElement","body","appendChild","position","min","innerWidth","paddingLeft","backgroundColor","onchange","ev","inputElement","setCursor","layer","currentTarget","getLayer","children","setAttr","draw","bgColor","fontStyle","onMouseEnter","onMouseLeave","cancelBubble","onTap","fill","cornerRadius","verticalAlign","text","parentNode","removeChild","HandleType","InputType","selectedIndex","showDropdown","dropdown","option","innerText","dropdownElement","includes","configs","numberConfig","handleType","Circle","handleBorderColor","handleFillColor","inputType","defaultInputValue","initialValue","fromString","convertFromString","toString","convertToString","booleanConfig","flowConfig","Arrow","None","variableConfig","NodeHandle","startPosition","onDragStart","onDragMove","onDragEnd","onMouseExit","cancel","thisCircle","parent","startPos","getPosition","endPos","pathData","path","Konva","Path","data","stroke","strokeWidth","isInput","midpointPos","isFlow","onConnect","destroy","pointerPos","getPointerPosition","screenX","screenY","elements","getAllIntersections","element","otherItemId","otherSlotId","elem","getAttr","slotType","radius","listening","data-type","data-slot-type","data-item-id","data-slot-id","draggable","InputSlotDOM","label","labelWidth","typeWidth","onInputChanged","onInputChange","config","SlotConfigManager","getConfig","val","inputConnection","OutputSlotDOM","outputConnections","offsetX","align","InputFlowSlotDOM","inputFlowConnection","OutputFlowSlotDOM","outputFlowConnection","Node","group","draggedHandlePath","isStateOpen","stateVisual","rowHeight","topBarHeight","handleDragNode","deleteNodeItem","updateDOM","maxLength","inputs","concat","outputs","inputTypeGuard","outputTypeGuard","output","from","it","Fragment","setInputValue","addConnection","getOutputConnections","addFlowConnection","Edge","handleOnEnter","handleOnExit","nodeWidthOutput","nodeWidthOther","nodeHeight","handleOnClick","halfNodeHeight","onMouseDown","onTouchEnd","SchemaCategory","subCategory","subCategories","cat","contentChildren","SearchBar","searchValue","onSearchChange","onSearchReset","filterSearch","CategoryDOM","showChildren","toggleCategory","openCategory","closeCategory","category","depth","toLowerCase","marginLeft","borderColor","child","stopPropagation","SchemaSelector","schemaResults","getBaseSchemas","getRootSchemaCategory","schemas","categoryRoot","currentCategory","idArr","split","getSubCategory","addContent","isVisible","addNodeItem","rootCategory","innerHeight","Modal","isModalOpen","handleOpenModal","handleCloseModal","openModal","title","closeModal","VariableForm","selectedType","setStartValue","inputValue","onAddVariable","onCancel","require","jsbeautify","js_beautify","CodeEditor","codeResult","selector","selectedId","editorValue","indent_size","isCodeOpen","isDragging","isSelecting","selectionLocation","selectedVariable","screenWidth","variableResults","openVariableModal","setScreenWidth","handleRun","handleClear","handleBeautifyCode","handleEvaluateNodes","openCode","closeCode","toggleCode","onMessageLog","refreshVariables","addEventListener","removeEventListener","selectScriplet","resetVariables","startSchema","getStart","startSlot","success","prevState","innerHTML","getVariables","addVariable","dataTransfer","setData","onDragEnter","preventDefault","onDragOver","onDrop","pageX","pageY","getData","tabIndex","onBlur","bubbles","callable","ScripletRoot","stageContainer","isDirtyDOM","isReadyToMount","isReady","contextMenu","isContextMenuShown","contextMenuPos","handleDeleteEdge","handleDeleteFlowEdge","handleZoom","handleContextMenu","handleCancelContextMenu","fitToParent","FontFaceObserver","load","scaleY","addNode","deleteAllConnections","deleteNode","evt","oldScale","pointer","mousePosition","newScale","deltaY","newPos","batchDraw","getType","getChildren","stageObj","offsetWidth","offsetHeight","onWheel","onContextMenu","getNodes","getInputConnections","getInputFlowConnections","otherItem","otherSchema","containerId","visible","data-name","ParamsProvider","useParams","library","fas","App","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","basename","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f0f080c6.chunk.js","sourcesContent":["declare global {\r\n    interface Array<T> {\r\n        removeIf(predicate: (input: T) => boolean): any;\r\n        indexOfWhen(predicate: (input: T) => boolean): any;\r\n    }\r\n}\r\n\r\nArray.prototype.indexOfWhen = function(predicate) {\r\n    let i = 0;\r\n    while (i < this.length) {\r\n        if (predicate(this[i]))\r\n            return i;\r\n        i++;\r\n    }\r\n}\r\n\r\nexport {};","import { Scriplet } from \"../models/Scriplet\";\r\nimport VisualScriptingDB from \"./VisualScriptingDB\";\r\n\r\nclass ScripletManager {\r\n    public currentScriplet: Scriplet | undefined;\r\n\r\n    // Current Scriplet can be undefined if none was selected yet\r\n    async selectScriplet(id: number): Promise<boolean> {\r\n        // If already selected\r\n        if (this.currentScriplet && this.currentScriplet.id === id)\r\n            return true;\r\n\r\n        return await VisualScriptingDB.getScriplet(id).then(scriplet => {\r\n            this.currentScriplet = scriplet;\r\n            return true;\r\n        }).catch(error => {\r\n            console.error(`Something went wrong when getting the scriplet of id '${id}'. Error: ${error}`);\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ScripletManager();","import '../extensions/array.extensions';\r\nimport ScripletManager from './ScripletManager';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot, ItemSlotPair } from '../models/NodeSlot';\r\n\r\nexport class NodeConnection {\r\n    public inputId: number;\r\n    public inputIO: number;\r\n    public outputId: number;\r\n    public outputIO: number;\r\n\r\n    constructor(inputId: number, inputIO: number, outputId: number, outputIO: number) {\r\n        this.inputId = inputId;\r\n        this.inputIO = inputIO;\r\n        this.outputId = outputId;\r\n        this.outputIO = outputIO;\r\n\r\n        this.equals = this.equals.bind(this);\r\n    }\r\n\r\n    equals(conn: NodeConnection): boolean {\r\n        return conn.inputId === this.inputId && conn.inputIO === this.inputIO && conn.outputId === this.outputId && conn.outputIO === this.outputIO;\r\n    }\r\n}\r\n\r\n// TODO: Repurpose this to store ids on the node items themselves\r\nclass NodeConnections {\r\n    getInputSlot(inputItemId: number, inputSlotId: number): InputSlot | undefined {      \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return inputSlot;\r\n    }\r\n\r\n    getInputSlots(inputItemId: number): InputSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputSlots = inputItem.schema?.inputSlots;\r\n        if (!inputSlots) {\r\n            console.error(`The schema of node item '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputSlots;\r\n    }\r\n\r\n    getInputConnections(inputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputItem.inputSlots;\r\n    }\r\n\r\n    getOutputSlot(outputItemId: number, outputSlotId: number): OutputSlot | undefined {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The input slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return outputSlot;\r\n    }\r\n\r\n    getOutputSlots(outputItemId: number): OutputSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputSlots = outputItem.schema?.outputSlots;\r\n        if (!outputSlots) {\r\n            console.error(`The schema of node item '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputSlots;\r\n    }\r\n\r\n    getOutputConnections(outputItemId: number): Map<number, ItemSlotPair[]> {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return new Map<number, ItemSlotPair[]>();\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return new Map<number, ItemSlotPair[]>();\r\n        }\r\n\r\n        return outputItem.outputSlots;\r\n    }\r\n\r\n    addConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        if (inputItemId === outputItemId) {\r\n            console.error(`When adding connections, the input item id cannot be the same as the output item id.`);\r\n            return;\r\n        }\r\n        \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The output slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!inputSlot.isCorrectType(outputSlot.type))\r\n            return;\r\n\r\n        if (!inputSlot.isConnectable)\r\n            return;\r\n\r\n        // Check graph cycle here\r\n        /*\r\n        if (this.checkGraphCycleExists(inputItemId, outputItemId) || this.checkFlowGraphCycleExists(inputItemId, outputItemId)) {\r\n            console.error(`Cycle detected from ${inputItemId} to ${outputItemId}.`);\r\n            return;\r\n        }\r\n        */\r\n\r\n        const otherOutput = inputItem.getInputConnection(inputSlot.id);\r\n        if (otherOutput)\r\n            this.deleteConnection(inputItemId, inputSlotId, otherOutput.itemId, otherOutput.slotId);\r\n        \r\n        inputItem.setInputConnection(inputSlot.id, outputItemId, outputSlotId);\r\n        outputItem.setOutputConnection(outputSlot.id, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n\r\n        /*\r\n        const found = outputSlot.connectedToInputs.find(pair => pair.itemId === inputItemId && pair.slotId === inputSlotId);\r\n        if (!found)\r\n            outputSlot.connectedToInputs.push({id: outputSlot.id, itemId: inputItemId, slotId: inputSlotId});\r\n        */\r\n    }\r\n\r\n    deleteConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The input slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        /*\r\n        inputSlot.connectedToOutput = undefined;\r\n        outputSlot.connectedToInputs.removeIf(entry => entry.itemId === inputItemId && entry.slotId === inputSlotId);\r\n        */\r\n\r\n        inputItem.deleteInputConnection(inputSlotId);\r\n        outputItem.deleteOutputConnection(outputSlotId, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    private checkGraphCycleExists(inputItemId: number, outputItemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return true; // True is negative in this case\r\n        }\r\n\r\n        const toItem = scriplet.getNode(outputItemId);\r\n        if (!toItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return true;\r\n        }\r\n\r\n        if (toItem.inputSlots.length <= 0)\r\n            return false;\r\n        if (toItem.inputSlots.some(entry => entry.itemId === inputItemId))\r\n            return true;\r\n\r\n        var result = false;\r\n\r\n        for (var i = 0; i < toItem.inputSlots.length; i++) {\r\n            const conn = toItem.inputSlots[i];\r\n            if (!conn)\r\n                continue;\r\n            const id = conn.itemId;\r\n            result = this.checkGraphCycleExists(inputItemId, id);\r\n            if (result)\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getInputFlowSlot(inputItemId: number, inputSlotId: number): InputFlowSlot | undefined {      \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return inputFlowSlot;\r\n    }\r\n\r\n    getInputFlowSlots(inputItemId: number): InputFlowSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputFlowSlots = inputItem.schema?.inputFlowSlots;\r\n        if (!inputFlowSlots) {\r\n            console.error(`The schema of node item '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputFlowSlots;\r\n    }\r\n\r\n    getInputFlowConnections(inputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputItem.inputFlowSlots;\r\n    }\r\n\r\n    getOutputFlowSlot(outputItemId: number, outputSlotId: number): OutputFlowSlot | undefined {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return outputFlowSlot;\r\n    }\r\n\r\n    getOutputFlowSlots(outputItemId: number): OutputFlowSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputFlowSlots = outputItem.schema?.outputFlowSlots;\r\n        if (!outputFlowSlots) {\r\n            console.error(`The schema of node item '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputFlowSlots;\r\n    }\r\n\r\n    getOutputFlowConnections(outputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputItem.outputFlowSlots;\r\n    }\r\n    \r\n    addFlowConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        if (inputItemId === outputItemId) {\r\n            console.error(`When adding connections, the input item id cannot be the same as the output item id.`);\r\n            return;\r\n        }\r\n        \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!inputFlowSlot.isConnectable)\r\n            return;\r\n\r\n        /*\r\n        if (this.checkFlowGraphCycleExists(inputItemId, outputItemId) || this.checkGraphCycleExists(inputItemId, outputItemId)) {\r\n            console.error(`Cycle detected from ${inputItemId} to ${outputItemId}.`);\r\n            return;\r\n        }\r\n        */\r\n\r\n        const otherOutput = inputItem.getInputFlowConnection(inputSlotId);\r\n        if (otherOutput)\r\n            this.deleteFlowConnection(inputItemId, inputSlotId, otherOutput.itemId, otherOutput.slotId);\r\n        \r\n        inputItem.setInputFlowConnection(inputFlowSlot.id, outputItemId, outputSlotId);\r\n        \r\n        const otherInput = outputItem.getOutputFlowConnection(outputSlotId);\r\n        if (otherInput)\r\n            this.deleteFlowConnection(otherInput.itemId, otherInput.slotId, outputItemId, outputSlotId);\r\n        \r\n        outputItem.setOutputFlowConnection(outputFlowSlot.id, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    deleteFlowConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        inputItem.deleteInputFlowConnection(inputSlotId);\r\n        outputItem.deleteOutputFlowConnection(outputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    private checkFlowGraphCycleExists(inputItemId: number, outputItemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return true; // True is negative in this case\r\n        }\r\n\r\n        const toItem = scriplet.getNode(outputItemId);\r\n        if (!toItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return true;\r\n        }\r\n\r\n        if (toItem.inputFlowSlots.length <= 0)\r\n            return false;\r\n        if (toItem.inputFlowSlots.some(entry => entry.itemId === inputItemId))\r\n            return true;\r\n\r\n        var result = false;\r\n\r\n        for (var i = 0; i < toItem.inputFlowSlots.length; i++) {\r\n            const conn = toItem.inputFlowSlots[i];\r\n            if (!conn)\r\n                continue;\r\n            const id = conn.itemId;\r\n            result = this.checkGraphCycleExists(inputItemId, id);\r\n            if (result)\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    deleteAllConnections(itemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return false;\r\n        }\r\n\r\n        const nodeItem = scriplet.getNode(itemId);\r\n        if (!nodeItem) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return false;\r\n        }\r\n\r\n        nodeItem.outputSlots.forEach(outputSlot => {\r\n            outputSlot.forEach(connectedTo => {\r\n                this.deleteConnection(connectedTo.itemId, connectedTo.slotId, itemId, connectedTo.id);\r\n            });\r\n        });\r\n\r\n        nodeItem.inputSlots.forEach(inputSlot => {\r\n            if (!inputSlot)\r\n                return;\r\n\r\n            this.deleteConnection(itemId, inputSlot.id, inputSlot.itemId, inputSlot.slotId);\r\n        });\r\n\r\n        nodeItem.inputFlowSlots.forEach(inputFlow => {\r\n            if (!inputFlow)\r\n                return;\r\n\r\n            this.deleteFlowConnection(itemId, inputFlow.id, inputFlow.itemId, inputFlow.slotId);\r\n        });\r\n\r\n        nodeItem.outputFlowSlots.forEach(outputFlow => {\r\n            if (!outputFlow)\r\n                return;\r\n            \r\n            this.deleteFlowConnection(outputFlow.itemId, outputFlow.slotId, itemId, outputFlow.id);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default new NodeConnections();","import NodeConnections from \"../managers/NodeConnections\";\r\nimport ScripletManager from \"../managers/ScripletManager\";\r\n\r\nexport type ItemSlotPair = {\r\n    id: number;\r\n    itemId: number;\r\n    slotId: number;\r\n}\r\n\r\nexport abstract class NodeSlot {\r\n    public id: number;\r\n    public name?: string;\r\n\r\n    constructor(id: number, name?: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport abstract class TypedNodeSlot extends NodeSlot {\r\n    public type: string;\r\n\r\n    constructor(id: number, type: string, name?: string) {\r\n        super(id, name);\r\n        this.type = type;\r\n    }\r\n\r\n    isCorrectType(type: string): boolean {\r\n        if (this.type === type)\r\n            return true;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport type IdValuePair = {\r\n    id: number;\r\n    value?: any;\r\n}\r\n\r\nexport class InputSlot extends TypedNodeSlot {\r\n    //public connectedToOutput: ItemSlotPair | undefined;\r\n    // TODO: This value should also be serialized to db.\r\n    public defaultValue: any;\r\n    public isConnectable: boolean;\r\n    public isEditable: boolean;\r\n\r\n    constructor(id: number, type: string, defaultValue: any, name?: string, isConnectable?: boolean, isEditable?: boolean) {\r\n        super(id, type, name);\r\n        this.defaultValue = defaultValue;\r\n        this.isConnectable = isConnectable ?? true;\r\n        this.isEditable = isEditable ?? true;\r\n    }\r\n\r\n    getValue(itemId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const connectedTo = item.getInputConnection(this.id);\r\n        if (!connectedTo)\r\n            return item.getInputValue(this.id) ?? this.defaultValue;\r\n\r\n        const otherSlot = NodeConnections.getOutputSlot(connectedTo.itemId, connectedTo.slotId);\r\n        if (!otherSlot) {\r\n            console.error(`The output slot '${connectedTo.slotId}' of node item '${connectedTo.itemId}' could not be found.`);\r\n            return item.getInputValue(this.id) ?? this.defaultValue;\r\n        }\r\n\r\n        return otherSlot.evaluate();\r\n    }\r\n}\r\n\r\n// TODO: Flow output slots cannot be connected to multiple Flow input slots\r\nexport class OutputSlot extends TypedNodeSlot {\r\n    //public connectedToInputs: ItemSlotPair[] = [];\r\n    public evaluate: () => any;\r\n\r\n    constructor(id: number, type: string, evaluate: () => any, name?: string) {\r\n        super(id, type, name);\r\n        this.evaluate = evaluate;\r\n    }\r\n}\r\n\r\nexport abstract class FlowNodeSlot extends NodeSlot { }\r\n\r\nexport class InputFlowSlot extends FlowNodeSlot {\r\n    //public connectedToOutput: ItemSlotPair | undefined;\r\n    public isConnectable: boolean;\r\n    private evaluate: (thisSlot: InputFlowSlot, returnToSlot?: ItemSlotPair) => any;\r\n\r\n    public returnToSlot: ItemSlotPair | undefined;\r\n\r\n    constructor(id: number, evaluate: (thisSlot: InputFlowSlot, returnToSlot?: ItemSlotPair) => any, isConnectable?: boolean, name?: string) {\r\n        super(id, name);\r\n        this.evaluate = evaluate;\r\n        this.isConnectable = isConnectable ?? true;\r\n    }\r\n\r\n    evaluateSlot(returnToSlot?: ItemSlotPair) {\r\n        this.evaluate(this, returnToSlot);\r\n    }\r\n}\r\n\r\nexport class OutputFlowSlot extends FlowNodeSlot {\r\n    //public connectedToInput: ItemSlotPair | undefined;\r\n\r\n    goNext(itemId: number, returnToSlot?: ItemSlotPair) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const connectedTo = item.getOutputFlowConnection(this.id);\r\n        if (connectedTo) {\r\n            const inputSlot = NodeConnections.getInputFlowSlot(connectedTo.itemId, connectedTo.slotId);\r\n            if (!inputSlot) {\r\n                console.error(`The input flow slot '${connectedTo.slotId}' of node item '${connectedTo.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            inputSlot.evaluateSlot(returnToSlot);\r\n            return;\r\n        }\r\n\r\n        if (returnToSlot) {\r\n            // Return to where the returnToSlot points to\r\n            const returnSlot = NodeConnections.getInputFlowSlot(returnToSlot.itemId, returnToSlot.slotId);\r\n            if (!returnSlot) {\r\n                console.error(`The input flow slot '${returnToSlot.slotId}' of node item '${returnToSlot.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            returnSlot.evaluateSlot();\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport class GetVariableSlot extends InputSlot {\r\n    getValue(itemId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const variableId = item.variableId;\r\n        if (variableId == null) {\r\n            console.error(`The variable id in node item '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const variable = scriplet.getVariable(variableId);\r\n        if (!variable) {\r\n            console.error(`The variable of id '${variableId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return variable.value ?? variable.startValue;\r\n    }\r\n}\r\n\r\nexport class SetVariableSlot extends OutputFlowSlot {\r\n    goNext(itemId: number, returnToSlot?: ItemSlotPair) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const variableId = item.variableId;\r\n        if (variableId == null) {\r\n            console.error(`The variable id in node item '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const variable = scriplet.getVariable(variableId);\r\n        if (!variable) {\r\n            console.error(`The variable of id '${variableId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const connectedTo = item.getOutputFlowConnection(this.id);\r\n        if (connectedTo) {\r\n            const inputSlot = NodeConnections.getInputFlowSlot(connectedTo.itemId, connectedTo.slotId);\r\n            if (!inputSlot) {\r\n                console.error(`The input flow slot '${connectedTo.slotId}' of node item '${connectedTo.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            inputSlot.evaluateSlot(returnToSlot);\r\n            return;\r\n        }\r\n\r\n        if (returnToSlot) {\r\n            // Return to where the returnToSlot points to\r\n            const returnSlot = NodeConnections.getInputFlowSlot(returnToSlot.itemId, returnToSlot.slotId);\r\n            if (!returnSlot) {\r\n                console.error(`The input flow slot '${returnToSlot.slotId}' of node item '${returnToSlot.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            returnSlot.evaluateSlot();\r\n            return;\r\n        }\r\n    }\r\n}","export interface IAssignable<T> {\r\n    value: T;\r\n}\r\n\r\nexport interface IAssignableStatic<T> {\r\n    defaultValue: T;\r\n}\r\n\r\nexport interface IConvertible<T> {\r\n    fromString(value: string): void;\r\n    toString(): string;\r\n}\r\n\r\nexport interface IConvertibleStatic<T> {\r\n    convertFromString(value: string): T | undefined;\r\n    convertToString(value: T): string;\r\n}\r\n\r\nexport interface INamedClassStatic {\r\n    className: string;\r\n}\r\n\r\nexport function staticImplements<T>() {\r\n    return <U extends T>(constructor: U) => { return constructor; };\r\n}\r\n\r\n// TODO: Implement type converters\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<number>>()\r\n@staticImplements<IConvertibleStatic<number>>()\r\nexport class Number implements IAssignable<number> {\r\n    public static className: string = \"Number\";\r\n    public static defaultValue: number = 0;\r\n\r\n    public value: number;\r\n    \r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): number | undefined {\r\n        // TODO: Use regex to check input\r\n        const regex = \"^(-[1-9][0-9]*)|([0-9]+)$\";\r\n        const val = value.match(regex);\r\n        if (!val) {\r\n            console.error(`The input doesn't match the regex '${regex}'.`);\r\n            return;\r\n        }\r\n\r\n        return parseInt(value);\r\n    }\r\n\r\n    public static convertToString(value: number): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<string>>()\r\n@staticImplements<IConvertibleStatic<string>>()\r\nexport class String implements IAssignable<string> {\r\n    public static className: string = \"String\";\r\n    public static defaultValue: string = \"\";\r\n\r\n    public value: string;\r\n\r\n    constructor(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): string | undefined {\r\n        return value;\r\n    }\r\n\r\n    public static convertToString(value: string): string {\r\n        return value;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<boolean>>()\r\n@staticImplements<IConvertibleStatic<boolean>>()\r\nexport class Boolean implements IAssignable<boolean> {\r\n    public static className: string = \"Boolean\";\r\n    public static defaultValue: boolean = true;\r\n\r\n    public value: boolean;\r\n\r\n    constructor(value: boolean) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): boolean | undefined {\r\n        return value === \"true\" ? true : false;\r\n    }\r\n\r\n    public static convertToString(value: boolean): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<number>>()\r\n@staticImplements<IConvertibleStatic<number>>()\r\nexport class Flow implements IAssignable<number> {\r\n    public static className: string = \"Flow\";\r\n    public static defaultValue: number = -1;\r\n\r\n    public value: number;\r\n    \r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): number | undefined {\r\n        // TODO: Use regex to check input\r\n        const regex = \"^([0-9]+)$\";\r\n        const val = value.match(regex);\r\n        if (!val) {\r\n            console.error(`The input doesn't match the regex '${regex}'.`);\r\n            return;\r\n        }\r\n\r\n        return parseInt(value);\r\n    }\r\n\r\n    public static convertToString(value: number): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<number>>()\r\nexport class Variable implements IAssignable<number> {\r\n    public static className: string = \"Variable\";\r\n    public static defaultValue: number = -1;\r\n\r\n    public value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<any>>()\r\nexport class Any implements IAssignable<any> {\r\n    public static className: string = \"Any\";\r\n    public static defaultValue: any;\r\n\r\n    public value: any;\r\n\r\n    constructor(value: any) {\r\n        this.value = value;\r\n    }\r\n}","import { BaseNodeSchema } from \"../models/NodeSchema\";\r\n\r\nclass NodeSchemaManager {\r\n    public nodeSchemas: Map<string, BaseNodeSchema>;\r\n\r\n    constructor() {\r\n        this.nodeSchemas = new Map<string, BaseNodeSchema>();\r\n    }\r\n\r\n    getNewSchema(itemId: number, schemaId: string): BaseNodeSchema {\r\n        const schema = this.nodeSchemas.get(schemaId);\r\n        if (!schema)\r\n            throw new Error(`The schema '${schemaId}' could not be found.`);\r\n        return schema.createNew(itemId);\r\n    }\r\n\r\n    getBaseSchema(id: string): BaseNodeSchema {\r\n        const schema = this.nodeSchemas.get(id);\r\n        if (!schema)\r\n            throw new Error(`The schema '${id}' could not be found.`);\r\n        return schema;\r\n    }\r\n\r\n    getBaseSchemas(): BaseNodeSchema[] {\r\n        return [...this.nodeSchemas.values()];\r\n    }\r\n}\r\n\r\nexport default new NodeSchemaManager();","export default class Colors {\r\n    static Gray = {\r\n        100: '#f7fafc',\r\n        200: '#edf2f7',\r\n        300: '#e2e8f0',\r\n        400: '#cbd5e0',\r\n        500: '#a0aec0',\r\n        600: '#718096',\r\n        700: '#4a5568',\r\n        800: '#2d3748',\r\n        900: '#1a202c',\r\n    };\r\n    static Red = {\r\n        100: '#fff5f5',\r\n        200: '#fed7d7',\r\n        300: '#feb2b2',\r\n        400: '#fc8181',\r\n        500: '#f56565',\r\n        600: '#e53e3e',\r\n        700: '#c53030',\r\n        800: '#9b2c2c',\r\n        900: '#742a2a',\r\n    };\r\n    static Orange = {\r\n        100: '#fffaf0',\r\n        200: '#feebc8',\r\n        300: '#fbd38d',\r\n        400: '#f6ad55',\r\n        500: '#ed8936',\r\n        600: '#dd6b20',\r\n        700: '#c05621',\r\n        800: '#9c4221',\r\n        900: '#7b341e',\r\n    };\r\n    static Yellow = {\r\n        100: '#fffff0',\r\n        200: '#fefcbf',\r\n        300: '#faf089',\r\n        400: '#f6e05e',\r\n        500: '#ecc94b',\r\n        600: '#d69e2e',\r\n        700: '#b7791f',\r\n        800: '#975a16',\r\n        900: '#744210',\r\n    };\r\n    static Green = {\r\n        100: '#f0fff4',\r\n        200: '#c6f6d5',\r\n        300: '#9ae6b4',\r\n        400: '#68d391',\r\n        500: '#48bb78',\r\n        600: '#38a169',\r\n        700: '#2f855a',\r\n        800: '#276749',\r\n        900: '#22543d',\r\n    };\r\n    static Teal = {\r\n        100: '#e6fffa',\r\n        200: '#b2f5ea',\r\n        300: '#81e6d9',\r\n        400: '#4fd1c5',\r\n        500: '#38b2ac',\r\n        600: '#319795',\r\n        700: '#2c7a7b',\r\n        800: '#285e61',\r\n        900: '#234e52',\r\n    };\r\n    static Blue = {\r\n        100: '#ebf8ff',\r\n        200: '#bee3f8',\r\n        300: '#90cdf4',\r\n        400: '#63b3ed',\r\n        500: '#4299e1',\r\n        600: '#3182ce',\r\n        700: '#2b6cb0',\r\n        800: '#2c5282',\r\n        900: '#2a4365',\r\n    };\r\n    static Indigo = {\r\n        100: '#ebf4ff',\r\n        200: '#c3dafe',\r\n        300: '#a3bffa',\r\n        400: '#7f9cf5',\r\n        500: '#667eea',\r\n        600: '#5a67d8',\r\n        700: '#4c51bf',\r\n        800: '#434190',\r\n        900: '#3c366b',\r\n    };\r\n    static Purple = {\r\n        100: '#faf5ff',\r\n        200: '#e9d8fd',\r\n        300: '#d6bcfa',\r\n        400: '#b794f4',\r\n        500: '#9f7aea',\r\n        600: '#805ad5',\r\n        700: '#6b46c1',\r\n        800: '#553c9a',\r\n        900: '#44337a',\r\n    };\r\n    static Pink = {\r\n        100: '#fff5f7',\r\n        200: '#fed7e2',\r\n        300: '#fbb6ce',\r\n        400: '#f687b3',\r\n        500: '#ed64a6',\r\n        600: '#d53f8c',\r\n        700: '#b83280',\r\n        800: '#97266d',\r\n        900: '#702459',\r\n    };\r\n}","import { OutputSlot, InputSlot, InputFlowSlot, OutputFlowSlot, GetVariableSlot } from \"./NodeSlot\";\r\nimport { Number, Boolean, String, Variable } from \"../utils/Types\";\r\nimport NodeSchemaManager from \"../managers/NodeSchemaManager\";\r\nimport Console from \"../managers/Console\";\r\nimport ScripletManager from \"../managers/ScripletManager\";\r\nimport { ICategorizable } from \"./Category\";\r\n\r\nfunction AddSchema(target: Function) {\r\n    const origCtor = target;\r\n\r\n    function instantiate(constructor: any, ...args: any[]) {\r\n        return new constructor(...args);\r\n    }\r\n\r\n    const newCtor = function(...args: any[]) {\r\n        return instantiate(origCtor, ...args);\r\n    };\r\n\r\n    newCtor.prototype = origCtor.prototype;\r\n\r\n    const schema = newCtor() as BaseNodeSchema;\r\n    NodeSchemaManager.nodeSchemas.set(schema.id, schema.createNew(-1));\r\n}\r\n\r\nexport enum BaseSchemaTypes {\r\n    Start = \"Hidden/Start\",\r\n    IfElse = \"Base/ControlFlow/IfElse\",\r\n    ForLoop = \"Base/ControlFlow/ForLoop\",\r\n    ForLoopBreak = \"Base/ControlFlow/ForLoopBreak\",\r\n    WhileLoop = \"Base/ControlFlow/WhileLoop\",\r\n    Input = \"Hidden/Input\",\r\n    Output = \"Hidden/Output\",\r\n    PrintNumber = \"Base/Debug/PrintNumber\",\r\n    PrintBoolean = \"Base/Debug/PrintBoolean\",\r\n\r\n    InputNumber = \"Base/InputNumber\",\r\n    AddNumbers = \"Base/Math/Number/Add\",\r\n    SubtractNumbers = \"Base/Math/Number/Subtract\",\r\n    MultiplyNumbers = \"Base/Math/Number/Multiply\",\r\n    DivideNumbers = \"Base/Math/Number/Divide\",\r\n    ModuloNumbers = \"Base/Math/Number/Modulo\",\r\n    PowNumbers = \"Base/Math/Number/Power\",\r\n    SqrtNumber = \"Base/Math/Number/SquareRoot\",\r\n    CeilNumber = \"Base/Math/Number/Ceiling\",\r\n    FloorNumber = \"Base/Math/Number/Floor\",\r\n    LessThanNumbers = \"Base/Math/Number/LessThan\",\r\n    LessThanEqualNumbers = \"Base/Math/Number/LessThanEqual\",\r\n    GreaterThanNumbers = \"Base/Math/Number/GreaterThan\",\r\n    GreaterThanEqualNumbers = \"Base/Math/Number/GreaterThanEqual\",\r\n    EqualNumbers = \"Base/Math/Number/Equal\",\r\n    NotEqualNumbers = \"Base/Math/Number/NotEqual\",\r\n\r\n    AndBoolean = \"Base/Math/Boolean/And\",\r\n    OrBoolean = \"Base/Math/Boolean/Or\",\r\n    EqualBoolean = \"Base/Math/Boolean/Equal\",\r\n    NotEqualBoolean = \"Base/Math/Boolean/NotEqual\",\r\n    NotBoolean = \"Base/Math/Boolean/Not\",\r\n\r\n    GetNumber = \"Hidden/Getter/Number\",\r\n    SetNumber = \"Hidden/Setter/Number\",\r\n    GetBoolean = \"Hidden/Getter/Boolean\",\r\n    SetBoolean = \"Hidden/Setter/Boolean\"\r\n}\r\n\r\n// TODO: Possibly move all these things to a config file that is read by these and behavior is filled in\r\nexport abstract class BaseNodeSchema implements ICategorizable {\r\n    readonly id: string;\r\n    readonly name: string;\r\n    readonly uniqueNamePrefix: string;\r\n    readonly width: number;\r\n    //readonly hasVariable: boolean;\r\n    readonly inputFlowSlots: InputFlowSlot[];\r\n    readonly outputFlowSlots: OutputFlowSlot[];\r\n    readonly inputSlots: InputSlot[];\r\n    readonly outputSlots: OutputSlot[];\r\n\r\n    readonly isDeletable: boolean;\r\n    readonly isNameEditable: boolean;\r\n\r\n    protected abstract createNewSchema(itemId: number): BaseNodeSchema;\r\n\r\n    constructor(id: string, name: string, uniqueNamePrefix: string, width: number, inputFlowSlots: InputFlowSlot[], outputFlowSlots: OutputFlowSlot[], inputSlots: InputSlot[], outputSlots: OutputSlot[], isDeletable: boolean = true, isNameEditable: boolean = true) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.uniqueNamePrefix = uniqueNamePrefix;\r\n        this.width = width;\r\n        this.inputFlowSlots = inputFlowSlots;\r\n        this.outputFlowSlots = outputFlowSlots;\r\n        this.inputSlots = inputSlots;\r\n        this.outputSlots = outputSlots;\r\n\r\n        this.isDeletable = isDeletable;\r\n        this.isNameEditable = isNameEditable;\r\n    }\r\n\r\n    maxLength(): number {\r\n        return Math.max(this.inputFlowSlots.length + this.inputSlots.length, this.outputFlowSlots.length + this.outputSlots.length);\r\n    }\r\n\r\n    createNew(itemId: number): BaseNodeSchema {\r\n        return this.createNewSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class StartFlowSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.Start;\r\n        const name = \"Start\";\r\n        const uniqueNamePrefix = \"start\";\r\n\r\n        const output1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlowSlots = [output1];\r\n        const inputFlowSlots: InputFlowSlot[] = [new InputFlowSlot(0, () => {\r\n            output1.goNext(itemId);\r\n        }, false, \" \")];\r\n\r\n        super(id, name, uniqueNamePrefix, 120, inputFlowSlots, outputFlowSlots, [], [], false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): StartFlowSchema {\r\n        return new StartFlowSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class IfElseSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.IfElse;\r\n        const name = \"If/Else\";\r\n        const uniqueNamePrefix = \"ifElse\";\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue, \"Condition\");\r\n        const inputSlots = [input1];\r\n\r\n        const output1 = new OutputFlowSlot(0, \"True\");\r\n        const output2 = new OutputFlowSlot(1, \"False\");\r\n        const outputFlowSlots = [output1, output2];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (input1.getValue(itemId) === true)\r\n                output1.goNext(itemId, returnToSlot)\r\n            else\r\n                output2.goNext(itemId, returnToSlot);\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 220, inputFlowSlots, outputFlowSlots, inputSlots, []);\r\n    }\r\n\r\n    createNewSchema(itemId: number): IfElseSchema {\r\n        return new IfElseSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ForLoopSchema extends BaseNodeSchema {\r\n    private start: number | undefined;\r\n    private end: number | undefined;\r\n    private increment: number | undefined;\r\n    private index: number;\r\n\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.ForLoop;\r\n        const name = \"For Loop\";\r\n        const uniqueNamePrefix = \"forLoop\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue, \"Start\");\r\n        const input3 = new InputSlot(2, Number.className, 10, \"End\");\r\n        const input4 = new InputSlot(3, Number.className, 1, \"Increment\");\r\n        const inputSlots = [input2, input3, input4];\r\n\r\n        const output3 = new OutputSlot(2, Number.className, () => {\r\n            // TODO: Kinda hackish to solve the problem below\r\n            return this.index - (this.increment ?? 1);\r\n        }, \"Index\");\r\n        const outputSlots = [output3];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.start == null || this.end == null || this.increment == null) {\r\n                this.start = input2.getValue(itemId);\r\n                this.end = input3.getValue(itemId);\r\n                this.increment = input4.getValue(itemId);\r\n                this.index = this.start ?? 0;\r\n            }\r\n            \r\n            if (this.index < (this.end ?? 0)) {\r\n                // TODO: This should really increment only after everything else is done.\r\n                this.index += this.increment ?? 1;\r\n                outputFlow1.goNext(itemId, {id: -1, itemId: itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.index = 0;\r\n                this.start = undefined;\r\n                this.end = undefined;\r\n                outputFlow2.goNext(itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.index = 0;\r\n    }\r\n\r\n    createNewSchema(itemId: number): ForLoopSchema {\r\n        return new ForLoopSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ForLoopBreakSchema extends BaseNodeSchema {\r\n    private start: number | undefined;\r\n    private end: number | undefined;\r\n    private increment: number | undefined;\r\n    private index: number;\r\n\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.ForLoopBreak;\r\n        const name = \"For Loop Break\";\r\n        const uniqueNamePrefix = \"forLoopBreak\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input2 = new InputSlot(2, Number.className, Number.defaultValue, \"Start\");\r\n        const input3 = new InputSlot(3, Number.className, 10, \"End\");\r\n        const input4 = new InputSlot(4, Number.className, 1, \"Increment\");\r\n        const inputSlots = [input2, input3, input4];\r\n\r\n        const output3 = new OutputSlot(2, Number.className, () => {\r\n            // TODO: Kinda hackish to solve the problem below\r\n            return this.index - (this.increment ?? 1);\r\n        }, \"Index\");\r\n        const outputSlots = [output3];\r\n\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.start == null || this.end == null || this.increment == null) {\r\n                this.start = input2.getValue(itemId);\r\n                this.end = input3.getValue(itemId);\r\n                this.increment = input4.getValue(itemId);\r\n                this.index = this.start ?? 0;\r\n            }\r\n            \r\n            if (this.index < (this.end ?? 0)) {\r\n                // TODO: This should really increment only after everything else is done.\r\n                this.index += this.increment ?? 1;\r\n                outputFlow1.goNext(itemId, {id: -1, itemId: itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.index = 0;\r\n                this.start = undefined;\r\n                this.end = undefined;\r\n                outputFlow2.goNext(itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\");\r\n\r\n        const inputFlow5 = new InputFlowSlot(1, (thisSlot, returnToSlot) => {\r\n            const returnTo = thisSlot.returnToSlot;\r\n            thisSlot.returnToSlot = undefined;\r\n            this.index = 0;\r\n            this.start = undefined;\r\n            this.end = undefined;\r\n            outputFlow2.goNext(itemId, returnTo);\r\n        }, true, \"Break\");\r\n\r\n        const inputFlowSlots = [inputFlow1, inputFlow5];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.index = 0;\r\n    }\r\n\r\n    createNewSchema(itemId: number): ForLoopBreakSchema {\r\n        return new ForLoopBreakSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class WhileLoopSchema extends BaseNodeSchema {\r\n    // This limit is so the while loop will still halt at some point instead of \r\n    // freezing the entire app. Can be set to 0 to run forever.\r\n    private limit: number | undefined;\r\n    private counter: number;\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.WhileLoop;\r\n        const name = \"While Loop\";\r\n        const uniqueNamePrefix = \"whileLoop\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue, \"Condition\");\r\n        const input2 = new InputSlot(2, Number.className, 10000, \"Limit\");\r\n        const inputSlots = [input1, input2];\r\n\r\n        const outputSlots: OutputSlot[] = [];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.limit == null) {\r\n                this.limit = input2.getValue(itemId);\r\n            }\r\n            \r\n            if (this.limit == null)\r\n                console.error(`The limit of while loop of id '${itemId}' is undefined, therefore this while loop won't run. Set it to 0 if it is intended to run forever.`);\r\n\r\n            if (input1.getValue(itemId) && this.limit != null && this.counter < (this.limit <= 0 ? 1 : this.limit)) {\r\n                if (this.limit > 0)\r\n                    this.counter += 1;\r\n\r\n                outputFlow1.goNext(itemId, {id: -1, itemId: itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.counter = 0;\r\n                this.limit = undefined;\r\n                outputFlow2.goNext(itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.counter = 0;\r\n    }\r\n\r\n    createNewSchema(itemId: number): WhileLoopSchema {\r\n        return new WhileLoopSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class InputSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.Input;\r\n        const name = \"Input\";\r\n        const uniqueNamePrefix = \"input\";\r\n\r\n        const input1 = new GetVariableSlot(0, Variable.className, Variable.defaultValue, \"Get Variable\", false, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 180, [], [], inputSlots, outputSlots, true, false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): InputSchema {\r\n        return new InputSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GetNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.GetNumber;\r\n        const name = \"Get Number\";\r\n        const uniqueNamePrefix = \"getNum\";\r\n\r\n        const input1 = new GetVariableSlot(0, Variable.className, Variable.defaultValue, \"Get Variable\", false, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 180, [], [], inputSlots, outputSlots, true, false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): GetNumberSchema {\r\n        return new GetNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SetNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.SetNumber;\r\n        const name = \"Set Number\";\r\n        const uniqueNamePrefix = \"setNum\";\r\n\r\n        const input1 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Number.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            const scriplet = ScripletManager.currentScriplet;\r\n            if (!scriplet) {\r\n                console.error(`The current scriplet could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const item = scriplet.getNode(itemId);\r\n            if (!item) {\r\n                console.error(`The node item of id '${itemId}' could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const variableId = item.variableId;\r\n            if (variableId == null) {\r\n                console.error(`The variable id in node item '${itemId}' could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const variable = scriplet.getVariable(variableId);\r\n            if (!variable) {\r\n                console.error(`The variable of id '${variableId}' could not be found.`);\r\n                return;\r\n            }\r\n\r\n            if (variable.type !== Number.className) {\r\n                console.error(`Cannot set to variable '${variableId}' of type '${variable.type}' when the needed type is '${Number.className}'.`);\r\n                return;\r\n            }\r\n    \r\n            variable.value = input1.getValue(itemId);\r\n            scriplet.setVariable(variable);\r\n\r\n            outputFlow1.goNext(itemId, returnToSlot);\r\n        }, true, \"Set Variable\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots, true, false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): SetNumberSchema {\r\n        return new SetNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GetBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.GetBoolean;\r\n        const name = \"Get Boolean\";\r\n        const uniqueNamePrefix = \"getBool\";\r\n\r\n        const input1 = new GetVariableSlot(0, Variable.className, Variable.defaultValue, \"Get Variable\", false, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 180, [], [], inputSlots, outputSlots, true, false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): GetBooleanSchema {\r\n        return new GetBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SetBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.SetBoolean;\r\n        const name = \"Set Boolean\";\r\n        const uniqueNamePrefix = \"setBoolean\";\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Boolean.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            const scriplet = ScripletManager.currentScriplet;\r\n            if (!scriplet) {\r\n                console.error(`The current scriplet could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const item = scriplet.getNode(itemId);\r\n            if (!item) {\r\n                console.error(`The node item of id '${itemId}' could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const variableId = item.variableId;\r\n            if (variableId == null) {\r\n                console.error(`The variable id in node item '${itemId}' could not be found.`);\r\n                return;\r\n            }\r\n    \r\n            const variable = scriplet.getVariable(variableId);\r\n            if (!variable) {\r\n                console.error(`The variable of id '${variableId}' could not be found.`);\r\n                return;\r\n            }\r\n\r\n            if (variable.type !== Boolean.className) {\r\n                console.error(`Cannot set to variable '${variableId}' of type '${variable.type}' when the needed type is '${Boolean.className}'.`);\r\n                return;\r\n            }\r\n    \r\n            variable.value = input1.getValue(itemId);\r\n            scriplet.setVariable(variable);\r\n\r\n            outputFlow1.goNext(itemId, returnToSlot);\r\n        }, true, \"Set Variable\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots, true, false);\r\n    }\r\n\r\n    createNewSchema(itemId: number): SetBooleanSchema {\r\n        return new SetBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class OutputSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.Output;\r\n        const name = \"Output\";\r\n        const uniqueNamePrefix = \"output\";\r\n        const inputSlots = [new InputSlot(0, Number.className, Number.defaultValue)];\r\n        const outputSlots: OutputSlot[] = [];\r\n\r\n        super(id, name, uniqueNamePrefix, 120, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): OutputSchema {\r\n        return new OutputSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class InputNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.InputNumber;\r\n        const name = \"Input Number\";\r\n        const uniqueNamePrefix = \"inputNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue, undefined, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 190, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): InputNumberSchema {\r\n        return new InputNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PrintNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.PrintNumber;\r\n        const name = \"Print Number\";\r\n        const uniqueNamePrefix = \"printNum\";\r\n\r\n        const input1 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Number.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            Console.log(input1.getValue(itemId));\r\n            outputFlow1.goNext(itemId, returnToSlot);\r\n        }, true, \"Entry\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): PrintNumberSchema {\r\n        return new PrintNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PrintBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.PrintBoolean;\r\n        const name = \"Print Boolean\";\r\n        const uniqueNamePrefix = \"printBool\";\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Boolean.className, () => {\r\n            return input1.getValue(itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            Console.log(input1.getValue(itemId));\r\n            outputFlow1.goNext(itemId, returnToSlot);\r\n        }, true, \"Entry\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): PrintBooleanSchema {\r\n        return new PrintBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n// The base class for all addition \r\n// We have two choices:\r\n// - Extend from this AddSchema to make addition nodes for different object types\r\n//   - Can customize every aspect of the node\r\n// - Create a universal way to add same-typed objects together through interfaces\r\n//   - Will only need one universal addition node that uses the interface to add objects\r\n@AddSchema\r\nexport class AddNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.AddNumbers;\r\n        const name = \"Add Numbers\";\r\n        const uniqueNamePrefix = \"addNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            // TODO: Type check maybe?\r\n            return input1.getValue(itemId) + input2.getValue(itemId);\r\n        }, \"Sum\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): AddNumbersSchema {\r\n        return new AddNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SubtractNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.SubtractNumbers;\r\n        const name = \"Subtract Numbers\";\r\n        const uniqueNamePrefix = \"subtractNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId) - input2.getValue(itemId);\r\n        }, \"Difference\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 220, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): SubtractNumbersSchema {\r\n        return new SubtractNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class MultiplyNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.MultiplyNumbers;\r\n        const name = \"Multiply Numbers\";\r\n        const uniqueNamePrefix = \"multiplyNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId) * input2.getValue(itemId);\r\n        }, \"Product\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 210, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): MultiplyNumbersSchema {\r\n        return new MultiplyNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class DivideNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.DivideNumbers;\r\n        const name = \"Divide Numbers\";\r\n        const uniqueNamePrefix = \"divideNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, 1);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(itemId) / (input2.getValue(itemId) || 1);\r\n        }, \"Quotient\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 210, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): DivideNumbersSchema {\r\n        return new DivideNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ModuloNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.ModuloNumbers;\r\n        const name = \"Modulo Numbers\";\r\n        const uniqueNamePrefix = \"moduloNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            const num1 = input1.getValue(itemId);\r\n            const num2 = input2.getValue(itemId);\r\n            return ((num1 % num2) + num2) % num2;\r\n        }, \"Modulo\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): ModuloNumbersSchema {\r\n        return new ModuloNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PowNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.PowNumbers;\r\n        const name = \"Power Numbers\";\r\n        const uniqueNamePrefix = \"powNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue, \"Base\");\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue, \"Exponent\");\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.pow(input1.getValue(itemId), input2.getValue(itemId));\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): PowNumbersSchema {\r\n        return new PowNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SqrtNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.SqrtNumber;\r\n        const name = \"Square Root Number\";\r\n        const uniqueNamePrefix = \"sqrtNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.sqrt(input1.getValue(itemId));\r\n        }, \"Sqrt\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): SqrtNumberSchema {\r\n        return new SqrtNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class CeilNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.CeilNumber;\r\n        const name = \"Ceiling Number\";\r\n        const uniqueNamePrefix = \"ceilNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.ceil(input1.getValue(itemId));\r\n        }, \"Ceil\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): CeilNumberSchema {\r\n        return new CeilNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class FloorNumberSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.FloorNumber;\r\n        const name = \"Floor Number\";\r\n        const uniqueNamePrefix = \"floorNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.floor(input1.getValue(itemId));\r\n        }, \"Floor\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): FloorNumberSchema {\r\n        return new FloorNumberSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class LessThanNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.LessThanNumbers;\r\n        const name = \"Less Than Numbers\";\r\n        const uniqueNamePrefix = \"lessThanNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) < input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): LessThanNumbersSchema {\r\n        return new LessThanNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class LessThanEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.LessThanEqualNumbers;\r\n        const name = \"Less Than Equal Numbers\";\r\n        const uniqueNamePrefix = \"lessThanEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) <= input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): LessThanEqualNumbersSchema {\r\n        return new LessThanEqualNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GreaterThanNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.GreaterThanNumbers;\r\n        const name = \"Greater Than Numbers\";\r\n        const uniqueNamePrefix = \"greaterThanNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) > input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): GreaterThanNumbersSchema {\r\n        return new GreaterThanNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GreaterThanEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.GreaterThanEqualNumbers;\r\n        const name = \"Greater Than Equal Numbers\";\r\n        const uniqueNamePrefix = \"greaterThanEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) >= input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): GreaterThanEqualNumbersSchema {\r\n        return new GreaterThanEqualNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class EqualNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.EqualNumbers;\r\n        const name = \"Equal Numbers\";\r\n        const uniqueNamePrefix = \"equalNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) === input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): EqualNumbersSchema {\r\n        return new EqualNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.NotEqualNumbers;\r\n        const name = \"Not Equal Numbers\";\r\n        const uniqueNamePrefix = \"notEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) !== input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): NotEqualNumbersSchema {\r\n        return new NotEqualNumbersSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class AndBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.AndBoolean;\r\n        const name = \"And Boolean\";\r\n        const uniqueNamePrefix = \"andBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) && input2.getValue(itemId);\r\n        }, \"And\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): AndBooleanSchema {\r\n        return new AndBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class OrBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.OrBoolean;\r\n        const name = \"Or Boolean\";\r\n        const uniqueNamePrefix = \"orBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) || input2.getValue(itemId);\r\n        }, \"Or\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): OrBooleanSchema {\r\n        return new OrBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class EqualBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.EqualBoolean;\r\n        const name = \"Equal Boolean\";\r\n        const uniqueNamePrefix = \"equalBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) === input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): EqualBooleanSchema {\r\n        return new EqualBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotEqualBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.NotEqualBoolean;\r\n        const name = \"Not Equal Boolean\";\r\n        const uniqueNamePrefix = \"notEqualBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(itemId) !== input2.getValue(itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): NotEqualBooleanSchema {\r\n        return new NotEqualBooleanSchema(itemId);\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotBooleanSchema extends BaseNodeSchema {\r\n    constructor(itemId: number) {\r\n        const id = BaseSchemaTypes.NotBoolean;\r\n        const name = \"Not Boolean\";\r\n        const uniqueNamePrefix = \"notBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return !input1.getValue(itemId);\r\n        }, \"Not\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(itemId: number): NotBooleanSchema {\r\n        return new NotBooleanSchema(itemId);\r\n    }\r\n}","import Colors from \"../utils/Colors\";\r\nimport { SimpleEventDispatcher, ISimpleEventHandler } from \"ste-simple-events\";\r\n\r\nexport type ConsoleMessage = {\r\n    message: string;\r\n    color: string;\r\n}\r\n\r\nclass Console {\r\n    private onMessage = new SimpleEventDispatcher<ConsoleMessage>();\r\n\r\n    subscribe(func: ISimpleEventHandler<ConsoleMessage>) {\r\n        this.onMessage.subscribe(func)\r\n    }\r\n\r\n    log(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Gray[100]});\r\n    }\r\n\r\n    error(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Red[500]});\r\n    }\r\n\r\n    success(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Green[400]});\r\n    }\r\n}\r\n\r\nexport default new Console();","import NodeSchemaManager from \"./NodeSchemaManager\";\r\n\r\nclass VariableManager {\r\n    private typeCount: Map<string, number>;\r\n\r\n    constructor() {\r\n        this.typeCount = new Map<string, number>();\r\n    }\r\n\r\n    getNextVariableName(schemaId: string): string | undefined {\r\n        const schema = NodeSchemaManager.getBaseSchema(schemaId);\r\n        if (!schema) {\r\n            console.error(`The schema of id '${schemaId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        let count = this.typeCount.get(schemaId);\r\n        // This shouldn't be written as !count because having a value of 0 will always return true.\r\n        if (count == null) {\r\n            this.typeCount.set(schemaId, 1);\r\n            count = 1;\r\n        }\r\n        else\r\n            this.typeCount.set(schemaId, count + 1);\r\n\r\n        return `${schema.uniqueNamePrefix}${count}`;\r\n    }\r\n}\r\n\r\nexport default new VariableManager();","import { BaseNodeSchema } from './NodeSchema';\r\nimport NodeSchemaManager from '../managers/NodeSchemaManager';\r\nimport VariableManager from '../managers/VariableManager';\r\nimport { IdValuePair, ItemSlotPair } from './NodeSlot';\r\nimport ScripletManager from '../managers/ScripletManager';\r\n\r\n// TODO: Implement slot connections here instead because...\r\n// When getting a node from the scriplet, it always creates a new schema,\r\n// therefore the slot connections added there when connecting nodes are not saved.\r\nexport interface INodeItem {\r\n    id: number;\r\n    customName?: string;\r\n    x: number;\r\n    y: number;\r\n    schemaId: string;\r\n    inputValues: IdValuePair[];\r\n    inputSlots: ItemSlotPair[];\r\n    inputFlowSlots: ItemSlotPair[];\r\n    outputSlots: Map<number, ItemSlotPair[]>;\r\n    outputFlowSlots: ItemSlotPair[];\r\n    variableId?: number;\r\n}\r\n\r\n// TODO: When position changes, new x and y coords are not saved to db\r\nexport class NodeItem implements INodeItem {\r\n    public id: number;\r\n    public customName?: string;\r\n    public x: number;\r\n    public y: number;\r\n    public schemaId: string;\r\n    public inputValues: IdValuePair[];\r\n    public inputSlots: ItemSlotPair[];\r\n    public inputFlowSlots: ItemSlotPair[];\r\n    public outputSlots: Map<number, ItemSlotPair[]>;\r\n    public outputFlowSlots: ItemSlotPair[];\r\n    public variableId?: number;\r\n\r\n    public variableName: string;\r\n    public schema: BaseNodeSchema;\r\n\r\n    constructor(id: number, x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string, variableId?: number) {\r\n        this.id = id;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.schemaId = schemaId;\r\n        this.inputValues = inputValues;\r\n        this.inputSlots = inputSlots;\r\n        this.inputFlowSlots = inputFlowSlots;\r\n        this.outputSlots = outputSlots;\r\n        this.outputFlowSlots = outputFlowSlots;\r\n        \r\n        if (variableId != null) {\r\n            const variable = ScripletManager.currentScriplet?.getVariable(variableId);\r\n            this.customName = variable?.name;\r\n            this.variableId = variableId;\r\n        } else {\r\n            this.customName = customName;\r\n        }\r\n\r\n        this.variableName = VariableManager.getNextVariableName(schemaId) ?? \"undefined\";\r\n        this.schema = NodeSchemaManager.getNewSchema(id, schemaId);\r\n\r\n        // Necessary so the variableName and schema are not serialized to db\r\n        Object.defineProperties(this, {\r\n            variableName: {enumerable: false, writable: true},\r\n            schema: {enumerable: false, writable: true}\r\n        });\r\n    }\r\n\r\n    getInputConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.inputSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setInputConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.inputSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Input slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteInputConnection(slotId: number) {\r\n        this.inputSlots = this.inputSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n\r\n    // I'm an idiot... I really made just one field to store the input\r\n    // value of a node when a node can have multiple input slots... *facepalm*\r\n    getInputValue(slotId: number): any {\r\n        const result = this.inputValues.filter(value => value.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input value '${slotId}' of node item '${this.id}' can only have 1 value. Will return the first value found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0].value;\r\n    }\r\n\r\n    setInputValue(slotId: number, value?: any) {\r\n        const result = this.inputValues.filter(value => value.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input value '${slotId}' of node item '${this.id}' can only have 1 value. Will return the first value found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputValues.push({id: slotId, value: value});\r\n            return;\r\n        }\r\n\r\n        const val = result[0];\r\n        val.value = value;\r\n    }\r\n\r\n    getOutputConnections(slotId: number): ItemSlotPair[] {\r\n        // TODO: Also check if all slots in a subset have the same ids\r\n        const result = this.outputSlots.get(slotId);\r\n        if (!result)\r\n            return [];\r\n\r\n        return result;\r\n    }\r\n\r\n    setOutputConnection(id: number, itemId: number, slotId: number) {\r\n        const result = this.outputSlots.get(id);\r\n        if (!result) {\r\n            this.outputSlots.set(id, [{id, itemId, slotId}]);\r\n            return;\r\n        }\r\n\r\n        const similar = result.find(pair => pair.id === id && pair.itemId === itemId && pair.slotId === slotId);\r\n        if (similar) {\r\n            console.error(`The connection '${itemId}, ${slotId}' is already connected to node item slot '${this.id}, ${id}'. Something in the code may have caused this duplication.`);\r\n            return;\r\n        }\r\n\r\n        result.push({id, itemId, slotId});\r\n    }\r\n\r\n    deleteOutputConnection(id: number, itemId: number, slotId: number) {\r\n        let result = this.outputSlots.get(id);\r\n        if (result) {\r\n            result = result.filter(pair => pair.id !== id && pair.itemId !== itemId && pair.slotId !== slotId);\r\n            this.outputSlots.set(id, result);\r\n        }\r\n    }\r\n\r\n    getInputFlowConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.inputFlowSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input flow slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setInputFlowConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.inputFlowSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Input flow slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputFlowSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteInputFlowConnection(slotId: number) {\r\n        this.inputFlowSlots = this.inputFlowSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n\r\n    getOutputFlowConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.outputFlowSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Output flow slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setOutputFlowConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.outputFlowSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Output flow slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.outputFlowSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteOutputFlowConnection(slotId: number) {\r\n        this.outputFlowSlots = this.outputFlowSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n}","import { INodeItem, NodeItem } from \"./NodeItem\";\r\nimport { BaseSchemaTypes } from \"./NodeSchema\";\r\nimport VisualScriptingDB from \"../managers/VisualScriptingDB\";\r\nimport { IdValuePair, ItemSlotPair } from \"./NodeSlot\";\r\n\r\nexport type VariableItem = {\r\n    id: number;\r\n    name: string;\r\n    type: string;\r\n    startValue: any;\r\n    value: any;\r\n}\r\n\r\nexport interface IScriplet {\r\n    id?: number;\r\n    name: string;\r\n    start?: INodeItem;\r\n    items?: Map<number, INodeItem>;\r\n    itemCounter?: number;\r\n    variables?: Map<number, VariableItem>;\r\n    variableCounter?: number;\r\n}\r\n\r\nexport class Scriplet implements IScriplet {\r\n    public id: number;\r\n    public name: string;\r\n    public start: INodeItem;\r\n    public items: Map<number, INodeItem>;\r\n    public itemCounter: number;\r\n    public variables: Map<number, VariableItem>;\r\n    public variableCounter: number;\r\n\r\n    constructor(name: string, id?: number, start?: INodeItem, items?: Map<number, INodeItem>, itemCounter?: number, variables?: Map<number, VariableItem>, variableCounter?: number) {\r\n        this.id = id ?? 0;\r\n        this.itemCounter = itemCounter ?? 1;\r\n        this.variableCounter = variableCounter ?? 1;\r\n\r\n        this.name = name;\r\n        this.start = start ?? {id: 0, x: 0, y: 0, schemaId: BaseSchemaTypes.Start, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: []};\r\n        if (items == null) {\r\n            this.items = new Map<number, INodeItem>();\r\n            this.items.set(0, this.start);\r\n        } else\r\n            this.items = items;\r\n        \r\n        this.variables = variables ?? new Map<number, VariableItem>();\r\n    }\r\n\r\n    addNode(x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string, variableId?: number) {\r\n        this.addNodes(false, {x, y, schemaId, inputValues, inputSlots, inputFlowSlots, outputSlots, outputFlowSlots, customName, variableId});\r\n    }\r\n\r\n    // TODO: reloadOnFinish is only needed when seeding the db, seems hackish...\r\n    addNodes(reloadOnFinish: boolean, ...nodes: {x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string, variableId?: number}[]) {\r\n        nodes.forEach(node => {\r\n            const key = this.itemCounter++;\r\n            this.items.set(key, {id: key, x: node.x, y: node.y, schemaId: node.schemaId, inputValues: node.inputValues, inputSlots: node.inputSlots, inputFlowSlots: node.inputFlowSlots, outputSlots: node.outputSlots, outputFlowSlots: node.outputFlowSlots, customName: node.customName, variableId: node.variableId});\r\n        });\r\n\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items, \"itemCounter\": this.itemCounter}).then(result => {\r\n            if (result && reloadOnFinish)\r\n                window.location.reload();\r\n        });\r\n    }\r\n\r\n    getStart(): NodeItem {\r\n        if (!(this.start as NodeItem).schema) {\r\n            const newNode = new NodeItem(this.start.id, this.start.x, this.start.y, this.start.schemaId, this.start.inputValues, this.start.inputSlots, this.start.inputFlowSlots, this.start.outputSlots, this.start.outputFlowSlots, this.start.customName, this.start.variableId);\r\n            this.start = newNode;\r\n            return newNode;\r\n        }\r\n        return this.start as NodeItem;\r\n    }\r\n\r\n    getNode(itemId: number): NodeItem | undefined {\r\n        const result = this.items.get(itemId);\r\n        if (!result)\r\n            return;\r\n        \r\n        return this.convertToNodeItem(result);\r\n    }\r\n\r\n    getNodes(): NodeItem[] {\r\n        const result: NodeItem[] = [];\r\n        this.items.forEach(node => {\r\n            result.push(this.convertToNodeItem(node));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    convertToNodeItem(node: INodeItem): NodeItem {\r\n        if (!(node as NodeItem).schema) {\r\n            const newNode = new NodeItem(node.id, node.x, node.y, node.schemaId, node.inputValues, node.inputSlots, node.inputFlowSlots, node.outputSlots, node.outputFlowSlots, node.customName, node.variableId);\r\n            this.items.set(node.id, newNode);\r\n            return newNode;\r\n        }\r\n\r\n        return node as NodeItem;\r\n    }\r\n\r\n    updateNodes() {\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items});\r\n    }\r\n\r\n    deleteNode(itemId: number): boolean {\r\n        return this.deleteNodes(itemId);\r\n    }\r\n\r\n    deleteNodes(...itemIds: number[]): boolean {\r\n        let result = true;\r\n        itemIds.forEach(itemId => {\r\n            if(!this.items.delete(itemId))\r\n                result = false;\r\n        });\r\n\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items});\r\n        return result;\r\n    }\r\n\r\n    addVariable(name: string, type: string, startValue: any, value: any) {\r\n        this.addVariables({name, type, startValue, value});\r\n    }\r\n\r\n    addVariables(...variables: {name: string, type: string, startValue: any, value: any}[]) {\r\n        variables.forEach(variable => {\r\n            const key = this.variableCounter++;\r\n            this.variables.set(key, {id: key, name: variable.name, type: variable.type, startValue: variable.startValue, value: variable.value});\r\n        });\r\n\r\n        VisualScriptingDB.updateScriplet(this.id, {\"variables\": this.variables, \"variableCounter\": this.variableCounter});\r\n    }\r\n\r\n    getVariable(id: number): VariableItem | undefined {\r\n        return this.variables.get(id);\r\n    }\r\n\r\n    getVariables() {\r\n        return [...this.variables.values()];\r\n    }\r\n\r\n    // TODO: Be able to set a default value for the variable, which should also be serialized to db\r\n    setVariable(variable: VariableItem) {\r\n        this.variables.set(variable.id, variable);\r\n    }\r\n\r\n    resetVariables() {\r\n        this.variables.forEach(variable => {\r\n            variable.value = undefined;\r\n        });\r\n    }\r\n}","import Dexie from 'dexie';\r\nimport { INodeItem } from '../models/NodeItem';\r\nimport { BaseSchemaTypes } from '../models/NodeSchema';\r\nimport { ItemSlotPair } from '../models/NodeSlot';\r\nimport { IScriplet, Scriplet, VariableItem } from '../models/Scriplet';\r\n\r\nclass VisualScriptingDB extends Dexie {\r\n    public scriplets: Dexie.Table<IScriplet, number>;\r\n\r\n    constructor() {\r\n        super(\"VisualScriptingDB\");\r\n\r\n        this.version(1).stores({\r\n            scriplets: \"++id, name\"\r\n        });\r\n        this.open().catch(error => {\r\n            console.error(`Opening the db '${this.name}' failed: ${error}`);\r\n        });\r\n\r\n        this.scriplets = this.table(\"scriplets\");\r\n        this.scriplets.mapToClass(Scriplet);\r\n\r\n        this.seedData();\r\n    }\r\n\r\n    seedData() {\r\n        this.scriplets.toArray().then(scriplets => {\r\n            if (scriplets.length <= 0) {\r\n                const start: INodeItem = {id: 0, x: 0, y: 0, schemaId: BaseSchemaTypes.Start, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 4, slotId: 0}], customName: undefined, variableId: undefined};\r\n                this.addScriplet(\"Check If Prime\", start).then(scriplet => {\r\n                    if (!scriplet) {\r\n                        console.error(\"Something went wrong when creating a scriplet. Check if scriplet name is not empty.\");\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                    scriplet.addNodes(true,\r\n                        {x: -530, y: 240, schemaId: BaseSchemaTypes.InputNumber, inputValues: [{id: 0, value: 97}], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 2, slotId: 0}, {id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Number To Check\"},\r\n                        {x: -290, y: 118, schemaId: BaseSchemaTypes.DivideNumbers, inputValues: [{id: 1, value: 2}], inputSlots: [{id: 0, itemId: 1, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Half Number\"},\r\n                        {x: -32, y: 118, schemaId: BaseSchemaTypes.AddNumbers, inputValues: [{id: 1, value: 1}], inputSlots: [{id: 0, itemId: 2, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 4, slotId: 3}]]]), outputFlowSlots: [], customName: \"Plus One\"},\r\n                        {x: 225, y: 0, schemaId: BaseSchemaTypes.ForLoopBreak, inputValues: [{id: 2, value: 2}], inputSlots: [{id: 3, itemId: 3, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 0, slotId: 0}, {id: 1, itemId: 8, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>([[2, [{id: 2, itemId: 5, slotId: 1}]]]), outputFlowSlots: [{id: 0, itemId: 7, slotId: 0}, {id: 1, itemId: 9, slotId: 0}]},\r\n                        {x: 473, y: 240, schemaId: BaseSchemaTypes.ModuloNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 1, slotId: 0}, {id: 1, itemId: 4, slotId: 2}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 6, slotId: 0}]]]), outputFlowSlots: []},\r\n                        {x: 743, y: 132, schemaId: BaseSchemaTypes.EqualNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 5, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 7, slotId: 1}]]]), outputFlowSlots: [], customName: \"Equals Zero\"},\r\n                        {x: 986, y: -18, schemaId: BaseSchemaTypes.IfElse, inputValues: [], inputSlots: [{id: 1, itemId: 6, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 4, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 8, slotId: 0}], customName: \"Check If Prime\"},\r\n                        {x: 1250, y: 100, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [{id: 1, value: false}], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 7, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], customName: \"Is Not Prime\"},\r\n                        {x: 864, y: 278, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [], customName: \"Is Prime\"}\r\n                    );\r\n                    */\r\n\r\n                    scriplet.addVariables({name: \"Is Prime\", type: \"Boolean\", startValue: true, value: undefined});\r\n                   \r\n                    scriplet.addNodes(true,\r\n                        {x: -530, y: 240, schemaId: BaseSchemaTypes.InputNumber, inputValues: [{id: 0, value: 97}], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 2, slotId: 0}, {id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Number To Check\"},\r\n                        {x: -290, y: 118, schemaId: BaseSchemaTypes.DivideNumbers, inputValues: [{id: 1, value: 2}], inputSlots: [{id: 0, itemId: 1, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Half Number\"},\r\n                        {x: -32, y: 118, schemaId: BaseSchemaTypes.AddNumbers, inputValues: [{id: 1, value: 1}], inputSlots: [{id: 0, itemId: 2, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 4, slotId: 3}]]]), outputFlowSlots: [], customName: \"Plus One\"},\r\n                        {x: 225, y: 0, schemaId: BaseSchemaTypes.ForLoopBreak, inputValues: [{id: 2, value: 2}], inputSlots: [{id: 3, itemId: 3, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 0, slotId: 0}, {id: 1, itemId: 8, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>([[2, [{id: 2, itemId: 5, slotId: 1}]]]), outputFlowSlots: [{id: 0, itemId: 7, slotId: 0}, {id: 1, itemId: 9, slotId: 0}]},\r\n                        {x: 473, y: 240, schemaId: BaseSchemaTypes.ModuloNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 1, slotId: 0}, {id: 1, itemId: 4, slotId: 2}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 6, slotId: 0}]]]), outputFlowSlots: []},\r\n                        {x: 743, y: 132, schemaId: BaseSchemaTypes.EqualNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 5, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 7, slotId: 1}]]]), outputFlowSlots: [], customName: \"Equals Zero\"},\r\n                        {x: 986, y: -18, schemaId: BaseSchemaTypes.IfElse, inputValues: [], inputSlots: [{id: 1, itemId: 6, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 4, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 8, slotId: 0}], customName: \"Check If Prime\"},\r\n                        {x: 1250, y: 100, schemaId: BaseSchemaTypes.SetBoolean, inputValues: [{id: 1, value: false}], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 7, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], customName: \"Set Is Prime\", variableId: 1},\r\n                        {x: 864, y: 278, schemaId: BaseSchemaTypes.IfElse, inputValues: [], inputSlots: [{id: 1, itemId: 12, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 10, slotId: 0}, {id: 1, itemId: 11, slotId: 0}], customName: \"If IsPrime is True\"},\r\n                        {x: 1164, y: 278, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 9, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [], customName: \"Is Definitely Prime\"},\r\n                        {x: 1164, y: 420, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [{id: 1, value: false}], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 9, slotId: 1}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [], customName: \"Is Definitely Not Prime\"},\r\n                        {x: 564, y: 400, schemaId: BaseSchemaTypes.GetBoolean, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 9, slotId: 1}]]]), outputFlowSlots: [], customName: \"Get Is Prime\", variableId: 1}\r\n                    );\r\n                });\r\n\r\n                this.addScriplet(\"Empty Scriplet\").then(scriplet => {\r\n                    if (!scriplet) {\r\n                        console.error(\"Something went wrong when creating a scriplet. Check if scriplet name is not empty.\");\r\n                        return;\r\n                    }\r\n\r\n                    scriplet.addVariables({name: \"Test Variable\", type: \"Number\", startValue: 16, value: undefined});\r\n\r\n                    scriplet.addNodes(true, \r\n                        {x: 0, y: 100, schemaId: BaseSchemaTypes.GetNumber, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map(), outputFlowSlots: [], customName: \"Test Name\", variableId: 1},\r\n                        {x: 0, y: 200, schemaId: BaseSchemaTypes.SetNumber, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map(), outputFlowSlots: [], customName: \"Test Name 2\", variableId: 1}\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    async getScriplet(id: number): Promise<Scriplet | undefined> {\r\n        const scriplet = await this.scriplets.get(id);\r\n        if (!scriplet)\r\n            return;\r\n        return new Scriplet(scriplet.name, scriplet.id, scriplet.start, scriplet.items, scriplet.itemCounter, scriplet.variables, scriplet.variableCounter);\r\n    }\r\n\r\n    async getScriplets(): Promise<Scriplet[]> {\r\n        const scriplets = await this.scriplets.toArray();\r\n        const result: Scriplet[] = [];\r\n        scriplets.forEach(scriplet => {\r\n            result.push(new Scriplet(scriplet.name, scriplet.id, scriplet.start, scriplet.items, scriplet.itemCounter, scriplet.variables, scriplet.variableCounter));\r\n        });\r\n        return result;\r\n    }\r\n\r\n    async addScriplet(name: string, start?: INodeItem, items?: Map<number, INodeItem>, itemCounter?: number, variables?: Map<number, VariableItem>, variableCounter?: number): Promise<Scriplet | undefined> {\r\n        if (!name) {\r\n            console.error(\"When creating a scriplet, it cannot have an empty name.\");\r\n            return;\r\n        }\r\n\r\n        const scriplet: IScriplet = {name, start, items, itemCounter, variables, variableCounter}; \r\n        const id = await this.scriplets.add(scriplet);\r\n        return new Scriplet(name, id, start, items, itemCounter, variables, variableCounter);\r\n    }\r\n\r\n    async updateScriplet(id: number, changes: {[keyPath: string]: any}): Promise<boolean> {\r\n        const result = await this.scriplets.update(id, changes);\r\n        if (result === 0) {\r\n            console.error(`The scriplet of id '${id}' could not be found in the database; nothing was updated.`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    async updateEntireScriplet(scriplet: Scriplet): Promise<boolean> {\r\n        const result = await this.scriplets\r\n                                .where(\":id\")\r\n                                .equals(scriplet.id)\r\n                                .modify((value, ref) => ref.value = scriplet);\r\n        \r\n        if (result === 0) {\r\n            console.error(`The scriplet of id '${scriplet.id}' could not be found in the database; nothing was updated.`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    async deleteScriplet(id: number) {\r\n        await this.scriplets.delete(id);\r\n    }\r\n}\r\n\r\nexport default new VisualScriptingDB();","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Scriplet } from '../models/Scriplet';\r\n\r\nexport type ScripletNavItemProps = {\r\n    scriplet: Scriplet;\r\n    closeNavMenu: () => void;\r\n    onScripletDelete: (scripletId: number) => void;\r\n}\r\n\r\nexport type ScripletNavItemState = {\r\n    isHovered: boolean;\r\n}\r\n\r\nexport default class ScripletNavItem extends React.Component<ScripletNavItemProps, ScripletNavItemState> {\r\n    constructor(props: ScripletNavItemProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isHovered: false,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { scriplet, closeNavMenu, onScripletDelete } = this.props;\r\n        const { isHovered } = this.state;\r\n\r\n        return (\r\n            <div className=\"flex flex-row mb-1 px-4 py-2 rounded-md hover:bg-gray-900\"\r\n                    onMouseOver={() => {\r\n                        this.setState({isHovered: true});\r\n                    }}\r\n                    onMouseOut={() => {\r\n                        this.setState({isHovered: false});\r\n                    }}>\r\n                <Link onClick={closeNavMenu} \r\n                        to={\"/scriplet/\" + scriplet.id} \r\n                        className=\"w-full flex items-center text-gray-100\">\r\n                    <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                    {scriplet.name}\r\n                </Link>\r\n                <button className={`${isHovered ? \"\" : \"hidden\"} ml-2 px-2 rounded-sm bg-red-500 text-gray-100`}\r\n                        onClick={() => onScripletDelete(scriplet.id)}>\r\n                    <FontAwesomeIcon icon=\"trash\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nexport type AddItemProps = {\r\n    buttonName: string;\r\n    onClick: () => void;\r\n    onSubmitClick: (itemName: string) => void;\r\n    onCancelClick: () => void;\r\n}\r\n\r\nexport type AddItemState = {\r\n    itemName: string;\r\n    isAddingItem: boolean;\r\n}\r\n\r\nexport default class AddItem extends React.Component<AddItemProps, AddItemState> {\r\n    private itemNameInput: React.RefObject<HTMLInputElement>;\r\n\r\n    static defaultProps: AddItemProps = {\r\n        buttonName: \"Add\",\r\n        onClick: () => {},\r\n        onSubmitClick: () => {},\r\n        onCancelClick: () => {}\r\n    }\r\n\r\n    constructor(props: AddItemProps) {\r\n        super(props);\r\n\r\n        this.itemNameInput = React.createRef<HTMLInputElement>();\r\n\r\n        this.state = {\r\n            itemName: \"\",\r\n            isAddingItem: false\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { buttonName, onClick, onSubmitClick, onCancelClick } = this.props;\r\n        const { isAddingItem, itemName } = this.state;\r\n\r\n        return(\r\n            <div className=\"w-full mb-1 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\">\r\n                <div className={`${isAddingItem ? \"hidden\" : \"\"} px-4 py-2`}\r\n                        onClick={() => {\r\n                            onClick();\r\n                            this.setState({isAddingItem: true});\r\n                        }}>\r\n                    <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" \r\n                                    icon=\"plus\" />\r\n                    <span className=\"font-medium\">{buttonName}</span>\r\n                </div>\r\n                <div className={`${isAddingItem ? \"flex\" : \"hidden\"} flex-row px-4 py-2`}>\r\n                    <input ref={this.itemNameInput}\r\n                            className=\"w-full px-2 text-gray-900\"\r\n                            type=\"text\"\r\n                            value={itemName}\r\n                            onChange={event => {\r\n                                this.setState({itemName: event.target.value});\r\n                            }} />\r\n                    <button className=\"ml-2 px-2 rounded-sm bg-red-500 text-gray-100\"\r\n                            onClick={() => {\r\n                                onCancelClick();\r\n                                this.setState({isAddingItem: false, itemName: \"\"});\r\n                            }}>\r\n                        <FontAwesomeIcon icon=\"times\" />\r\n                    </button>\r\n                    <button className=\"ml-2 px-2 rounded-sm text-xs bg-green-500 text-gray-100\"\r\n                            onClick={() => { \r\n                                onSubmitClick(itemName);\r\n                                this.setState({isAddingItem: false, itemName: \"\"});\r\n                            }}>\r\n                        <FontAwesomeIcon icon=\"check\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport VisualScriptingDB from '../managers/VisualScriptingDB';\r\nimport { Scriplet } from '../models/Scriplet';\r\nimport Modal from './Modal';\r\nimport ScripletNavItem from './ScripletNavItem';\r\nimport AddItem from './AddItem';\r\n\r\nexport type SidebarProps = {\r\n    \r\n}\r\n\r\nexport type SidebarState = {\r\n    scriplets: Scriplet[];\r\n    isDirtyDB: boolean;\r\n    isNavMenuOpen: boolean;\r\n    isSidebarOpen: boolean;\r\n    openProjectModal: () => void;\r\n}\r\n\r\nexport default class SidebarNav extends React.Component<SidebarProps, SidebarState> {\r\n    private scripletNameInput: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: SidebarProps) {\r\n        super(props);\r\n\r\n        this.scripletNameInput = React.createRef<HTMLInputElement>();\r\n\r\n        this.state = {\r\n            scriplets: [],\r\n            isDirtyDB: false,\r\n            isNavMenuOpen: false,\r\n            isSidebarOpen: true,\r\n            openProjectModal: () => {}\r\n        };\r\n\r\n        this.openNavMenu = this.openNavMenu.bind(this);\r\n        this.closeNavMenu = this.closeNavMenu.bind(this);\r\n        this.toggleNavMenu = this.toggleNavMenu.bind(this);\r\n        this.openSidebar = this.openSidebar.bind(this);\r\n        this.closeSidebar = this.closeSidebar.bind(this);\r\n        this.toggleSidebar = this.toggleSidebar.bind(this);\r\n        this.onScripletCreate = this.onScripletCreate.bind(this);\r\n        this.onScripletDelete = this.onScripletDelete.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        VisualScriptingDB.getScriplets().then(scriplets => {\r\n            this.setState({scriplets: scriplets});\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isDirtyDB) {\r\n            VisualScriptingDB.getScriplets().then(scriplets => {\r\n                this.setState({scriplets: scriplets, isDirtyDB: false});\r\n            });\r\n        }\r\n\r\n        const input = this.scripletNameInput.current;\r\n        if (!input)\r\n            return;\r\n\r\n        if (input.classList.contains(\"hidden\"))\r\n            return;\r\n\r\n        input.focus();\r\n    }\r\n\r\n    openNavMenu() {\r\n        this.setState({isNavMenuOpen: true});\r\n    }\r\n\r\n    closeNavMenu() {\r\n        this.setState({isNavMenuOpen: false});\r\n    }\r\n\r\n    toggleNavMenu() {\r\n        if (this.state.isNavMenuOpen)\r\n            this.closeNavMenu();\r\n        else\r\n            this.openNavMenu();\r\n    }\r\n\r\n    openSidebar() {\r\n        this.setState({isSidebarOpen: true});\r\n    }\r\n\r\n    closeSidebar() {\r\n        this.setState({isSidebarOpen: false});\r\n    }\r\n\r\n    toggleSidebar() {\r\n        if (this.state.isSidebarOpen)\r\n            this.closeSidebar();\r\n        else\r\n            this.openSidebar();\r\n    }\r\n\r\n    onScripletCreate(itemName: string) {\r\n        VisualScriptingDB.addScriplet(itemName).then(scriplet => {\r\n            if (scriplet)\r\n                this.setState({isDirtyDB: true});\r\n        });\r\n    }\r\n\r\n    onScripletDelete(scripletId: number) {\r\n        VisualScriptingDB.deleteScriplet(scripletId).then(() => {\r\n            this.setState({isDirtyDB: true});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { scriplets, isNavMenuOpen, isSidebarOpen, openProjectModal } = this.state;\r\n        return (\r\n            <nav className=\"nav\">\r\n                {/* \r\n                * Plan is to have a top navigation for md and below\r\n                * screen sizes, but have sidebar for lg and above\r\n                * \r\n                * Ignore animations for now\r\n                */}\r\n\r\n                { /* Top navbar */ }\r\n                <div className=\"topbar\">\r\n                    <div className=\"lg:hidden flex items-center justify-between p-4 bg-gray-800\">\r\n                        { /* Logo */ }\r\n                        <div className=\"\">\r\n                            <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                Visual Scripting\r\n                            </Link>\r\n                        </div>\r\n\r\n                        { /* Hamburger for sidebar items */ }\r\n                        <div className=\"block\">\r\n                            <button className=\"flex items-center py-2 px-3 text-indigo-500 rounded border border-indigo-500 hover:bg-indigo-300\"\r\n                                    onClick={this.toggleNavMenu} >\r\n                                <FontAwesomeIcon icon=\"bars\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    { /* Nav Items */ }\r\n                    <div className={`${isNavMenuOpen ? '' : 'hidden'} lg:hidden relative z-20`}>\r\n                        <div className=\"absolute w-full px-4 pb-4 bg-gray-800\">\r\n                            {\r\n                                scriplets.map((scriplet, i) => (\r\n                                    <Link key={i} \r\n                                            onClick={this.closeNavMenu} \r\n                                            to={\"/scriplet/\" + scriplet.id} \r\n                                            className=\"block mb-1 px-4 py-2 rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100\">\r\n                                        <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                                        {scriplet.name}\r\n                                    </Link>\r\n                                ))\r\n                            }\r\n                            <AddItem buttonName=\"Add Scriplet\"\r\n                                        onSubmitClick={this.onScripletCreate} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                { /* Sidebar */ }\r\n                <div>\r\n                    <div className={`${isSidebarOpen ? \"sidebar shadow\" : \"hidden\"}`}>\r\n                        <div className=\"flex-grow h-screen bg-gray-800 relative\">\r\n                            { /* Logo */ }\r\n                            <div className=\"p-4 h-16\">\r\n                                <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                    <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                    Visual Scripting\r\n                                </Link>\r\n                            </div>\r\n\r\n                            { /* Sidebar Items */ }\r\n                            <div className=\"p-2 fixed top-16 bottom-0 my-auto lg:w-64\">\r\n                                { /* TODO: Place the dashboard item here */ }\r\n                                <Scrollbar noScrollX>\r\n                                    {\r\n                                        scriplets.map((scriplet, i) => (\r\n                                            <ScripletNavItem key={`scriplet-${i}`}\r\n                                                                scriplet={scriplet}\r\n                                                                closeNavMenu={this.closeNavMenu}\r\n                                                                onScripletDelete={this.onScripletDelete} />\r\n                                        ))\r\n                                    }\r\n                                    <AddItem buttonName=\"Add Scriplet\"\r\n                                                onSubmitClick={this.onScripletCreate} />\r\n                                </Scrollbar>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={`${isSidebarOpen ? \"hidden\" : \"collapsed-sidebar shadow\"}`}>\r\n                        <div className=\"flex-grow h-screen bg-gray-800 relative\">\r\n                            { /* Logo */ }\r\n                            <div className=\"p-4 h-16 text-center\">\r\n                                <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                    <FontAwesomeIcon className=\"text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                </Link>\r\n                            </div>\r\n\r\n                            { /* Sidebar Items */ }\r\n                            <div className=\"sidebar-items p-2 fixed top-16 bottom-0 my-auto\">\r\n                                { /* TODO: Place the dashboard item here */ }\r\n                                <Scrollbar noScrollX>\r\n                                    {\r\n                                        scriplets.map((scriplet, i) => (\r\n                                            <Link key={i} \r\n                                                    onClick={this.closeNavMenu} \r\n                                                    to={\"/scriplet/\" + scriplet.id} \r\n                                                    className=\"block border-gray-700 border-solid border hover:border-opacity-0 mb-1 py-2 text-center rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100 font-bold\">\r\n                                                {scriplet.name[0]}\r\n                                            </Link>\r\n                                        ))\r\n                                    }\r\n                                    <div className=\"flex mb-1 py-2 justify-center rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                            onClick={() => {\r\n                                                console.log(\"test\");\r\n                                                openProjectModal();\r\n                                            }}>\r\n                                        <div className=\"inline-block\">\r\n                                            <FontAwesomeIcon className=\"text-lg text-gray-600\" \r\n                                                            icon=\"plus\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </Scrollbar>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <button className={`${isSidebarOpen ? \"w-64 ml-8 pl-56\" : \"w-16 ml-8 pl-8\"} sidebar-toggle items-center rounded-full bg-gray-700`}\r\n                            onClick={this.toggleSidebar}>\r\n                        <div className=\"inline-block pl-2\">\r\n                            <FontAwesomeIcon icon=\"chevron-left\"\r\n                                                className={`${isSidebarOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                            <FontAwesomeIcon icon=\"chevron-right\"\r\n                                                className={`${isSidebarOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Modals here */}\r\n                {/*\r\n                <Modal title=\"Create New Scriplet\"\r\n                        openModal={callable => {\r\n                            if (openProjectModal.toString() === (() => {}).toString())\r\n                                this.setState({openProjectModal: callable});\r\n                        }}>\r\n                    {(closeModal) => (\r\n                        <form className=\"\">\r\n                            <label htmlFor=\"\">\r\n                                Title\r\n                                <input type=\"text\" name=\"title\" />\r\n                            </label>\r\n                        </form>\r\n                    )}\r\n                </Modal>\r\n                */}\r\n            </nav>\r\n        );\r\n    }\r\n}","import { KonvaEventObject } from \"konva/types/Node\";\r\n\r\nexport class KonvaUtils {\r\n    public static setCursor(event: KonvaEventObject<Event>, cursorType: string) {\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        stage.container().style.cursor = cursorType;\r\n    }\r\n}","import React from 'react';\r\nimport { Label, Tag, Text } from 'react-konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\n\r\nexport class KonvaForm {\r\n    public static cancel() {\r\n        Input.cancelInput();\r\n        Dropdown.cancelDropdown();\r\n    }\r\n} \r\n\r\nexport type InputModel = {\r\n    value: string;\r\n    type: string;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type OutputModel = {\r\n    values: string[];\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type InputProps = {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fontSize: number;\r\n    fontStyle: string;\r\n    padding: number;\r\n    textColor: string;\r\n    bgColor: string;\r\n    hoverColor: string;\r\n    borderRadius: number;\r\n    zIndex: number;\r\n    value: string;\r\n    type: string;\r\n    isEditable: boolean;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type InputState = {\r\n    value: string;\r\n}\r\n\r\nexport class Input extends React.Component<InputProps, InputState> {\r\n    private static inputElement: HTMLInputElement;\r\n    \r\n    static defaultProps: InputProps = {\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 20,\r\n        fontSize: 12,\r\n        fontStyle: \"normal\",\r\n        padding: 0,\r\n        textColor: \"#000000\",\r\n        bgColor: \"#ffffff\",\r\n        hoverColor: \"#cccccc\",\r\n        borderRadius: 0,\r\n        zIndex: 0,\r\n        value: \"\",\r\n        type: \"text\",\r\n        isEditable: true,\r\n        onChange: () => { return false; }\r\n    }\r\n\r\n    constructor(props: InputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n\r\n        this.showInput = this.showInput.bind(this);\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onHoverExit = this.onHoverExit.bind(this);\r\n    }\r\n\r\n    showInput(event: KonvaEventObject<Event>) {\r\n        Input.cancelInput();\r\n\r\n        const { width, height, fontSize, padding, textColor, hoverColor, borderRadius, zIndex, type, isEditable, onChange } = this.props;\r\n        const value = this.state.value === \"\" ? this.props.value : this.state.value;\r\n\r\n        if (!isEditable)\r\n            return;\r\n\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n        const scale = stage.scaleX();\r\n\r\n        const top = event.target.absolutePosition().y;\r\n        const left = event.target.absolutePosition().x;\r\n\r\n        const input = document.createElement(\"input\");\r\n        document.body.appendChild(input);\r\n\r\n        input.value = value;\r\n        input.type = type;\r\n        input.style.position = \"absolute\";\r\n        input.style.top = `${top}px`;\r\n        input.style.left = `${left}px`;\r\n        input.style.width = `${Math.min(width * scale, window.innerWidth - left)}px`;\r\n        input.style.height = `${height * scale}px`;\r\n        input.style.paddingLeft = `${padding * scale}px`;\r\n        input.style.fontSize = `${fontSize * scale}px`;\r\n        input.style.color = textColor;\r\n        input.style.backgroundColor = hoverColor;\r\n        input.style.borderRadius = `${borderRadius * scale}px`;\r\n        input.style.zIndex = `${zIndex}`;\r\n        input.focus();\r\n        input.onchange = (ev: Event) => {\r\n            const target = ev.target as HTMLInputElement;\r\n\r\n            if (!target) {\r\n                console.error(`Cannot cast target to 'HTMLInputElement'.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            if (!target.value) {\r\n                console.error(`No value typed in while editing the text.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            if (!onChange(target.value)) {\r\n                console.error(`Input value requirements not met.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            onChange(target.value);\r\n            this.setState({value: target.value});\r\n            Input.cancelInput();\r\n        }\r\n\r\n        Input.inputElement = input;\r\n    }\r\n\r\n    public static cancelInput() {\r\n        const input = Input.inputElement;\r\n        if (!input)\r\n            return;\r\n        \r\n        input.onchange = null;\r\n        input.parentNode?.removeChild(input);\r\n    }\r\n\r\n    onHover(event: KonvaEventObject<Event>) {\r\n        if (!this.props.isEditable)\r\n            return;\r\n\r\n        KonvaUtils.setCursor(event, \"text\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.hoverColor);\r\n        layer.draw();\r\n    }\r\n\r\n    onHoverExit(event: KonvaEventObject<Event>) {\r\n        if (!this.props.isEditable)\r\n            return;\r\n            \r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.bgColor);\r\n        layer.draw();\r\n    }\r\n\r\n    render() {\r\n        const { x, y, width, height, fontSize, fontStyle, padding, textColor, bgColor, borderRadius } = this.props;\r\n        const value = this.state.value === \"\" ? this.props.value : this.state.value;\r\n\r\n        return(\r\n            <Label name=\"top-bar-label\"\r\n                x={x}\r\n                y={y}\r\n                onMouseEnter={this.onHover}\r\n                onMouseLeave={this.onHoverExit} \r\n                onClick={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showInput(event);\r\n                }}\r\n                onTap={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showInput(event);\r\n                }}>\r\n                <Tag fill={bgColor}\r\n                        cornerRadius={borderRadius} />\r\n                <Text name=\"top-bar-text\"\r\n                        width={width}\r\n                        height={height}\r\n                        fontStyle={fontStyle}\r\n                        fontSize={fontSize}\r\n                        verticalAlign=\"middle\"\r\n                        padding={padding}\r\n                        fill={textColor}\r\n                        text={value} />\r\n            </Label>\r\n        );\r\n    }\r\n}\r\n\r\nexport type DropdownProps = {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fontSize: number;\r\n    fontStyle: string;\r\n    padding: number;\r\n    textColor: string;\r\n    bgColor: string;\r\n    hoverColor: string;\r\n    borderRadius: number;\r\n    zIndex: number;\r\n    values: string[];\r\n    value: string;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type DropdownState = {\r\n    selectedIndex: number;\r\n}\r\n\r\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\r\n    private static dropdownElement: HTMLSelectElement;\r\n    \r\n    static defaultProps: DropdownProps = {\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 20,\r\n        fontSize: 12,\r\n        fontStyle: \"normal\",\r\n        padding: 0,\r\n        textColor: \"#000000\",\r\n        bgColor: \"#ffffff\",\r\n        hoverColor: \"#cccccc\",\r\n        borderRadius: 0,\r\n        zIndex: 0,\r\n        values: [],\r\n        value: \"\",\r\n        onChange: () => { return false; }\r\n    }\r\n\r\n    constructor(props: DropdownProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedIndex: 0\r\n        };\r\n\r\n        this.showDropdown = this.showDropdown.bind(this);\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onHoverExit = this.onHoverExit.bind(this);\r\n    }\r\n\r\n    showDropdown(event: KonvaEventObject<Event>) {\r\n        Dropdown.cancelDropdown();\r\n\r\n        const { width, height, padding, fontSize, textColor, hoverColor, borderRadius, zIndex, values, onChange } = this.props;\r\n\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n        const scale = stage.scaleX();\r\n\r\n        const top = event.target.absolutePosition().y;\r\n        const left = event.target.absolutePosition().x;\r\n\r\n        const dropdown = document.createElement(\"select\");\r\n        document.body.appendChild(dropdown);\r\n\r\n        // Add classes here\r\n        //dropdown.classList.add(\"block\", \"appearance-none\", \"w-full\", \"bg-white\", \"border\", \"border-gray-400\", \"hover:border-gray-500\", \"px-4\", \"py-2\", \"pr-8\", \"rounded\", \"shadow\", \"leading-tight\", \"focus:outline-none\", \"focus:shadow-outline\");\r\n        values.forEach(value => {\r\n            const option = document.createElement(\"option\");\r\n            option.value = value;\r\n            option.innerText = value;\r\n            dropdown.add(option);\r\n        });\r\n\r\n        dropdown.selectedIndex = this.state.selectedIndex;\r\n        dropdown.style.position = \"absolute\";\r\n        dropdown.style.top = `${top}px`;\r\n        dropdown.style.left = `${left}px`;\r\n        dropdown.style.width = `${Math.min(width * scale, window.innerWidth - left)}px`;\r\n        dropdown.style.height = `${height * scale}px`;\r\n        dropdown.style.paddingLeft = `${padding * scale}px`;\r\n        dropdown.style.fontSize = `${fontSize * scale}px`;\r\n        dropdown.style.color = textColor;\r\n        dropdown.style.backgroundColor = hoverColor;\r\n        dropdown.style.borderRadius = `${borderRadius * scale}px`;\r\n        dropdown.style.zIndex = `${zIndex}`;\r\n        dropdown.focus();\r\n        dropdown.onchange = (ev: Event) => {\r\n            const target = ev.target as HTMLSelectElement;\r\n\r\n            if (!target) {\r\n                console.error(`Cannot cast target to 'HTMLSelectElement'.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            if (!target.value) {\r\n                console.error(`No value selected.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            if (!onChange(target.value)) {\r\n                console.error(`Input value requirements not met.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            onChange(target.value);\r\n            this.setState({selectedIndex: target.selectedIndex});\r\n            Dropdown.cancelDropdown();\r\n        };\r\n\r\n        Dropdown.dropdownElement = dropdown;\r\n    }\r\n\r\n    public static cancelDropdown() {\r\n        const dropdown = Dropdown.dropdownElement;\r\n        if (!dropdown)\r\n            return;\r\n        \r\n        dropdown.onchange = null;\r\n        dropdown.parentNode?.removeChild(dropdown);\r\n    }\r\n\r\n    onHover(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.hoverColor);\r\n        layer.draw();\r\n    }\r\n\r\n    onHoverExit(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.bgColor);\r\n        layer.draw();\r\n    }\r\n\r\n    render() {\r\n        const { x, y, width, height, fontSize, fontStyle, padding, textColor, bgColor, borderRadius, values, value } = this.props;\r\n\r\n        return(\r\n            <Label name=\"top-bar-label\"\r\n                x={x}\r\n                y={y}\r\n                onMouseEnter={this.onHover}\r\n                onMouseLeave={this.onHoverExit} \r\n                onClick={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showDropdown(event);\r\n                }}\r\n                onTap={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showDropdown(event);\r\n                }}>\r\n                <Tag fill={bgColor}\r\n                        cornerRadius={borderRadius} />\r\n                <Text name=\"top-bar-text\"\r\n                        width={width}\r\n                        height={height}\r\n                        fontStyle={fontStyle}\r\n                        fontSize={fontSize}\r\n                        verticalAlign=\"middle\"\r\n                        padding={padding}\r\n                        fill={textColor}\r\n                        text={value && values.includes(value) ? value : values[this.state.selectedIndex]} />\r\n            </Label>\r\n        );\r\n    }\r\n}","import Colors from \"../utils/Colors\";\r\nimport { Number, Boolean, Flow, Variable } from \"../utils/Types\";\r\n\r\nexport enum HandleType {\r\n    Circle,\r\n    Arrow\r\n}\r\n\r\nexport enum InputType {\r\n    None,\r\n    Input,\r\n    Dropdown\r\n}\r\n\r\nexport type SlotConfig = {\r\n    // handle config\r\n    handleType: HandleType;\r\n    handleBorderColor: string;\r\n    handleFillColor: string;\r\n\r\n    inputType: InputType;\r\n    defaultInputValue: string | string[];\r\n    initialValue: any;\r\n\r\n    fromString: (value: string) => any;\r\n    toString: (value: any) => string;\r\n}\r\n\r\nclass SlotConfigManager {\r\n    private configs: Map<string, SlotConfig>;\r\n\r\n    constructor() {\r\n        this.configs = new Map<string, SlotConfig>();\r\n\r\n        const numberConfig: SlotConfig = {\r\n            handleType: HandleType.Circle,\r\n            handleBorderColor: Colors.Green[700],\r\n            handleFillColor: Colors.Green[600],\r\n            inputType: InputType.Input,\r\n            defaultInputValue: \"\",\r\n            initialValue: Number.defaultValue,\r\n            fromString: Number.convertFromString,\r\n            toString: Number.convertToString\r\n        };\r\n\r\n        const booleanConfig: SlotConfig = {\r\n            handleType: HandleType.Circle,\r\n            handleBorderColor: Colors.Purple[600],\r\n            handleFillColor: Colors.Purple[500],\r\n            inputType: InputType.Dropdown,\r\n            defaultInputValue: [\"true\", \"false\"],\r\n            initialValue: Boolean.defaultValue,\r\n            fromString: Boolean.convertFromString,\r\n            toString: Boolean.convertToString\r\n        };\r\n\r\n        const flowConfig: SlotConfig = {\r\n            handleType: HandleType.Arrow,\r\n            handleBorderColor: Colors.Gray[500],\r\n            handleFillColor: Colors.Gray[100],\r\n            inputType: InputType.None,\r\n            defaultInputValue: \"\",\r\n            initialValue: Flow.defaultValue,\r\n            fromString: Flow.convertFromString,\r\n            toString: Flow.convertToString\r\n        }\r\n\r\n        const variableConfig: SlotConfig = {\r\n            handleType: HandleType.Circle,\r\n            handleBorderColor: Colors.Gray[100],\r\n            handleFillColor: Colors.Gray[100],\r\n            inputType: InputType.None,\r\n            defaultInputValue: \"\",\r\n            initialValue: Variable.defaultValue,\r\n            fromString: () => {},\r\n            toString: () => \"\"\r\n        }\r\n\r\n        this.configs.set(Number.className, numberConfig);\r\n        this.configs.set(Boolean.className, booleanConfig);\r\n        this.configs.set(Flow.className, flowConfig);\r\n        this.configs.set(Variable.className, variableConfig);\r\n    }\r\n\r\n    getConfig(type: string) {\r\n        return this.configs.get(type);\r\n    }\r\n}\r\n\r\nexport default new SlotConfigManager();\r\n\r\n","import React from 'react';\r\nimport { Circle, Path } from 'react-konva';\r\nimport { HandleType } from '../managers/SlotConfigManager';\r\nimport { KonvaForm } from './KonvaForm';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport Konva from 'konva';\r\nimport Colors from '../utils/Colors';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\n\r\nexport type NodeHandleProps = {\r\n    fill: string;\r\n    stroke: string;\r\n    type: HandleType;\r\n    isInput: boolean;\r\n    isFlow: boolean;\r\n    itemId: number;\r\n    slotId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type NodeHandleState = {\r\n    startPosition: Vector2d;\r\n}\r\n\r\nexport class NodeHandle extends React.Component<NodeHandleProps, NodeHandleState> {\r\n    private static path: Konva.Path | null = null;\r\n\r\n    constructor(props: NodeHandleProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            startPosition: {x: 0, y: 0},\r\n        }\r\n        \r\n        this.onDragStart = this.onDragStart.bind(this);\r\n        this.onDragMove = this.onDragMove.bind(this);\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n        this.onMouseEnter = this.onMouseEnter.bind(this);\r\n        this.onMouseExit = this.onMouseExit.bind(this);\r\n    }\r\n\r\n    onDragStart(event: KonvaEventObject<DragEvent>) {\r\n        const layer: Konva.Layer | null = event.target.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        KonvaForm.cancel();\r\n        \r\n        const thisCircle = event.target;\r\n        const parent = thisCircle.parent;\r\n        if (!parent) {\r\n            console.error(`This Konva node should be under a container node.`);\r\n            return;\r\n        }\r\n\r\n        const startPos = thisCircle.getPosition();\r\n        const endPos = startPos;\r\n        const pathData = `M${startPos.x} ${startPos.y - 2} L${endPos.x} ${endPos.y - 2}`;\r\n        const path = new Konva.Path({\r\n            data: pathData,\r\n            stroke: Colors.Gray[800],\r\n            strokeWidth: 4\r\n        });\r\n\r\n        parent.add(path);\r\n        NodeHandle.path = path;\r\n        this.setState({startPosition: startPos});\r\n    }\r\n\r\n    onDragMove(event: KonvaEventObject<DragEvent>) {\r\n        const { isInput } = this.props;\r\n        const { startPosition } = this.state;\r\n\r\n        const layer: Konva.Layer | null = event.target.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const thisCircle = event.target;\r\n        const position = thisCircle.getPosition();\r\n        let startPos, endPos;\r\n\r\n        if (isInput) {\r\n            // The isInput specifies if its either the input handle or the output\r\n            // handle that's being dragged.\r\n            // Gotta flip the start and end positions so the path forms an S shape\r\n            // instead of a mirrored S shape when dragged.\r\n            startPos = position;\r\n            endPos = startPosition;\r\n        } else {\r\n            startPos = startPosition;\r\n            endPos = position;\r\n        }\r\n\r\n        const midpointPos: Vector2d = {\r\n            x: ((endPos.x - startPos.x) / 2) + (startPos.x),\r\n            y: ((endPos.y - startPos.y) / 2) + (startPos.y)\r\n        }\r\n        const pathData = `M${startPos.x} ${startPos.y - 2} Q${startPos.x + 30} ${startPos.y - 2} ${midpointPos.x} ${midpointPos.y - 2} Q${endPos.x - 30} ${endPos.y - 2} ${endPos.x} ${endPos.y - 2}`;\r\n        const path = NodeHandle.path;\r\n        if (!path) {\r\n            console.error(`The Konva path could not be found.`);\r\n            return;\r\n        }\r\n\r\n        path.data(pathData);\r\n    }\r\n\r\n    onDragEnd(event: KonvaEventObject<DragEvent>) {\r\n        const { isInput, isFlow, itemId, onConnect } = this.props;\r\n        const { startPosition } = this.state;\r\n\r\n        const thisCircle = event.target;\r\n        thisCircle.position(startPosition);\r\n\r\n        const path = NodeHandle.path;\r\n        if (path != null) {\r\n            path.destroy();\r\n            NodeHandle.path = null;\r\n        }\r\n\r\n        const stage = thisCircle.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        stage.draw();\r\n\r\n        const pointerPos = stage.getPointerPosition();\r\n        if (!pointerPos) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const screenX = Math.floor(pointerPos.x);\r\n        const screenY = Math.floor(pointerPos.y);\r\n\r\n        const elements = stage.getAllIntersections({x: screenX, y: screenY}) as Konva.Shape[];\r\n        \r\n        if (!elements || elements.length <= 0)\r\n            return;\r\n\r\n        let element: Konva.Shape | undefined;\r\n        let otherItemId: number = 0;\r\n        let otherSlotId: number = 0;\r\n\r\n        let i;\r\n        for (i = 0; i < elements.length; i++) {\r\n            const elem = elements[i];\r\n            const type = elem.getAttr(\"data-type\");\r\n            if (!type || (isInput ? type !== \"output\" : type !== \"input\"))\r\n                continue;\r\n            const slotType = elem.getAttr(\"data-slot-type\");\r\n            if (!slotType || (isFlow ? slotType !== \"control\" : slotType !== \"data\"))\r\n                continue;\r\n\r\n            otherItemId = elem.getAttr(\"data-item-id\");\r\n            otherSlotId = elem.getAttr(\"data-slot-id\");\r\n            // NOTE: These ids can be 0 and !id will return true\r\n            // TODO: Make ids to be unique uuids\r\n            if (otherItemId == null || otherSlotId == null) {\r\n                console.error(`No attributes 'data-item-id' or 'data-slot-id' could be found from the element.`);\r\n                continue;\r\n            }\r\n\r\n            if (itemId === otherItemId)\r\n                continue;\r\n\r\n            element = elem;\r\n            break;\r\n        }\r\n\r\n        if (!element)\r\n            return;\r\n\r\n        onConnect(otherItemId, otherSlotId);\r\n    }\r\n\r\n    onMouseEnter(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n    }\r\n\r\n    onMouseExit(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n    }\r\n\r\n    render() {\r\n        const { fill, stroke, type, isInput, isFlow, itemId, slotId } = this.props;\r\n        \r\n        return(\r\n            <>\r\n            {(type === HandleType.Circle &&\r\n                <Circle x={isInput ? 18 : -18}\r\n                    y={18}\r\n                    radius={4}\r\n                    fill={fill}\r\n                    stroke={stroke}\r\n                    strokeWidth={1}\r\n                    scale={{x: 1.5, y: 1.5}}\r\n                    listening={false} />\r\n            ) ||\r\n            (type === HandleType.Arrow &&\r\n                <Path data=\"M6.659,13.549L12.139,8.753C12.356,8.563 12.481,8.288 12.481,8C12.481,7.712 12.356,7.437 12.139,7.247L6.66,2.451C6.011,1.885 5,2.345 5,3.204L5,12.796C5,12.796 5,12.797 5,12.797C5,13.345 5.451,13.797 6,13.797C6.242,13.797 6.477,13.709 6.659,13.549Z\"\r\n                    x={isInput ? 5 : -31}\r\n                    y={6}\r\n                    fill={fill}\r\n                    stroke={stroke}\r\n                    strokeWidth={1}\r\n                    scale={{x: 1.5, y: 1.5}}\r\n                    listening={false} />\r\n            )}\r\n\r\n            <Circle data-type={`${isInput ? \"input\" : \"output\"}`}\r\n                    data-slot-type={`${isFlow ? \"control\" : \"data\"}`}\r\n                    data-item-id={itemId}\r\n                    data-slot-id={slotId}\r\n                    x={isInput ? 18 : -18}\r\n                    y={22}\r\n                    radius={15}\r\n                    fill=\"transparent\"\r\n                    draggable\r\n                    onDragStart={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragStart(event);\r\n                    }}\r\n                    onDragMove={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragMove(event);\r\n                    }}\r\n                    onDragEnd={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragEnd(event);\r\n                    }}\r\n                    onMouseEnter={this.onMouseEnter}\r\n                    onMouseLeave={this.onMouseExit} />\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Group, Text } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport Colors from '../utils/Colors';\r\nimport { Input, Dropdown } from './KonvaForm';\r\nimport SlotConfigManager, { InputType, HandleType } from '../managers/SlotConfigManager';\r\nimport { NodeHandle } from './NodeHandle';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot, ItemSlotPair } from '../models/NodeSlot';\r\nimport ScripletManager from '../managers/ScripletManager';\r\n\r\nexport type InputSlotProps = {\r\n    inputSlot: InputSlot;\r\n    inputConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onInputChange: (value: any) => boolean;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type InputSlotState = {\r\n    labelWidth: number;\r\n    typeWidth: number;\r\n}\r\n\r\nexport class InputSlotDOM extends React.Component<InputSlotProps, InputSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n    private type: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: InputSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n        this.type = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100,\r\n            typeWidth: 100\r\n        };\r\n\r\n        this.onInputChanged = this.onInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        const typeWidth = this.type.current?.width();\r\n        if (!labelWidth || !typeWidth) {\r\n            console.error(`The referenced Konva label or type text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth, typeWidth: typeWidth});\r\n    }\r\n\r\n    onInputChanged(value: string): boolean {\r\n        const { inputSlot, onInputChange } = this.props;\r\n        const config = SlotConfigManager.getConfig(inputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${inputSlot.type}'.`);\r\n            return false;\r\n        }\r\n\r\n        const val = config.fromString(value);\r\n        if (val == null)\r\n            return false;\r\n\r\n        return onInputChange(val);\r\n    }\r\n\r\n    render() {\r\n        const { inputSlot, inputConnection, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth, typeWidth } = this.state;\r\n        const config = SlotConfigManager.getConfig(inputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${inputSlot.type}'.`);\r\n            return null;\r\n        }\r\n\r\n        const item = ScripletManager.currentScriplet?.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={inputSlot.isConnectable ? 36 : 16}\r\n                        y={0}\r\n                        height={20}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        verticalAlign=\"bottom\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputSlot.name} />\r\n                <Text ref={this.type}\r\n                        x={inputSlot.isConnectable ? 36 : 16}\r\n                        y={20}\r\n                        height={20}\r\n                        fontSize={10}\r\n                        verticalAlign=\"top\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputSlot.type} />\r\n                {(!inputConnection &&\r\n                ((config.inputType === InputType.Input &&\r\n                    <Input x={inputSlot.isConnectable ? 44 + Math.max(labelWidth, typeWidth) : 24 + Math.max(labelWidth, typeWidth)}\r\n                            y={12}\r\n                            width={30}\r\n                            height={12}\r\n                            fontSize={10}\r\n                            padding={2}\r\n                            borderRadius={2}\r\n                            textColor={Colors.Gray[100]}\r\n                            bgColor={Colors.Gray[700]}\r\n                            hoverColor={Colors.Gray[600]}\r\n                            value={`${item.getInputValue(inputSlot.id) ?? inputSlot.defaultValue}`}\r\n                            isEditable={inputSlot.isEditable}\r\n                            onChange={this.onInputChanged} />\r\n                ) ||\r\n                (config.inputType === InputType.Dropdown &&\r\n                    <Dropdown x={inputSlot.isConnectable ? 44 + Math.max(labelWidth, typeWidth) : 24 + Math.max(labelWidth, typeWidth)}\r\n                            y={12}\r\n                            width={30}\r\n                            height={12}\r\n                            fontSize={10}\r\n                            padding={2}\r\n                            borderRadius={2}\r\n                            textColor={Colors.Gray[100]}\r\n                            bgColor={Colors.Gray[700]}\r\n                            hoverColor={Colors.Gray[600]}\r\n                            values={config.defaultInputValue as string[]}\r\n                            value={item.getInputValue(inputSlot.id) != null ? `${item.getInputValue(inputSlot.id)}` : `${inputSlot.defaultValue}`}\r\n                            onChange={this.onInputChanged} />\r\n                )))}\r\n                {(inputSlot.isConnectable &&\r\n                    <NodeHandle fill={inputConnection ? config.handleFillColor : \"transparent\"}\r\n                                stroke={config.handleBorderColor}\r\n                                type={config.handleType}\r\n                                isInput={true}\r\n                                isFlow={false}\r\n                                itemId={itemId}\r\n                                slotId={inputSlot.id}\r\n                                onConnect={onConnect} />\r\n                )}\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type OutputSlotProps = {\r\n    outputSlot: OutputSlot;\r\n    outputConnections: ItemSlotPair[];\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n};\r\n\r\nexport type OutputSlotState = {\r\n    labelWidth: number;\r\n    typeWidth: number;\r\n}\r\n\r\nexport class OutputSlotDOM extends React.Component<OutputSlotProps, OutputSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n    private type: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: OutputSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n        this.type = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100,\r\n            typeWidth: 100\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        const typeWidth = this.type.current?.width();\r\n        if (!labelWidth || !typeWidth) {\r\n            console.error(`The referenced Konva label or type text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth, typeWidth: typeWidth});\r\n    }\r\n\r\n    render() {\r\n        const { outputSlot, outputConnections, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth, typeWidth } = this.state;\r\n        const config = SlotConfigManager.getConfig(outputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${outputSlot.type}'.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={0}\r\n                        y={0}\r\n                        offsetX={36 + labelWidth}\r\n                        height={20}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        align=\"right\"\r\n                        verticalAlign=\"bottom\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputSlot.name} />\r\n                <Text ref={this.type}\r\n                        x={0}\r\n                        y={20}\r\n                        offsetX={36 + typeWidth}\r\n                        height={20}\r\n                        fontSize={10}\r\n                        align=\"right\"\r\n                        verticalAlign=\"top\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputSlot.type} />\r\n                <NodeHandle fill={outputConnections.length > 0 ? config.handleFillColor : \"transparent\"}\r\n                            stroke={config.handleBorderColor}\r\n                            type={config.handleType}\r\n                            isInput={false}\r\n                            isFlow={false}\r\n                            itemId={itemId}\r\n                            slotId={outputSlot.id}\r\n                            onConnect={onConnect} />\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type InputFlowSlotProps = {\r\n    inputFlowSlot: InputFlowSlot;\r\n    inputFlowConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type InputFlowSlotState = {\r\n    \r\n}\r\n\r\nexport class InputFlowSlotDOM extends React.Component<InputFlowSlotProps, InputFlowSlotState> {\r\n    render() {\r\n        const { inputFlowSlot, inputFlowConnection, x, y, itemId, onConnect } = this.props;\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text x={inputFlowSlot.isConnectable ? 36 : 16}\r\n                        y={0}\r\n                        height={40}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        verticalAlign=\"middle\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputFlowSlot.name} />\r\n                {(inputFlowSlot.isConnectable && \r\n                    <NodeHandle fill={inputFlowConnection ? Colors.Gray[100] : \"transparent\"}\r\n                                stroke={Colors.Gray[500]}\r\n                                type={HandleType.Arrow}\r\n                                isInput={true}\r\n                                isFlow={true}\r\n                                itemId={itemId}\r\n                                slotId={inputFlowSlot.id}\r\n                                onConnect={onConnect} />\r\n                )}\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type OutputFlowSlotProps = {\r\n    outputFlowSlot: OutputFlowSlot;\r\n    outputFlowConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type OutputFlowSlotState = {\r\n    labelWidth: number;\r\n}\r\n\r\nexport class OutputFlowSlotDOM extends React.Component<OutputFlowSlotProps, OutputFlowSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: OutputFlowSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        if (!labelWidth) {\r\n            console.error(`The referenced Konva label text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth});\r\n    }\r\n    \r\n    render() {\r\n        const { outputFlowSlot, outputFlowConnection, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth } = this.state;\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={0}\r\n                        y={0}\r\n                        offsetX={36 + labelWidth}\r\n                        height={40}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        align=\"right\"\r\n                        verticalAlign=\"middle\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputFlowSlot.name} />\r\n                <NodeHandle fill={outputFlowConnection ? Colors.Gray[100] : \"transparent\"}\r\n                            stroke={Colors.Gray[500]}\r\n                            type={HandleType.Arrow}\r\n                            isInput={false}\r\n                            isFlow={true}\r\n                            itemId={itemId}\r\n                            slotId={outputFlowSlot.id}\r\n                            onConnect={onConnect} />\r\n            </Group>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Rect, Group, Label, Tag, Text } from 'react-konva';\r\nimport { Group as KonvaGroup } from 'konva/types/Group';\r\nimport Colors from '../utils/Colors';\r\nimport NodeConnections from '../managers/NodeConnections';\r\nimport { Input, KonvaForm } from '../components/KonvaForm';\r\nimport { Path } from 'konva/types/shapes/Path';\r\nimport { NodeItem } from '../models/NodeItem';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot } from '../models/NodeSlot';\r\nimport { InputSlotDOM, OutputSlotDOM, InputFlowSlotDOM, OutputFlowSlotDOM } from './NodeSlot';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\nimport '../assets/css/fontawesome.min.css';\r\nimport '../assets/css/solid.min.css';\r\nimport ScripletManager from '../managers/ScripletManager';\r\n\r\nexport type NodeProps = {\r\n    item: NodeItem;\r\n    width: number;\r\n    rowHeight: number;\r\n    topBarHeight: number;\r\n    handleDragNode(index: number, x: number, y: number): any;\r\n    deleteNodeItem(id: number): any;\r\n    updateDOM(): any;\r\n}\r\n\r\nexport type NodeState = {\r\n    draggedHandlePath: Path | null;\r\n    isStateOpen: boolean;\r\n    stateVisual: KonvaGroup | null;\r\n}\r\n\r\nexport default class Node extends React.Component<NodeProps, NodeState> {\r\n    private group: React.RefObject<KonvaGroup>;\r\n    \r\n    constructor(props: NodeProps) {\r\n        super(props);\r\n\r\n        this.group = React.createRef<KonvaGroup>();\r\n\r\n        this.state = {\r\n            draggedHandlePath: null,\r\n            isStateOpen: false,\r\n            stateVisual: null\r\n        }\r\n\r\n        /*\r\n        this.handleHoverEnterEditableText = this.handleHoverEnterEditableText.bind(this);\r\n        this.handleHoverExitEditableText = this.handleHoverExitEditableText.bind(this);\r\n        this.handleHoverEnterToggleState = this.handleHoverEnterToggleState.bind(this);\r\n        this.handleHoverExitToggleState = this.handleHoverExitToggleState.bind(this);\r\n        this.openState = this.openState.bind(this);\r\n        this.closeState = this.closeState.bind(this);\r\n        this.toggleState = this.toggleState.bind(this);\r\n        */\r\n    }\r\n\r\n    componentDidMount() {\r\n        const layer = this.group.current?.getLayer();\r\n        if (layer) {\r\n        }\r\n    }\r\n\r\n    // These commented code below can eventually be used if there are some node schemas\r\n    // in the future that can have some state saved beyond their inputs.\r\n    /* \r\n    handleHoverEnterToggleState(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", Colors.Gray[700]);\r\n        layer.draw();\r\n    }\r\n\r\n    handleHoverExitToggleState(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", Colors.Gray[900]);\r\n        layer.draw();\r\n    }\r\n\r\n    openState() {\r\n        if (this.state.stateVisual) {\r\n            console.error(`This node already has an opened state visual. Close it first then try again.`);\r\n            return;\r\n        }\r\n\r\n        const { item, rowHeight, topBarHeight } = this.props;\r\n\r\n        // Show the custom schema state visual here\r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The node schema could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const state = schema.createNewSchema();\r\n\r\n        const stateVisual = schema.state.onShowStateVisual(this.props);\r\n        if (!stateVisual) {\r\n            console.error(`The Konva group to show the node state could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const thisGroup = this.group.current;\r\n        if (!thisGroup) {\r\n            console.error(`The Konva group for this node could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const layer = thisGroup.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const bgRect = this.group.current?.children[0] as Konva.Rect;\r\n        if (!bgRect) {\r\n            console.error(`The Konva bg rect could not be found.`);\r\n            return;\r\n        }\r\n\r\n        bgRect.cornerRadius([5, 5, 0, 0]);\r\n\r\n        const height = schema.maxLength() * rowHeight + topBarHeight + 10;\r\n        stateVisual.x(0);\r\n        stateVisual.y(height);\r\n        thisGroup.add(stateVisual);\r\n        layer.draw();\r\n\r\n        this.setState({isStateOpen: true, stateVisual: stateVisual});\r\n    }\r\n\r\n    closeState() {\r\n        if (!this.state.stateVisual) {\r\n            console.error(`This node has no state visual to close.`);\r\n            return;\r\n        }\r\n\r\n        const bgRect = this.group.current?.children[0] as Konva.Rect;\r\n        if (!bgRect) {\r\n            console.error(`The Konva bg rect could not be found.`);\r\n            return;\r\n        }\r\n\r\n        bgRect.cornerRadius(5);\r\n\r\n        this.state.stateVisual.destroy();\r\n        this.setState({isStateOpen: false, stateVisual: null});\r\n    }\r\n\r\n    toggleState() {\r\n        if (this.state.isStateOpen)\r\n            this.closeState();\r\n        else\r\n            this.openState();\r\n    }\r\n    */\r\n\r\n\r\n    render() {\r\n        const { item, width, rowHeight, topBarHeight, handleDragNode, deleteNodeItem, updateDOM } = this.props;\r\n        const height = item.schema ? item.schema.maxLength() * rowHeight + topBarHeight : 0;\r\n        \r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema for node item '${item.id}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        const inputSlots: InputSlot[] = schema.inputSlots;\r\n        const outputSlots: OutputSlot[] = schema.outputSlots;\r\n        const inputFlowSlots: InputFlowSlot[] = schema.inputFlowSlots;\r\n        const outputFlowSlots: OutputFlowSlot[] = schema.outputFlowSlots;\r\n\r\n        let inputs: (InputSlot | InputFlowSlot)[] = [];\r\n        inputs = inputs.concat(inputFlowSlots, inputSlots);\r\n\r\n        let outputs: (OutputSlot | OutputFlowSlot)[] = [];\r\n        outputs = outputs.concat(outputFlowSlots, outputSlots);\r\n\r\n        // TODO: These two seem hackish\r\n        const inputTypeGuard = (input: InputSlot | InputFlowSlot): input is InputSlot => {\r\n            if ((input as InputSlot).type)\r\n                return true;\r\n            return false;\r\n        }\r\n        const outputTypeGuard = (output: OutputSlot | OutputFlowSlot): output is OutputSlot => {\r\n            if ((output as OutputSlot).type)\r\n                return true;\r\n            return false;\r\n        }\r\n        return(\r\n            <Group id={`node-${item.id}`}\r\n                    ref={this.group}\r\n                    x={item.x}\r\n                    y={item.y}\r\n                    width={width}\r\n                    height={height}\r\n                    draggable\r\n                    onDragStart={event => {\r\n                        KonvaUtils.setCursor(event, \"move\");\r\n                        KonvaForm.cancel();\r\n                    }}\r\n                    onDragEnd={event => {\r\n                        KonvaUtils.setCursor(event, \"default\");\r\n                        ScripletManager.currentScriplet?.updateNodes();\r\n                    }}\r\n                    onDragMove={event => handleDragNode(item.id, event.target.x(), event.target.y())}>\r\n                <Rect name=\"background\"\r\n                        x={0}\r\n                        y={0}\r\n                        width={width}\r\n                        height={height + 10}\r\n                        fill={Colors.Gray[900]}\r\n                        cornerRadius={5} />\r\n                <Rect name=\"top-bar\"\r\n                        x={0}\r\n                        y={0}\r\n                        width={width}\r\n                        height={topBarHeight}\r\n                        fill={Colors.Gray[900]}\r\n                        cornerRadius={[5, 5, 0, 0]} />\r\n                <Input x={10}\r\n                        y={2.5}\r\n                        width={schema.isDeletable ? width - 40 : width - 20}\r\n                        height={topBarHeight - 5}\r\n                        borderRadius={2}\r\n                        padding={6}\r\n                        textColor={Colors.Gray[100]}\r\n                        bgColor={Colors.Gray[900]}\r\n                        hoverColor={Colors.Gray[800]}\r\n                        value={(!item.customName || item.customName === \"\") ? item.schema?.name ?? \"undefined\" : item.customName}\r\n                        isEditable={schema.isNameEditable}\r\n                        onChange={value => {\r\n                            item.customName = value;\r\n                            ScripletManager.currentScriplet?.updateNodes();\r\n                            \r\n                            return true;\r\n                        }} />\r\n                {(schema.isDeletable && \r\n                    <Label x={width - 20}\r\n                            y={8}\r\n                            onMouseEnter={event => {\r\n                                event.cancelBubble = true;\r\n                                KonvaUtils.setCursor(event, \"pointer\");\r\n                            }}\r\n                            onMouseLeave={event => {\r\n                                event.cancelBubble = true;\r\n                                KonvaUtils.setCursor(event, \"default\");\r\n                            }}\r\n                            onClick={event => {\r\n                                KonvaUtils.setCursor(event, \"default\");\r\n                                KonvaForm.cancel();\r\n                                deleteNodeItem(item.id);\r\n                            }}>\r\n                        <Tag fill={Colors.Red[500]}\r\n                            cornerRadius={15} />\r\n                        <Text width={12}\r\n                                height={12}\r\n                                fontSize={14}\r\n                                fontStyle=\"bold\"\r\n                                align=\"center\"\r\n                                verticalAlign=\"center\"\r\n                                fill={Colors.Gray[900]}\r\n                                text=\"&#215;\" />\r\n                    </Label>\r\n                )}\r\n                <Rect x={0}\r\n                        y={topBarHeight}\r\n                        width={width}\r\n                        height={rowHeight * (item.schema?.maxLength() ?? 1)}\r\n                        fill={Colors.Gray[800]} />\r\n                {Array.from(Array(item.schema?.maxLength() ?? 0)).map((it, i) => {\r\n                const input: InputSlot | undefined = i < inputs.length && inputTypeGuard(inputs[i]) ? inputs[i] as InputSlot : undefined;\r\n                const output: OutputSlot | undefined = i < outputs.length && outputTypeGuard(outputs[i]) ? outputs[i] as OutputSlot : undefined;\r\n\r\n                if (input && input.name == null)\r\n                    input.name = `Input${i}`;\r\n                if (output && output.name == null)\r\n                    output.name = `Output${i}`;\r\n\r\n                const inputFlow: InputFlowSlot | undefined = i < inputs.length && !inputTypeGuard(inputs[i]) ? inputs[i] as InputFlowSlot : undefined;\r\n                const outputFlow: OutputFlowSlot | undefined = i < outputs.length && !outputTypeGuard(outputs[i]) ? outputs[i] as OutputFlowSlot : undefined;\r\n                \r\n                if (inputFlow && inputFlow.name == null)\r\n                    inputFlow.name = `Flow${i}`;\r\n                if (outputFlow && outputFlow.name == null)\r\n                    outputFlow.name = `Flow${i}`;\r\n                return(\r\n                    <React.Fragment key={`node-slot-${item.id}-${i}`}>\r\n                        {input != null  && \r\n                            <>\r\n                            <InputSlotDOM inputSlot={input}\r\n                                        inputConnection={item.getInputConnection(input.id)}\r\n                                        x={0}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onInputChange={value => {\r\n                                            item.setInputValue(input.id, value);\r\n                                            ScripletManager.currentScriplet?.updateNodes();\r\n\r\n                                            return true;\r\n                                        }}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addConnection(item.id, input.id, otherItemId, otherSlotId);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {output != null &&\r\n                            <>\r\n                            <OutputSlotDOM outputSlot={output}\r\n                                        outputConnections={item.getOutputConnections(output.id)}\r\n                                        x={width}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addConnection(otherItemId, otherSlotId, item.id, output.id);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {inputFlow != null  && \r\n                            <>\r\n                            <InputFlowSlotDOM inputFlowSlot={inputFlow}\r\n                                        inputFlowConnection={item.getInputFlowConnection(inputFlow.id)}\r\n                                        x={0}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addFlowConnection(item.id, inputFlow.id, otherItemId, otherSlotId);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {outputFlow != null &&\r\n                            <>\r\n                            <OutputFlowSlotDOM outputFlowSlot={outputFlow}\r\n                                        outputFlowConnection={item.getOutputFlowConnection(outputFlow.id)}\r\n                                        x={width}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addFlowConnection(otherItemId, otherSlotId, item.id, outputFlow.id);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                    </React.Fragment>\r\n                );\r\n                })}\r\n                {/*\r\n                <Label name=\"show-state\"\r\n                        x={0}\r\n                        y={height}\r\n                        width={width}\r\n                        height={5}\r\n                        onMouseEnter={this.handleHoverEnterToggleState}\r\n                        onMouseLeave={this.handleHoverExitToggleState}\r\n                        onClick={this.toggleState}>\r\n                    <Tag fill={Colors.Gray[900]}\r\n                            cornerRadius={5} />\r\n                    <Text width={width}\r\n                            height={10}\r\n                            fontFamily=\"Font Awesome\\ 5 Free\"\r\n                            text={`${this.state.isStateOpen ? \"\\uf106\" : \"\\uf107\"}`}\r\n                            fill={Colors.Gray[100]}\r\n                            align=\"center\"\r\n                            verticalAlign=\"middle\" />\r\n                </Label>\r\n                */}\r\n            </Group>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { Path } from 'react-konva';\r\nimport Colors from '../utils/Colors';\r\n\r\nexport type EdgeProps = {\r\n    startPos: Vector2d;\r\n    endPos: Vector2d;\r\n    nodeWidthOther: number;\r\n    nodeHeight: number;\r\n    handleOnClick?: () => any;\r\n    children?: (midpointPos: Vector2d, isHovered: boolean) => React.ReactNode | null;\r\n}\r\n\r\nexport type EdgeState = {\r\n    isHovered: boolean;\r\n}\r\n\r\nexport default class Edge extends React.Component<EdgeProps, EdgeState> {\r\n    constructor(props: EdgeProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isHovered: false\r\n        };\r\n\r\n        this.handleOnEnter = this.handleOnEnter.bind(this);\r\n        this.handleOnExit = this.handleOnExit.bind(this);\r\n    }\r\n\r\n    handleOnEnter() {\r\n        this.setState({isHovered: true});\r\n    }\r\n\r\n    handleOnExit() {\r\n        this.setState({isHovered: false});\r\n    }\r\n\r\n    render() {\r\n        const { startPos, endPos, nodeWidthOther: nodeWidthOutput, nodeHeight, handleOnClick, children } = this.props;\r\n        const { isHovered } = this.state;\r\n        const halfNodeHeight = nodeHeight / 2;\r\n        const midpointPos: Vector2d = {\r\n            x: ((endPos.x - startPos.x - nodeWidthOutput) / 2) + (startPos.x + nodeWidthOutput),\r\n            y: ((endPos.y + halfNodeHeight - startPos.y - halfNodeHeight) / 2) + (startPos.y + halfNodeHeight)\r\n        }\r\n        const pathData = `M${startPos.x + nodeWidthOutput} ${startPos.y + halfNodeHeight - 2} Q${startPos.x + nodeWidthOutput + 30} ${startPos.y + halfNodeHeight - 2} ${midpointPos.x} ${midpointPos.y - 2} Q${endPos.x - 30} ${endPos.y + halfNodeHeight - 2} ${endPos.x} ${endPos.y + halfNodeHeight - 2}`;\r\n        return(\r\n            <>\r\n                <Path data={pathData}\r\n                    stroke={Colors.Gray[800]}\r\n                    strokeWidth={4} />\r\n                <Path data={pathData}\r\n                    className=\"cursor-pointer\"\r\n                    stroke=\"transparent\"\r\n                    strokeWidth={50}\r\n                    onMouseEnter={event => {\r\n                        this.handleOnEnter();\r\n                        const stage = event.target.getStage();\r\n                        if (!stage) {\r\n                            console.error(`The Konva stage could not be found.`);\r\n                            return;\r\n                        }\r\n                        stage.container().style.cursor = \"pointer\";\r\n                    }}\r\n                    onMouseLeave={event => {\r\n                        this.handleOnExit();\r\n                        const stage = event.target.getStage();\r\n                        if (!stage) {\r\n                            console.error(`The Konva stage could not be found.`);\r\n                            return;\r\n                        }\r\n                        stage.container().style.cursor = \"default\";\r\n                    }}\r\n                    onMouseDown={handleOnClick}\r\n                    onTouchEnd={handleOnClick} />\r\n                {children != null ? children(midpointPos, isHovered) : null}\r\n            </>\r\n        );\r\n    }\r\n}","import { BaseNodeSchema } from \"./NodeSchema\";\r\nimport NodeSchemaManager from \"../managers/NodeSchemaManager\";\r\n\r\nexport interface ICategorizable {\r\n    id: any;\r\n    name: string;\r\n}\r\n\r\nexport abstract class Category<T extends ICategorizable> {\r\n    public name: string;\r\n    public subCategories: Category<T>[];\r\n    public contentChildren: T[];\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.subCategories = [];\r\n        this.contentChildren = [];\r\n    }\r\n\r\n    abstract getSubCategory(name: string): Category<T>;\r\n    abstract addContent(id: any): void;\r\n}\r\n\r\nexport class SchemaCategory extends Category<BaseNodeSchema> {\r\n    getSubCategory(name: string): SchemaCategory {\r\n        let subCategory = this.subCategories.find(cat => cat.name === name);\r\n        if (!subCategory) {\r\n            subCategory = new SchemaCategory(name);\r\n            this.subCategories.push(subCategory);\r\n        }\r\n\r\n        return subCategory;\r\n    }\r\n\r\n    addContent(id: string) {\r\n        if (this.contentChildren.find(schema => schema.name === id)) {\r\n            console.error(`A duplicate of the schema '${id}' was found.`);\r\n            return;\r\n        }\r\n\r\n        const schema = NodeSchemaManager.getBaseSchema(id);\r\n        this.contentChildren.push(schema);\r\n    }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\n\r\nexport type SearchBarProps = {\r\n    filterSearch: (searchValue: string) => void;\r\n}\r\n\r\nexport type SearchBarState = {\r\n    searchValue: string;\r\n}\r\n\r\nexport default class SearchBar extends React.Component<SearchBarProps, SearchBarState> {\r\n    constructor(props: SearchBarProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchValue: \"\"\r\n        }\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n        this.onSearchReset = this.onSearchReset.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.filterSearch(\"\");\r\n    }\r\n\r\n    onSearchChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const searchValue = event.target.value;\r\n        this.setState({searchValue});\r\n        this.props.filterSearch(searchValue);\r\n    }\r\n\r\n    onSearchReset() {\r\n        this.setState({searchValue: \"\"});\r\n        this.props.filterSearch(\"\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"h-6 flex flex-row w-full\">\r\n                <div className=\"px-2 rounded-l-full bg-gray-100\">\r\n                    <FontAwesomeIcon icon=\"search\" \r\n                                        className=\"text-sm text-gray-700\" />\r\n                </div>\r\n                \r\n                <input type=\"text\" \r\n                            value={this.state.searchValue}\r\n                            className=\"w-full bg-gray-100 border-none text-sm\"\r\n                            onChange={this.onSearchChange} />\r\n                <button className=\"px-2 flex items-center rounded-r-full bg-gray-100\"\r\n                        onClick={this.onSearchReset}>\r\n                    <FontAwesomeIcon icon=\"times-circle\" \r\n                                        className=\"text-sm text-gray-700\" />\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport NodeSchemaManager from '../managers/NodeSchemaManager';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport { BaseNodeSchema } from '../models/NodeSchema';\r\nimport { Category, ICategorizable, SchemaCategory } from '../models/Category';\r\nimport SearchBar from './SearchBar';\r\n\r\nexport type CategoryDOMProps<T extends ICategorizable> = {\r\n    category: Category<T>;\r\n    depth: number;\r\n    onClick: (id: any) => any;\r\n}\r\n\r\nexport type CategoryDOMState = {\r\n    showChildren: boolean;\r\n}\r\n\r\nclass CategoryDOM<T extends ICategorizable> extends React.Component<CategoryDOMProps<T>, CategoryDOMState> {\r\n    constructor(props: CategoryDOMProps<T>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showChildren: true\r\n        }\r\n\r\n        this.toggleCategory = this.toggleCategory.bind(this);\r\n        this.openCategory = this.openCategory.bind(this);\r\n        this.closeCategory = this.closeCategory.bind(this);\r\n    }\r\n\r\n    toggleCategory() {\r\n        if (this.state.showChildren)\r\n            this.closeCategory();\r\n        else\r\n            this.openCategory();\r\n    }\r\n\r\n    openCategory() {\r\n        this.setState({showChildren: true});\r\n    }\r\n\r\n    closeCategory() {\r\n        this.setState({showChildren: false});\r\n    }\r\n\r\n    render() {\r\n        const { category, depth, onClick } = this.props;\r\n        const { showChildren } = this.state;\r\n        if (category.name.toLowerCase() === \"hidden\")\r\n            return null;\r\n        return (\r\n            <div style={{marginLeft: `${category.name === \"root\" ? -1 : 0}rem`}}>\r\n                {category.name !== \"root\" && (\r\n                    <div className=\"flex flex-row items-center rounded-sm border-b bg-gray-900 hover:bg-gray-800 text-gray-100 cursor-pointer select-none\" \r\n                            style={{borderColor: \"#111111\"}}\r\n                            onClick={this.toggleCategory}>\r\n                        <div className=\"px-2 text-xs\">\r\n                            <FontAwesomeIcon icon=\"chevron-down\" className={`${showChildren ? \"hidden\" : \"\"}`} />\r\n                            <FontAwesomeIcon icon=\"chevron-up\" className={`${showChildren ? \"\" : \"hidden\"}`} />\r\n                        </div>\r\n                        <div className=\"text-sm\">\r\n                            {category.name}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className={`${showChildren ? \"\" : \"hidden\"} pl-4 border-l border-dashed border-gray-700`}>\r\n                    <div className=\"\">\r\n                        {category.subCategories.map((subCategory, index) => (\r\n                            <CategoryDOM key={`category-${depth}-${index}`}\r\n                                            category={subCategory} \r\n                                            depth={depth + 1}\r\n                                            onClick={onClick} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"\">\r\n                        {category.contentChildren.map((child, index) => (\r\n                            <div key={`child-${depth}-${index}`} \r\n                                className=\"px-2 rounded-sm hover:bg-gray-700 text-gray-100 cursor-pointer select-none\"\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    onClick(child.id);\r\n                                }}>\r\n                                {child.name}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport type SchemaSelectorProps = {\r\n    isVisible: boolean;\r\n    x: number;\r\n    y: number;\r\n    addNodeItem: (id: string) => any;\r\n}\r\n\r\nexport type SchemaSelectorState = {\r\n    schemaResults: BaseNodeSchema[];\r\n}\r\n\r\n// TODO: Categorized selector\r\nexport default class SchemaSelector extends React.Component<SchemaSelectorProps, SchemaSelectorState> {\r\n    constructor(props: SchemaSelectorProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            schemaResults: NodeSchemaManager.getBaseSchemas()\r\n        }\r\n\r\n        this.filterSearch = this.filterSearch.bind(this);\r\n        this.getRootSchemaCategory = this.getRootSchemaCategory.bind(this);\r\n    }\r\n\r\n    filterSearch(searchValue: string) {\r\n        let schemas = NodeSchemaManager.getBaseSchemas();\r\n        schemas = schemas.filter(schema => (schema.name.toLowerCase().includes(searchValue.toLowerCase()) || \r\n                                            schema.id.toLowerCase().includes(searchValue.toLowerCase())) &&\r\n                                            !schema.id.toLowerCase().includes(\"hidden\"));\r\n        this.setState({schemaResults: schemas});\r\n    }\r\n\r\n    getRootSchemaCategory(): SchemaCategory {\r\n        const { schemaResults } = this.state;\r\n        const categoryRoot = new SchemaCategory(\"root\");\r\n\r\n        let currentCategory = categoryRoot;\r\n        schemaResults.forEach(schema => {\r\n            const idArr = schema.id.split(\"/\");\r\n            let i;\r\n            for (i = 0; i < idArr.length - 1; i++) {\r\n                currentCategory = currentCategory.getSubCategory(idArr[i]);\r\n            }\r\n            currentCategory.addContent(schema.id);\r\n            currentCategory = categoryRoot;\r\n        });\r\n\r\n        return categoryRoot;\r\n    }\r\n\r\n    render() {\r\n        const { isVisible, x, y, addNodeItem } = this.props;\r\n        const { schemaResults } = this.state;\r\n\r\n        const width = 300;\r\n        const height = 250;\r\n\r\n        const rootCategory = this.getRootSchemaCategory();\r\n        return (\r\n            <div className={`${isVisible ? \"flex\" : \"hidden\"} flex-col absolute rounded bg-gray-900 bg-opacity-90`} \r\n                    style={{top: y, left: x, width: `${Math.min(width, window.innerWidth - x)}px`, height: `${Math.min(height, window.innerHeight - y)}px`}}>\r\n                <div className=\"p-3\">\r\n                    <SearchBar filterSearch={this.filterSearch} />\r\n                </div>\r\n                <Scrollbar noScrollX>\r\n                    <div className=\"pb-4\">\r\n                        <CategoryDOM category={rootCategory} depth={0} onClick={addNodeItem} />\r\n                    </div>\r\n                    \r\n                    <div className={`${schemaResults.length > 0 ? \"hidden\" : \"flex\"} justify-center mb-2 select-none`}>\r\n                        <div className=\"text-gray-400 italic\">\r\n                            No schemas found\r\n                        </div>\r\n                    </div>\r\n                </Scrollbar>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport type ModalProps = {\r\n    title: string;\r\n    openModal: (callable: () => void) => void;\r\n    children?: (closeModal: () => void) => React.ReactNode | null;\r\n}\r\n\r\nexport type ModalState = {\r\n    isModalOpen: boolean\r\n}\r\n\r\nexport default class Modal extends React.Component<ModalProps, ModalState> {\r\n    constructor(props: ModalProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.props.openModal(this.handleOpenModal);\r\n    }\r\n\r\n    handleOpenModal() {\r\n        this.setState({isModalOpen: true});\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.setState({isModalOpen: false});\r\n    }\r\n\r\n    render() {\r\n        const { title, children } = this.props;\r\n        const { isModalOpen } = this.state;\r\n        const closeModal = this.handleCloseModal;\r\n        return(\r\n            <div className={`${isModalOpen ? 'flex' : 'hidden'} absolute-full items-center justify-center z-30`}>\r\n                <div className=\"absolute-full opacity-50 bg-gray-900 cursor-pointer\"\r\n                     onClick={this.handleCloseModal}></div>\r\n                <div className=\"p-4 sm:p-8 w-2/3 lg:w-1/2 bg-gray-100 z-40 rounded shadow-lg\">\r\n                    <div className=\"mb-4 flex items-center justify-between text-gray-800\">\r\n                        <span className=\"text-lg font-medium\">\r\n                            {title}\r\n                        </span>\r\n                        <FontAwesomeIcon className=\"text-lg sm:text-xl cursor-pointer\" \r\n                                         icon=\"times\"\r\n                                         onClick={this.handleCloseModal} />\r\n                    </div>\r\n                    <div>\r\n                        {children != null ? children(closeModal) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport type VariableFormProps = {\r\n    onAddVariable: (name: string, type: string, startValue: any) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport type VariableFormState = {\r\n    name: string;\r\n    selectedType: string;\r\n    startValue: any;\r\n}\r\n\r\nexport default class VariableForm extends React.Component<VariableFormProps, VariableFormState> {\r\n    constructor(props: VariableFormProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            selectedType: \"String\",\r\n            startValue: undefined\r\n        }\r\n\r\n        this.setStartValue = this.setStartValue.bind(this);\r\n    }\r\n    \r\n    setStartValue(inputValue: string) {\r\n        let startValue;\r\n\r\n        switch (this.state.selectedType) {\r\n            case \"Number\":\r\n                startValue = parseInt(inputValue);\r\n                break;\r\n            case \"Boolean\":\r\n                startValue = (inputValue === \"true\");\r\n                break;\r\n            default:\r\n                startValue = inputValue;\r\n                break;\r\n        }\r\n\r\n        this.setState({startValue: startValue});\r\n    }\r\n\r\n    render() {\r\n        const { name, selectedType, startValue } = this.state;\r\n        const { onAddVariable, onCancel } = this.props;\r\n\r\n        return(\r\n            <div className=\"flex flex-col\">\r\n                <div className=\"flex flex-col mb-4\">\r\n                    <label className=\"mb-1 text-sm text-gray-700\">\r\n                        Name\r\n                    </label>\r\n                    <input className=\"px-2 border-2 rounded\" \r\n                            type=\"text\" \r\n                            name=\"title\" \r\n                            value={name} \r\n                            onChange={event => {\r\n                                this.setState({name: event.target.value});\r\n                            }} />\r\n                </div>\r\n                <div className=\"flex flex-col mb-4\">\r\n                    <label className=\"mb-1 text-sm text-gray-700\">\r\n                        Type\r\n                    </label>\r\n                    <select className=\"px-1 border-2 rounded text-gray-800\" \r\n                            name=\"\" \r\n                            id=\"\" \r\n                            value={selectedType}\r\n                            onChange={event => {\r\n                                this.setState({selectedType: event.target.value});\r\n                            }}>\r\n                        <option value=\"Number\">Number</option>\r\n                        <option value=\"Boolean\">Boolean</option>\r\n                        <option value=\"String\">String</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"flex flex-col mb-6\">\r\n                    <label className=\"mb-1 text-sm text-gray-700\">\r\n                        Start Value\r\n                    </label>\r\n                    {(selectedType === \"Number\" && \r\n                        <input className=\"px-2 border-2 rounded\" \r\n                                type=\"number\" \r\n                                name=\"title\" \r\n                                value={`${startValue ?? \"\"}`}\r\n                                onChange={event => this.setStartValue(event.target.value)} />\r\n                    ) || \r\n                    (selectedType === \"Boolean\" && \r\n                        <select className=\"px-2 border-2 rounded text-gray-800\" \r\n                                name=\"\" \r\n                                id=\"\"\r\n                                value={`${startValue ?? \"\"}`}\r\n                                onChange={event => this.setStartValue(event.target.value)}>\r\n                            <option value=\"\">Select a value...</option>\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                        </select>\r\n                    ) ||\r\n                    ((selectedType === \"String\" || selectedType === \"\") &&\r\n                        <input className=\"px-2 border-2 rounded\" \r\n                                type=\"text\" \r\n                                name=\"title\" \r\n                                value={`${startValue ?? \"\"}`}\r\n                                onChange={event => this.setStartValue(event.target.value)} />\r\n                    )}\r\n                </div>\r\n                <div className=\"flex flex-row-reverse\">\r\n                    <button className=\"ml-4 px-2 py-1 rounded bg-blue-600 text-gray-100 hover:bg-blue-500\" \r\n                            onClick={() => {\r\n                                // TODO: Do validation feedback eventually\r\n                                if (!name || !selectedType || !startValue) {\r\n                                    console.error(`The form for creating a variable cannot have empty fields.`);\r\n                                    return;\r\n                                }\r\n\r\n                                onAddVariable(name, selectedType, startValue);\r\n                                onCancel();\r\n                            }}>\r\n                        Save\r\n                    </button>\r\n                    <button className=\"px-2 py-1 rounded bg-gray-500 text-gray-100 hover:bg-gray-400\" \r\n                            onClick={onCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Controlled as CodeMirror } from 'react-codemirror2';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ScripletManager from '../managers/ScripletManager';\r\nimport Console, { ConsoleMessage } from '../managers/Console';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport SearchBar from './SearchBar';\r\nimport AddItem from './AddItem';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { VariableItem } from '../models/Scriplet';\r\nimport Modal from './Modal';\r\nimport VariableForm from './VariableForm';\r\n\r\nrequire('codemirror/mode/javascript/javascript');\r\nvar jsbeautify = require('js-beautify').js_beautify;\r\n\r\nexport class EvalResult {\r\n    public inputVars: string[];\r\n    public outputVar: string;\r\n    public evalValue: any;\r\n    public toParent: string;\r\n    public toCode: string;\r\n\r\n    constructor(evalValue: any, toParent: string, toCode: string) {\r\n        this.inputVars = [];\r\n        this.outputVar = \"\";\r\n        this.evalValue = evalValue;\r\n        this.toParent = toParent;\r\n        this.toCode = toCode;\r\n    }\r\n}\r\n\r\nexport type CodeProps = {\r\n    scripletId: number;\r\n    addNodeItem: (schemaId: string, x?: number, y?: number, customName?: string, variableId?: number) => void;\r\n}\r\n\r\nexport type CodeState = {\r\n    selectedId: number;\r\n    editorValue: string;\r\n    isCodeOpen: boolean;\r\n    isDragging: boolean;\r\n    isSelecting: boolean;\r\n    selectionLocation: Vector2d;\r\n    selectedVariable: VariableItem;\r\n    screenWidth: number;\r\n    searchValue: string;\r\n    variableResults: VariableItem[];\r\n    openVariableModal: () => void;\r\n}\r\n\r\nexport default class CodeEditor extends React.Component<CodeProps, CodeState> {\r\n    private codeResult: React.RefObject<HTMLDivElement>;\r\n    private selector: React.RefObject<HTMLDivElement>;\r\n    constructor(props: CodeProps) {\r\n        super(props);\r\n\r\n        this.codeResult = React.createRef();\r\n        this.selector = React.createRef();\r\n\r\n        this.state = {\r\n            selectedId: 0,\r\n            editorValue: jsbeautify(\"return 42;\", { indent_size: 4 }),\r\n            isCodeOpen: false,\r\n            isDragging: false,\r\n            isSelecting: false,\r\n            selectionLocation: {x: 0, y: 0},\r\n            selectedVariable: {id: -1, name: \"\", type: \"\", startValue: undefined, value: undefined},\r\n            screenWidth: window.innerWidth,\r\n            searchValue: \"\",\r\n            variableResults: [],\r\n            openVariableModal: () => {}\r\n        }\r\n\r\n        this.setScreenWidth = this.setScreenWidth.bind(this);\r\n        this.handleRun = this.handleRun.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleBeautifyCode = this.handleBeautifyCode.bind(this);\r\n        this.handleEvaluateNodes = this.handleEvaluateNodes.bind(this);\r\n        //this.evaluateNodes = this.evaluateNodes.bind(this);\r\n        this.openCode = this.openCode.bind(this);\r\n        this.closeCode = this.closeCode.bind(this);\r\n        this.toggleCode = this.toggleCode.bind(this);\r\n\r\n        this.onMessageLog = this.onMessageLog.bind(this);\r\n        this.filterSearch = this.filterSearch.bind(this);\r\n        this.refreshVariables = this.refreshVariables.bind(this);\r\n        this.onAddVariable = this.onAddVariable.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.setScreenWidth);\r\n        \r\n        Console.subscribe(message => this.onMessageLog(message));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.setScreenWidth);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const id = this.props.scripletId;\r\n        if (this.state.selectedId !== id) {\r\n            ScripletManager.selectScriplet(id).then(result => {\r\n                this.filterSearch(\"\");\r\n                this.handleClear();\r\n                this.setState({selectedId: id});\r\n            })\r\n        }\r\n    }\r\n\r\n    setScreenWidth() {\r\n        this.setState({screenWidth: window.innerWidth});\r\n    }\r\n\r\n    handleRun() {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        scriplet.resetVariables();\r\n\r\n        const startNode = scriplet.getStart();\r\n        const startSchema = startNode.schema;\r\n        if (!startSchema) {\r\n            console.error(`The start node is missing the schema.`);\r\n            return;\r\n        }\r\n\r\n        const startSlot = startSchema.inputFlowSlots[0];\r\n        if (!startSlot) {\r\n            console.error(`The start node is missing the Entry input flow slot.`);\r\n            return;\r\n        }\r\n\r\n        startSlot.evaluateSlot();\r\n        Console.success(\"Finished running code!\");\r\n    }\r\n\r\n    handleClear() {\r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`App console could not be found.`);\r\n            return;\r\n        }\r\n\r\n        codeResult.innerText = \"Run code first\";\r\n    }\r\n\r\n    handleBeautifyCode() {\r\n        this.setState(prevState => ({editorValue: jsbeautify(prevState.editorValue, { indent_size: 4 })}));\r\n    }\r\n\r\n    handleEvaluateNodes() {\r\n        /*\r\n        // Look for the output node\r\n        const scriplet = this.state.scriplet;\r\n        if (!scriplet) {\r\n            console.error(`The scriplet in this state could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const items = [...scriplet.items];\r\n        const inputEntries = items.filter(entry => entry[1].schema?.name === \"Input\");\r\n        if (!inputEntries) {\r\n            console.error(`No input nodes were found in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        const outputEntries = items.filter(entry => entry[1].schema?.name === \"Output\");\r\n        if (!outputEntries) {\r\n            console.error(`No output nodes were found in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        \r\n        let visited = new Map<number, EvalResult>();\r\n        const results: EvalResult[] = [];\r\n        let inputInitStrs = \"\";\r\n        outputEntries.forEach(entry => {\r\n            const result = this.evaluateNodes(new EvalResult(0, \"\", \"\"), visited, entry[1].id);\r\n            if (result)\r\n                results.push(result);\r\n            \r\n            inputEntries.forEach(entry2 => {\r\n                const inputRes = visited.get(entry2[1].id);\r\n                if (inputRes) {\r\n                    const code = `const ${entry2[1].variableName} = ${inputRes.evalValue}; `;\r\n                    if (!inputInitStrs.includes(code))\r\n                        inputInitStrs += code;\r\n                }\r\n            });\r\n            visited = new Map<number, EvalResult>();\r\n        });\r\n\r\n        if (!results) {\r\n            console.error(`Something went wrong when evaluating the nodes of the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        \r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`Could not get the div element of the referenced code result element.`);\r\n            return;\r\n        }\r\n\r\n        let fullCode: string = `${inputInitStrs}`;\r\n        const evalValues: any[] = [];\r\n        results.forEach(result => {\r\n            const code = `function ${result.outputVar}(${result.inputVars}) { ${result.toCode} }`;\r\n            evalValues.push(result.evalValue);\r\n            if (code)\r\n                fullCode += code;\r\n        });\r\n        fullCode += \"return [\";\r\n        results.forEach((result, index) => {\r\n            fullCode += index === results.length - 1 ? `${result.outputVar}(${result.inputVars})` : `${result.outputVar}(${result.inputVars}), `;\r\n        });\r\n        fullCode += \"];\"\r\n\r\n        codeResult.textContent = evalValues.toString();\r\n        this.setState({editorValue: jsbeautify(fullCode, { indent_size: 4 })});\r\n        */\r\n    }\r\n\r\n    /* TODO: This is too hackish\r\n    // What this should do is place all the state data (like evaluated value, )\r\n    evaluateNodes(result: EvalResult, visited: Map<number, EvalResult>, itemId: number): EvalResult | undefined {\r\n        const scriplet = this.state.scriplet;\r\n        if (!scriplet) {\r\n            console.error(`The scriplet in this state could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const items = scriplet.items;\r\n        if (!items) {\r\n            console.error(`Could not get the node items in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n\r\n        const item = items.get(itemId);\r\n        if (!item) {\r\n            console.error(`The item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema of the item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const variableName = schema.state.hasVariable ? item.variableName : \"\";\r\n        if (schema.name === \"Input\") {\r\n            result.evalValue = schema.evalFunction();\r\n            result.toParent = variableName;\r\n            result.inputVars.push(variableName);\r\n            visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n            return result;\r\n        }\r\n\r\n        if (schema.name === \"Output\") {\r\n            result.outputVar = item.variableName;\r\n        }\r\n\r\n        const children = NodeConnections.getInputConnections(itemId);\r\n        if (!children) {\r\n            console.error(`The children of the node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        if (children.size <= 0) {\r\n            const visitedRes = visited.get(itemId);\r\n            if (visitedRes)\r\n                return visitedRes;\r\n            result.evalValue = schema.evalFunction();\r\n            result.toParent = schema.toParent() === \"variable\" ? variableName : schema.toParent();\r\n            result.toCode = `${result.toCode} ${schema.state.hasVariable ? \"const \" + variableName + \" = \" + schema.toCode() : schema.toCode()};`;\r\n            visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n            return result;\r\n        }\r\n        \r\n        var i;\r\n        let arr: any[] = [];\r\n        let arrStr: string[] = [];\r\n        // This for loop is determining the values of the toParent functions of the children\r\n        // TODO: Don't travel to the already visited nodes\r\n        for (i = 0; i < schema.inputSlots.length; i++) {\r\n            const childConn = children.get(schema.inputSlots[i].id);\r\n            if (!childConn) {\r\n                arr.push(schema.inputSlots[i].defaultValue);\r\n                arrStr.push(schema.inputSlots[i].defaultValueStr);\r\n                continue;\r\n            }\r\n\r\n            const childItem = scriplet.items.get(childConn.outputId);\r\n            if (!childItem) {\r\n                console.error(`The node item of id '${childConn.outputId}' could not be found in the scriplet.`);\r\n                return;\r\n            }\r\n            const visitedRes = visited.get(childItem.id);\r\n            if (visitedRes != null) {\r\n                arr.push(visitedRes.evalValue);\r\n                arrStr.push(visitedRes.toParent);\r\n                continue;\r\n            }\r\n            \r\n            const res = this.evaluateNodes(result, visited, childItem.id);\r\n            if (!res) {\r\n                console.error(`Something went wrong when evaluating the child nodes of the node item of id '${childItem.id}'.`);\r\n                return;\r\n            }\r\n            \r\n            arr.push(res.evalValue);\r\n            arrStr.push(res.toParent);\r\n        }\r\n\r\n        schema.state.onEvaluate(...arr);\r\n\r\n        result.evalValue = schema.evalFunction(...arr);\r\n        result.toParent = schema.toParent(...arrStr) === \"variable\" ? variableName : schema.toParent(...arrStr);\r\n        result.toCode = `${result.toCode} ${schema.state.hasVariable ? \"const \" + variableName + \" = \" + schema.toCode(...arrStr) : schema.toCode(...arrStr)};`;\r\n        visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n\r\n        return result;\r\n    }\r\n    /**/\r\n\r\n    openCode() {\r\n        this.setState({isCodeOpen: true});\r\n    }\r\n\r\n    closeCode() {\r\n        this.setState({isCodeOpen: false});\r\n    }\r\n\r\n    toggleCode() {\r\n        if (this.state.isCodeOpen)\r\n            this.closeCode();\r\n        else\r\n            this.openCode();\r\n    }\r\n\r\n    onMessageLog(message: ConsoleMessage) {\r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`App console could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (codeResult.innerText === \"Run code first\")\r\n            codeResult.innerHTML = `<p style=\"color: ${message.color}\">${message.message}</p>`;\r\n        else\r\n            codeResult.innerHTML += `<p style=\"color: ${message.color}\">${message.message}</p>`;\r\n    }\r\n\r\n    filterSearch(searchValue: string) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        let variables = scriplet.getVariables();\r\n        variables = variables.filter(variable => (variable.name.toLowerCase().includes(searchValue.toLowerCase()) || \r\n                                                    variable.type.toLowerCase().includes(searchValue.toLowerCase()) ||\r\n                                                    `${variable.startValue}`.toLowerCase().includes(searchValue.toLowerCase())));\r\n        this.setState({variableResults: variables});\r\n    }\r\n\r\n    refreshVariables() {\r\n        this.filterSearch(\"\");\r\n    }\r\n\r\n    onAddVariable(name: string, type: string, startValue: any) {\r\n        // TODO: Make sure the name is not taken by another variable already\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        // TODO: Implement a way to add variables, including its type and start value\r\n        // Possibly do this with a modal\r\n        scriplet.addVariable(name, type, startValue, undefined);\r\n    }\r\n\r\n    render() {\r\n        const { isCodeOpen, isDragging, isSelecting, selectionLocation, selectedVariable, screenWidth, variableResults, openVariableModal } = this.state;\r\n        const { addNodeItem } = this.props;\r\n\r\n        if (isSelecting)\r\n            this.selector.current?.focus();\r\n\r\n        return(\r\n            <>\r\n                <div className={`${isCodeOpen ? \"code-container\" : \"hidden\"} shadow flex flex-row lg:flex-col`}>\r\n                    {/* \r\n                    <CodeMirror value={this.state.editorValue}\r\n                                options={{\r\n                                    mode: 'javascript',\r\n                                    theme: 'code-editor material',\r\n                                    lineNumbers: true\r\n                                }}\r\n                                onBeforeChange={(editor, data, value) => {\r\n                                    this.setState({editorValue: value});\r\n                                }}\r\n                                onChange={(editor, data, value) => {\r\n\r\n                                }} />\r\n                    <button className=\"beautify-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleBeautifyCode}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"magic\" />&nbsp;\r\n                        Beautify\r\n                    </button>\r\n                    <button className=\"eval-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleEvaluateNodes}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"lightbulb\" />&nbsp;\r\n                        Evaluate\r\n                    </button>\r\n                    */}\r\n\r\n                    <div className=\"flex flex-col p-3 w-1/3 lg:w-full lg:h-2/3 lg:border-b-2 border-gray-900 bg-gray-800\">\r\n                        <SearchBar filterSearch={this.filterSearch} />\r\n                        <div className=\"w-full h-full\">\r\n                            <Scrollbar noScrollX className=\"mt-2\">\r\n                                {variableResults.map((variable, index) => (\r\n                                    <div key={`variable-${index}`} \r\n                                            className=\"mb-2 select-none\" \r\n                                            draggable\r\n                                            onDragStart={event => {\r\n                                                event.stopPropagation();\r\n                                                event.dataTransfer.setData(\"text/plain\", `${variable.id}`);\r\n                                                this.setState({isDragging: true});\r\n                                            }}\r\n                                            onDragEnd={() => {\r\n                                                this.setState({isDragging: false});\r\n                                            }}>\r\n                                        <div className=\"flex flex-row items-center px-2 py-1 rounded hover:bg-gray-700 cursor-pointer\">\r\n                                            <div className=\"flex flex-col w-full mr-2\">\r\n                                                <div className=\"text-sm text-gray-100\">\r\n                                                    {variable.name}\r\n                                                </div>\r\n                                                <div className=\"text-xs text-gray-300\">\r\n                                                    {variable.type}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"px-2 py-2 w-full text-gray-100\">\r\n                                                <div className=\"px-1 rounded-sm bg-gray-600\">\r\n                                                    {`${variable.startValue}`}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                                <div className={`${variableResults.length > 0 ? \"hidden\" : \"flex\"} justify-center mb-2 select-none`}>\r\n                                    <div className=\"p-3 text-gray-400 italic\">\r\n                                        No variables found\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"w-full mb-1 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\">\r\n                                    <div className={`px-4 py-2`}\r\n                                            onClick={() => {\r\n                                                openVariableModal();\r\n                                            }}>\r\n                                        <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" \r\n                                                        icon=\"plus\" />\r\n                                        <span className=\"font-medium\">Add Variable</span>\r\n                                    </div>\r\n                                </div>\r\n                            </Scrollbar>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"w-2/3 h-full lg:w-full lg:h-1/3 bg-gray-800\">\r\n                        <Scrollbar>\r\n                            <div className=\"px-4 py-2 lg:w-auto flex-grow text-gray-100\" ref={this.codeResult}>\r\n                                Run code first\r\n                            </div>\r\n                        </Scrollbar>\r\n                    </div>\r\n                    <button className=\"run-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleRun}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"play\"/>&nbsp;\r\n                        Run\r\n                    </button>\r\n                    <button className=\"clear-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleClear}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"trash\"/>&nbsp;\r\n                        Clear\r\n                    </button>\r\n                </div>\r\n                <div className={`${isCodeOpen ? \"hidden\" : \"collapsed-code\"} shadow bg-gray-800 items-center lg:justify-center lg:items-start`}>\r\n                    <div className=\"p-4\">\r\n                        <FontAwesomeIcon icon=\"code\" className=\"text-xl text-gray-300\" />\r\n                    </div>\r\n                </div>\r\n                <button className={`${isCodeOpen ? \"h-56 mb-8 pb-48\" : \"h-16 mb-8 pb-8\"} ${screenWidth >= 1024 ? \"hidden\" : \"code-toggle\"} items-center flex-col-reverse rounded-full bg-gray-700`}\r\n                        onClick={this.toggleCode}>\r\n                    <div className=\"inline-block pb-1\">\r\n                        <FontAwesomeIcon icon=\"chevron-down\"\r\n                                            className={`${isCodeOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                        <FontAwesomeIcon icon=\"chevron-up\"\r\n                                            className={`${isCodeOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                    </div>\r\n                </button>\r\n                <button className={`${isCodeOpen ? \"w-64 mr-8 pr-56\" : \"w-16 mr-8 pr-8\"} ${screenWidth >= 1024 ? \"code-toggle\" : \"hidden\"} items-center flex-row-reverse rounded-full bg-gray-700`}\r\n                        onClick={this.toggleCode}>\r\n                    <div className=\"inline-block pr-2\">\r\n                        <FontAwesomeIcon icon=\"chevron-right\"\r\n                                            className={`${isCodeOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                        <FontAwesomeIcon icon=\"chevron-left\"\r\n                                            className={`${isCodeOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                    </div>\r\n                </button>\r\n                <div className={`${isDragging ? \"flex\" : \"hidden\"} absolute-full justify-center items-center z-10 bg-gray-700 bg-opacity-25`}\r\n                        onDragEnter={event => event.preventDefault()}\r\n                        onDragOver={event => event.preventDefault()}\r\n                        onDrop={event => {\r\n                            event.preventDefault();\r\n                            const x = event.pageX;\r\n                            const y = event.pageY;\r\n                            const variableId = event.dataTransfer.getData(\"text/plain\");\r\n\r\n                            const scriplet = ScripletManager.currentScriplet;\r\n                            if (!scriplet) {\r\n                                console.error(`The current scriplet could not be found.`);\r\n                                return;\r\n                            }\r\n\r\n                            const variable = scriplet.getVariable(parseInt(variableId));\r\n                            if (!variable) {\r\n                                console.error(`The variable of id '${variableId}' could not be found.`);\r\n                                return;\r\n                            }\r\n\r\n                            this.setState({isSelecting: true, selectionLocation: {x, y}, selectedVariable: variable});\r\n                        }}>\r\n                    <div className=\"text-xl text-gray-900\">\r\n                        Drag here...\r\n                    </div>\r\n                </div>\r\n                <div ref={this.selector}\r\n                        className={`${isSelecting ? \"flex\" : \"hidden\"} flex-col rounded bg-gray-700`} \r\n                        style={{position: \"absolute\", top: `${selectionLocation.y}px`, left: `${selectionLocation.x}px`}}\r\n                        tabIndex={0}\r\n                        onBlur={() => {\r\n                            \r\n                        }}>\r\n                    <div className=\"px-2 py-1 hover:bg-gray-600 text-gray-100 select-none cursor-pointer\"\r\n                            onClick={event => {\r\n                                event.bubbles = true;\r\n                                addNodeItem(`Hidden/Getter/${selectedVariable.type}`, selectionLocation.x, selectionLocation.y, undefined, selectedVariable.id);\r\n                                this.setState({isSelecting: false});\r\n                            }}>\r\n                        {`Get ${selectedVariable.name}`}\r\n                    </div>\r\n                    <div className=\"px-2 py-1 hover:bg-gray-600 text-gray-100 select-none cursor-pointer\"\r\n                            onClick={event => {\r\n                                event.stopPropagation();\r\n                                addNodeItem(`Hidden/Setter/${selectedVariable.type}`, selectionLocation.x, selectionLocation.y, undefined, selectedVariable.id);\r\n                                this.setState({isSelecting: false});\r\n                            }}>\r\n                        {`Set ${selectedVariable.name}`}\r\n                    </div>\r\n                </div>\r\n                <Modal title=\"Create New Variable\"\r\n                        openModal={callable => {\r\n                            if (openVariableModal.toString() === (() => {}).toString())\r\n                                this.setState({openVariableModal: callable});\r\n                        }}>\r\n                    {(closeModal) => (\r\n                        <VariableForm onAddVariable={(name, type, startValue) => {\r\n                            this.onAddVariable(name, type, startValue);\r\n                            this.refreshVariables();\r\n                        }} onCancel={closeModal} />\r\n                    )}\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Node from './Node';\r\nimport { Stage, Layer, Group, Rect, Text } from 'react-konva';\r\nimport { Stage as PortalStage, Layer as PortalLayer, Portal } from 'react-konva-portal';\r\nimport Edge from './Edge';\r\nimport Colors from '../utils/Colors';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport NodeConnections from '../managers/NodeConnections';\r\nimport ScripletManager from '../managers/ScripletManager';\r\nimport Konva from 'konva';\r\nimport FontFaceObserver from 'fontfaceobserver';\r\nimport { KonvaForm } from './KonvaForm';\r\nimport SchemaSelector from './SchemaSelector';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { ItemSlotPair } from '../models/NodeSlot';\r\nimport CodeEditor from './CodeEditor';\r\n\r\nexport type ScripletRootProps = {\r\n    scripletId: number;\r\n}\r\n\r\nexport type ScripletRootState = {\r\n    selectedId: number;\r\n    isDirtyDOM: boolean;\r\n    isReadyToMount: boolean;\r\n    isReady: boolean;\r\n    contextMenu: Konva.Node | null;\r\n    inputElement: HTMLInputElement | null;\r\n    isContextMenuShown: boolean;\r\n    contextMenuPos: Vector2d;\r\n}\r\n\r\nexport default class ScripletRoot extends React.Component<ScripletRootProps, ScripletRootState> {\r\n    private stageContainer: React.RefObject<HTMLDivElement>;\r\n    private stage: React.RefObject<Stage>;\r\n\r\n    constructor(props: ScripletRootProps) {\r\n        super(props);\r\n\r\n        this.stageContainer = React.createRef<HTMLDivElement>();\r\n        this.stage = React.createRef<Stage>();\r\n\r\n        this.state = {\r\n            selectedId: 0,\r\n            isDirtyDOM: false,\r\n            isReadyToMount: false,\r\n            isReady: false,\r\n            contextMenu: null,\r\n            inputElement: null,\r\n            isContextMenuShown: false,\r\n            contextMenuPos: {x: 0, y: 0}\r\n        };\r\n\r\n        this.updateDOM = this.updateDOM.bind(this);\r\n        this.addNodeItem = this.addNodeItem.bind(this);\r\n        this.deleteNodeItem = this.deleteNodeItem.bind(this);\r\n        this.handleDragNode = this.handleDragNode.bind(this);\r\n        this.handleDeleteEdge = this.handleDeleteEdge.bind(this);\r\n        this.handleDeleteFlowEdge = this.handleDeleteFlowEdge.bind(this);\r\n        this.handleZoom = this.handleZoom.bind(this);\r\n        this.handleContextMenu = this.handleContextMenu.bind(this);\r\n        this.handleCancelContextMenu = this.handleCancelContextMenu.bind(this);\r\n        this.fitToParent = this.fitToParent.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ScripletManager.selectScriplet(this.props.scripletId).then(result => {\r\n            if (!result)\r\n                return;\r\n\r\n            this.setState({isReadyToMount: true});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.fitToParent);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isReadyToMount) {\r\n            window.addEventListener('resize', this.fitToParent);\r\n            this.fitToParent();\r\n\r\n            const stage = this.stage.current?.getStage();\r\n            if (stage) {\r\n                const fontAwesomeObserver = new FontFaceObserver(\"Font Awesome 5 Free\");\r\n                // This is necessary to show the fontawesome icons at start\r\n                fontAwesomeObserver.load().then(() => {\r\n                    console.log(\"Font Awesome 5 has loaded!\");\r\n                    stage.draw();\r\n                }, () => {\r\n                    console.error(\"Font Awesome 5 has not loaded!\");\r\n                });\r\n            }\r\n\r\n            this.setState({isReadyToMount: false, isReady: true});\r\n        }\r\n\r\n        if (this.state.isDirtyDOM) {\r\n            this.setState({isDirtyDOM: false});\r\n        }\r\n\r\n        const id = this.props.scripletId;\r\n        if (this.state.selectedId !== id) {\r\n            ScripletManager.selectScriplet(id).then(result => {\r\n                if (!result)\r\n                    return;\r\n                \r\n                this.setState({selectedId: id});\r\n            });\r\n        }\r\n    }\r\n\r\n    updateDOM() {\r\n        this.setState({isDirtyDOM: true});\r\n    }\r\n\r\n    addNodeItem(schemaId: string, x?: number, y?: number, customName?: string, variableId?: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const stage = this.stage.current?.getStage();\r\n        if (!stage) {\r\n            console.error(`The konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const pointerPos = stage.getPointerPosition();\r\n        if (!pointerPos) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        pointerPos.x = ((x ?? pointerPos.x) - stage.x()) / stage.scaleX();\r\n        pointerPos.y = ((y ?? pointerPos.y) - stage.y()) / stage.scaleY();\r\n\r\n        scriplet.addNode(pointerPos.x, pointerPos.y, schemaId, [], [], [], new Map<number, ItemSlotPair[]>(), [], customName, variableId);\r\n        this.handleCancelContextMenu();\r\n        this.updateDOM();\r\n    }\r\n\r\n    deleteNodeItem(id: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(id);\r\n        if (!item) {\r\n            console.error(`The node item of id '${id}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema of node item '${id}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!schema.isDeletable) {\r\n            console.error(`This schema cannot be deleted.`);\r\n            return;\r\n        }\r\n\r\n        // Delete the node connections to other nodes too\r\n        if (NodeConnections.deleteAllConnections(id)) {\r\n            scriplet.deleteNode(id);\r\n            this.updateDOM();\r\n        }\r\n    }\r\n\r\n    // Should only happen on drag end, but node connections won't follow anymore if not done on drag move\r\n    // TODO: Optimize this!\r\n    handleDragNode(itemId: number, x: number, y: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const node = scriplet.getNode(itemId);\r\n        if (!node) {\r\n            console.error(`The node of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        node.x = x;\r\n        node.y = y;\r\n\r\n        scriplet.items.set(itemId, node);\r\n\r\n        // TODO: This lags! If possible, access the edges (konva path) directly and change the coords there\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleDeleteEdge(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        NodeConnections.deleteConnection(inputItemId, inputSlotId, outputItemId, outputSlotId);\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleDeleteFlowEdge(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        NodeConnections.deleteFlowConnection(inputItemId, inputSlotId, outputItemId, outputSlotId);\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleZoom(event: KonvaEventObject<WheelEvent>) {\r\n        event.evt.preventDefault();\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva Stage could not be found.`);\r\n            return;\r\n        }\r\n            \r\n        const oldScale: number = stage.scaleX();\r\n        const scaleBy = 1.1;\r\n        const pointer = stage.getPointerPosition();\r\n        if (!pointer) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const mousePosition = {\r\n            x: (pointer.x - stage.x()) / oldScale,\r\n            y: (pointer.y - stage.y()) / oldScale\r\n        };\r\n\r\n        const newScale = event.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        stage.scale({ x: newScale, y: newScale});\r\n\r\n        const newPos = {\r\n            x: pointer.x - mousePosition.x * newScale,\r\n            y: pointer.y - mousePosition.y * newScale\r\n        };\r\n        stage.position(newPos);\r\n        stage.batchDraw();\r\n    }\r\n\r\n    handleContextMenu(event: KonvaEventObject<PointerEvent>) {\r\n        if (event.target.getType() !== \"Stage\")\r\n            return;\r\n        const stage = event.target.getStage();\r\n        const layer: Konva.Layer | null = event.target.getChildren(item => item.getAttr(\"data-name\") === \"context-menu-layer\")[0];\r\n        if (!layer || !stage) {\r\n            console.error(`Either the Konva layer or Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({isContextMenuShown: true, contextMenuPos: {x: event.evt.pageX, y: event.evt.pageY}});\r\n    }\r\n\r\n    handleCancelContextMenu() {\r\n        this.setState({isContextMenuShown: false});\r\n    }\r\n\r\n    fitToParent() {\r\n        const container = this.stageContainer.current;\r\n        const stage = this.stage.current;\r\n        if (!container || !stage) {\r\n            console.error(`Either the referenced container or referenced stage could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const stageObj = stage.getStage();\r\n        stageObj.width(container.offsetWidth);\r\n        stageObj.height(container.offsetHeight);\r\n        stageObj.draw();\r\n    }\r\n    \r\n    render() {\r\n        const { isReadyToMount, isReady, isContextMenuShown, contextMenuPos } = this.state;\r\n\r\n        if (!isReadyToMount && !isReady)\r\n            return null;\r\n\r\n        const rowHeight = 40;\r\n        const topBarHeight = 30;\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <>\r\n                <div ref={this.stageContainer} className=\"main\">\r\n                    <PortalStage ref={this.stage}\r\n                        className=\"bg-gray-200\"\r\n                        onWheel={(event: KonvaEventObject<WheelEvent>) => {\r\n                            this.handleZoom(event);\r\n                            this.handleCancelContextMenu();\r\n                            KonvaForm.cancel();\r\n                        }}\r\n                        onContextMenu={(event: KonvaEventObject<PointerEvent>) => {\r\n                            event.evt.preventDefault();\r\n                            event.cancelBubble = true;\r\n\r\n                            this.handleContextMenu(event);\r\n                        }}\r\n                        onClick={(event: KonvaEventObject<MouseEvent>) => {\r\n                            this.handleCancelContextMenu();\r\n                            KonvaForm.cancel();\r\n                        }}\r\n                        onDragStart={(event: KonvaEventObject<DragEvent>)  => {\r\n                            this.handleCancelContextMenu();\r\n                            KonvaForm.cancel();\r\n                        }}\r\n                        draggable>\r\n                        <PortalLayer id=\"edges-layer\">\r\n                        </PortalLayer>\r\n                        <Layer>\r\n                            {[...scriplet.getNodes()].map(item => {\r\n                            const schema = item.schema;\r\n                            if (!schema) {\r\n                                console.error(`The schema for node item '${item.id}' could not be found.`);\r\n                                return null;\r\n                            }\r\n                            const inputSlots = NodeConnections.getInputConnections(item.id);\r\n                            const inputFlowSlots = NodeConnections.getInputFlowConnections(item.id);\r\n                            return (\r\n                                <Group key={`node-${item.id}`}>\r\n                                    {inputSlots.map(conn => {\r\n                                    if (!conn)\r\n                                        return null;\r\n                                    const otherItem = scriplet.getNode(conn.itemId);\r\n                                    if (!otherItem) {\r\n                                        console.error(`The node item of id '${conn.itemId}' could not be found.`);\r\n                                        return null;\r\n                                    }\r\n                                    const otherSchema = otherItem.schema;\r\n                                    if (!otherSchema) {\r\n                                        console.error(`The schema for node item '${otherItem.id}' could not be found.`);\r\n                                        return null;\r\n                                    }\r\n                                    return(\r\n                                        <Portal key={`edge-${item.id}-${conn.id}-${conn.itemId}-${conn.slotId}`} \r\n                                                containerId=\"edges-layer\">\r\n                                            <Edge \r\n                                                startPos={{x: otherItem.x, y: otherItem.y + (conn.slotId * rowHeight) + topBarHeight}}\r\n                                                endPos={{x: item.x, y: item.y + (conn.id * rowHeight) + topBarHeight}}\r\n                                                nodeWidthOther={otherSchema.width}\r\n                                                nodeHeight={rowHeight}\r\n                                                handleOnClick={() => this.handleDeleteEdge(item.id, conn.id, conn.itemId, conn.slotId)}>\r\n                                                {(midpointPos, isHovered) => (\r\n                                                    <>\r\n                                                        <Rect visible={isHovered}\r\n                                                            x={midpointPos.x - 12}\r\n                                                            y={midpointPos.y - 10}\r\n                                                            width={24}\r\n                                                            height={16}\r\n                                                            fill={Colors.Gray[800]}\r\n                                                            listening={false} />\r\n                                                        <Text visible={isHovered}\r\n                                                            x={midpointPos.x - 12}\r\n                                                            y={midpointPos.y - 10}\r\n                                                            width={24}\r\n                                                            height={19}\r\n                                                            text=\"&#215;\"\r\n                                                            fontStyle=\"bold\"\r\n                                                            fontSize={20}\r\n                                                            align=\"center\"\r\n                                                            verticalAlign=\"middle\"\r\n                                                            fill={Colors.Gray[100]}\r\n                                                            listening={false} />\r\n                                                    </>\r\n                                                )}\r\n                                            </Edge>\r\n                                        </Portal>\r\n                                    );\r\n                                    })}\r\n                                    {inputFlowSlots.map(conn => {\r\n                                    if (!conn)\r\n                                        return null;\r\n                                    const otherItem = scriplet.getNode(conn.itemId);\r\n                                    if (!otherItem) {\r\n                                        console.error(`The item of id '${conn.itemId}' could not be found.`);\r\n                                        return null;\r\n                                    }\r\n                                    const otherSchema = otherItem.schema;\r\n                                    if (!otherSchema) {\r\n                                        console.error(`The schema for node item '${otherItem.id}' could not be found.`);\r\n                                        return null;\r\n                                    }\r\n                                    return(\r\n                                        <Portal key={`edge-flow-${item.id}-${conn.id}-${conn.itemId}-${conn.slotId}`} \r\n                                                containerId=\"edges-layer\">\r\n                                            <Edge \r\n                                                startPos={{x: otherItem.x, y: otherItem.y + (conn.slotId * rowHeight) + topBarHeight}}\r\n                                                endPos={{x: item.x, y: item.y + (conn.id * rowHeight) + topBarHeight}}\r\n                                                nodeWidthOther={otherSchema.width}\r\n                                                nodeHeight={rowHeight}\r\n                                                handleOnClick={() => this.handleDeleteFlowEdge(item.id, conn.id, conn.itemId, conn.slotId)}>\r\n                                                {(midpointPos, isHovered) => (\r\n                                                    <>\r\n                                                        <Rect visible={isHovered}\r\n                                                            x={midpointPos.x - 12}\r\n                                                            y={midpointPos.y - 10}\r\n                                                            width={24}\r\n                                                            height={16}\r\n                                                            fill={Colors.Gray[800]}\r\n                                                            listening={false} />\r\n                                                        <Text visible={isHovered}\r\n                                                            x={midpointPos.x - 12}\r\n                                                            y={midpointPos.y - 10}\r\n                                                            width={24}\r\n                                                            height={19}\r\n                                                            text=\"&#215;\"\r\n                                                            fontStyle=\"bold\"\r\n                                                            fontSize={20}\r\n                                                            align=\"center\"\r\n                                                            verticalAlign=\"middle\"\r\n                                                            fill={Colors.Gray[100]}\r\n                                                            listening={false} />\r\n                                                    </>\r\n                                                )}\r\n                                            </Edge>\r\n                                        </Portal>\r\n                                    );\r\n                                    })}\r\n                                    <Node item={item}\r\n                                        width={schema.width}\r\n                                        rowHeight={rowHeight}\r\n                                        topBarHeight={topBarHeight}\r\n                                        handleDragNode={this.handleDragNode}\r\n                                        deleteNodeItem={this.deleteNodeItem}\r\n                                        updateDOM={this.updateDOM} />\r\n                                </Group>\r\n                            );\r\n                            })}\r\n                        </Layer>\r\n                        <Layer data-name=\"context-menu-layer\">\r\n                        </Layer>\r\n                    </PortalStage>\r\n                    <SchemaSelector isVisible={isContextMenuShown} x={contextMenuPos.x} y={contextMenuPos.y} addNodeItem={this.addNodeItem} />\r\n                </div>\r\n                <CodeEditor scripletId={this.props.scripletId} addNodeItem={this.addNodeItem} />\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport './assets/main.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { Switch, Route, useParams } from 'react-router-dom';\r\n\r\nimport SidebarNav from './components/SidebarNav';\r\nimport ScripletRoot from './components/ScripletRoot';\r\nimport CodeEditor from './components/CodeEditor';\r\n\r\nlibrary.add(fas);\r\n\r\nfunction App() {\r\n    return(\r\n        <div className=\"flex flex-col lg:flex-row\">\r\n            <SidebarNav />\r\n            <main>\r\n                <Switch>\r\n                    <Route path=\"/scriplet/:scripletId\">\r\n                        <ParamsProvider>\r\n                            {(scripletId) => (\r\n                                <>\r\n                                    <ScripletRoot scripletId={scripletId} />\r\n                                </>\r\n                            )}\r\n                        </ParamsProvider>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <div className=\"p-6 flex justify-center items-center h-screen w-screen\">\r\n                            <h1 className=\"text-xl text-gray-600\">\r\n                                Please select a scriplet first.\r\n                            </h1>\r\n                        </div>\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ParamsProps = {\r\n    children?(scripletId: number): React.ReactNode | null;\r\n}\r\n\r\nfunction ParamsProvider({children}: ParamsProps): JSX.Element {\r\n    const { scripletId } = useParams();\r\n    return (\r\n        <>\r\n            {children != null ? children(parseInt(scripletId)) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/vso\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}