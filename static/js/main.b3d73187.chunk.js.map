{"version":3,"sources":["extensions/array.extensions.ts","managers/ScripletManager.tsx","managers/NodeConnections.tsx","models/NodeSlot.ts","utils/Types.tsx","managers/NodeSchemaManager.tsx","utils/Colors.tsx","models/NodeSchema.ts","managers/Console.ts","managers/VariableManager.tsx","models/NodeItem.ts","models/Scriplet.ts","managers/VisualScriptingDB.ts","components/SidebarNav.tsx","utils/KonvaUtils.ts","components/KonvaForm.tsx","managers/SlotConfigManager.ts","components/NodeHandle.tsx","components/NodeSlot.tsx","components/Node.tsx","components/Edge.tsx","managers/CategoryManager.ts","components/SchemaSelector.tsx","components/ScripletRoot.tsx","components/CodeEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Array","prototype","indexOfWhen","predicate","i","this","length","currentScriplet","id","VisualScriptingDB","getScriplet","then","scriplet","catch","error","console","inputItemId","inputSlotId","ScripletManager","inputItem","getNode","inputSlot","schema","inputSlots","find","entry","outputItemId","outputSlotId","outputItem","outputSlot","outputSlots","Map","isCorrectType","type","isConnectable","otherOutput","getInputConnection","deleteConnection","itemId","slotId","setInputConnection","setOutputConnection","updateNodes","deleteInputConnection","deleteOutputConnection","toItem","some","result","conn","checkGraphCycleExists","inputFlowSlot","inputFlowSlots","outputFlowSlot","outputFlowSlots","getInputFlowConnection","deleteFlowConnection","setInputFlowConnection","otherInput","getOutputFlowConnection","setOutputFlowConnection","deleteInputFlowConnection","deleteOutputFlowConnection","nodeItem","forEach","connectedTo","inputFlow","outputFlow","NodeSlot","name","TypedNodeSlot","InputSlot","defaultValue","item","getInputValue","otherSlot","NodeConnections","getOutputSlot","evaluate","OutputSlot","FlowNodeSlot","InputFlowSlot","returnToSlot","OutputFlowSlot","getInputFlowSlot","evaluateSlot","returnSlot","Number","constructor","value","regex","match","parseInt","className","Boolean","Flow","nodeSchemas","schemaId","get","Error","createNew","values","Colors","Gray","100","200","300","400","500","600","700","800","900","Red","Orange","Yellow","Green","Teal","Blue","Indigo","Purple","Pink","BaseSchemaTypes","onMessage","SimpleEventDispatcher","func","subscribe","message","dispatch","color","AddSchema","target","origCtor","instantiate","args","newCtor","NodeSchemaManager","set","BaseNodeSchema","uniqueNamePrefix","width","isDeletable","Math","max","createNewSchema","Start","output1","goNext","StartFlowSchema","IfElse","input1","output2","thisSlot","getValue","IfElseSchema","ForLoop","outputFlow1","outputFlow2","input2","input3","input4","index","increment","start","end","returnTo","undefined","ForLoopSchema","ForLoopBreak","ForLoopBreakSchema","WhileLoop","limit","counter","WhileLoopSchema","Input","InputSchema","Output","OutputSchema","InputNumber","InputNumberSchema","PrintNumber","Console","log","PrintNumberSchema","PrintBoolean","PrintBooleanSchema","AddNumbers","AddNumbersSchema","SubtractNumbers","SubtractNumbersSchema","MultiplyNumbers","MultiplyNumbersSchema","DivideNumbers","DivideNumbersSchema","ModuloNumbers","num1","num2","ModuloNumbersSchema","PowNumbers","pow","PowNumbersSchema","SqrtNumber","sqrt","SqrtNumberSchema","CeilNumber","ceil","CeilNumberSchema","FloorNumber","floor","FloorNumberSchema","LessThanNumbers","LessThanNumbersSchema","LessThanEqualNumbers","LessThanEqualNumbersSchema","GreaterThanNumbers","GreaterThanNumbersSchema","GreaterThanEqualNumbers","GreaterThanEqualNumbersSchema","EqualNumbers","EqualNumbersSchema","NotEqualNumbers","NotEqualNumbersSchema","AndBoolean","AndBooleanSchema","OrBoolean","OrBooleanSchema","EqualBoolean","EqualBooleanSchema","NotEqualBoolean","NotEqualBooleanSchema","NotBoolean","NotBooleanSchema","typeCount","getBaseSchema","count","NodeItem","x","y","inputValues","customName","variableName","VariableManager","getNextVariableName","getNewSchema","Object","defineProperties","enumerable","writable","filter","slot","push","pair","Scriplet","items","itemCounter","addNodes","reloadOnFinish","nodes","node","key","updateScriplet","window","location","reload","newNode","convertToNodeItem","deleteNodes","itemIds","delete","scriplets","version","stores","open","table","mapToClass","seedData","toArray","addScriplet","add","changes","update","where","equals","modify","ref","Dexie","SidebarNav","props","state","isNavMenuOpen","isSidebarOpen","openNavMenu","bind","closeNavMenu","toggleNavMenu","openSidebar","closeSidebar","toggleSidebar","handleOnScripletCreate","getScriplets","setState","to","icon","onClick","map","noScrollX","React","Component","KonvaUtils","event","cursorType","stage","getStage","container","style","cursor","KonvaForm","cancelInput","Dropdown","cancelDropdown","showInput","onHover","onHoverExit","height","fontSize","padding","textColor","hoverColor","borderRadius","zIndex","onChange","scale","scaleX","top","absolutePosition","left","input","document","createElement","body","appendChild","position","min","innerWidth","paddingLeft","backgroundColor","focus","onchange","ev","inputElement","setCursor","layer","currentTarget","getLayer","children","setAttr","draw","bgColor","fontStyle","onMouseEnter","onMouseLeave","cancelBubble","onTap","fill","cornerRadius","verticalAlign","text","parentNode","removeChild","defaultProps","HandleType","InputType","selectedIndex","showDropdown","dropdown","option","innerText","dropdownElement","includes","configs","numberConfig","handleType","Circle","handleBorderColor","handleFillColor","inputType","defaultInputValue","initialValue","fromString","convertFromString","toString","convertToString","booleanConfig","flowConfig","Arrow","None","NodeHandle","startPosition","onDragStart","onDragMove","onDragEnd","onMouseExit","cancel","thisCircle","parent","startPos","getPosition","endPos","pathData","path","Konva","Path","data","stroke","strokeWidth","isInput","midpointPos","isFlow","onConnect","destroy","pointerPos","getPointerPosition","screenX","screenY","elements","getAllIntersections","element","otherItemId","otherSlotId","elem","getAttr","slotType","radius","listening","data-type","data-slot-type","data-item-id","data-slot-id","draggable","InputSlotDOM","label","createRef","labelWidth","typeWidth","onInputChanged","current","onInputChange","config","SlotConfigManager","getConfig","val","inputConnection","OutputSlotDOM","outputConnections","offsetX","align","InputFlowSlotDOM","inputFlowConnection","OutputFlowSlotDOM","outputFlowConnection","Node","group","draggedHandlePath","isStateOpen","stateVisual","rowHeight","topBarHeight","handleDragNode","deleteNodeItem","updateDOM","maxLength","inputs","concat","outputs","inputTypeGuard","outputTypeGuard","output","from","it","Fragment","setInputValue","addConnection","getOutputConnections","addFlowConnection","Edge","isHovered","handleOnEnter","handleOnExit","nodeWidthOutput","nodeWidthOther","nodeHeight","handleOnClick","halfNodeHeight","onMouseDown","onTouchEnd","Category","subCategories","contentChildren","subCategory","cat","schemas","categoryRoot","currentCategory","idArr","split","getSubCategory","addContent","SchemaCategory","showChildren","toggleCategory","openCategory","closeCategory","category","depth","addNodeItem","toLowerCase","marginLeft","borderColor","child","stopPropagation","SchemaSelector","searchValue","schemaResults","getBaseSchemas","onSearchChange","onSearchReset","filterSearch","isVisible","rootCategory","CategoryManager","getRootSchemaCategory","innerHeight","ScripletRoot","stageContainer","isDirtyDOM","isReadyToMount","isReady","contextMenu","isContextMenuShown","contextMenuPos","nodeInitPos","handleDeleteEdge","handleDeleteFlowEdge","handleZoom","handleContextMenu","handleCancelContextMenu","fitToParent","selectScriplet","scripletId","removeEventListener","addEventListener","FontFaceObserver","load","addNode","deleteAllConnections","deleteNode","evt","preventDefault","oldScale","pointer","mousePosition","newScale","deltaY","newPos","batchDraw","getType","getChildren","scaleY","pageX","pageY","stageObj","offsetWidth","offsetHeight","onWheel","onContextMenu","getNodes","getInputConnections","getInputFlowConnections","otherItem","otherSchema","containerId","visible","data-name","require","jsbeautify","js_beautify","CodeEditor","codeResult","editorValue","indent_size","isCodeOpen","screenWidth","setScreenWidth","handleRun","handleClear","handleBeautifyCode","handleEvaluateNodes","openCode","closeCode","toggleCode","onMessageLog","startSchema","getStart","startSlot","success","prevState","innerHTML","ParamsProvider","useParams","library","fas","App","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","basename","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3d73187.chunk.js","sourcesContent":["declare global {\r\n    interface Array<T> {\r\n        removeIf(predicate: (input: T) => boolean): any;\r\n        indexOfWhen(predicate: (input: T) => boolean): any;\r\n    }\r\n}\r\n\r\nArray.prototype.indexOfWhen = function(predicate) {\r\n    let i = 0;\r\n    while (i < this.length) {\r\n        if (predicate(this[i]))\r\n            return i;\r\n        i++;\r\n    }\r\n}\r\n\r\nexport {};","import { Scriplet } from \"../models/Scriplet\";\r\nimport VisualScriptingDB from \"./VisualScriptingDB\";\r\n\r\nclass ScripletManager {\r\n    public currentScriplet: Scriplet | undefined;\r\n\r\n    // Current Scriplet can be undefined if none was selected yet\r\n    async selectScriplet(id: number): Promise<boolean> {\r\n        return await VisualScriptingDB.getScriplet(id).then(scriplet => {\r\n            this.currentScriplet = scriplet;\r\n            return true;\r\n        }).catch(error => {\r\n            console.error(`Something went wrong when getting the scriplet of id '${id}'. Error: ${error}`);\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ScripletManager();","import '../extensions/array.extensions';\r\nimport ScripletManager from './ScripletManager';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot, ItemSlotPair } from '../models/NodeSlot';\r\n\r\nexport class NodeConnection {\r\n    public inputId: number;\r\n    public inputIO: number;\r\n    public outputId: number;\r\n    public outputIO: number;\r\n\r\n    constructor(inputId: number, inputIO: number, outputId: number, outputIO: number) {\r\n        this.inputId = inputId;\r\n        this.inputIO = inputIO;\r\n        this.outputId = outputId;\r\n        this.outputIO = outputIO;\r\n\r\n        this.equals = this.equals.bind(this);\r\n    }\r\n\r\n    equals(conn: NodeConnection): boolean {\r\n        return conn.inputId === this.inputId && conn.inputIO === this.inputIO && conn.outputId === this.outputId && conn.outputIO === this.outputIO;\r\n    }\r\n}\r\n\r\n// TODO: Repurpose this to store ids on the node items themselves\r\nclass NodeConnections {\r\n    getInputSlot(inputItemId: number, inputSlotId: number): InputSlot | undefined {      \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return inputSlot;\r\n    }\r\n\r\n    getInputSlots(inputItemId: number): InputSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputSlots = inputItem.schema?.inputSlots;\r\n        if (!inputSlots) {\r\n            console.error(`The schema of node item '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputSlots;\r\n    }\r\n\r\n    getInputConnections(inputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputItem.inputSlots;\r\n    }\r\n\r\n    getOutputSlot(outputItemId: number, outputSlotId: number): OutputSlot | undefined {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The input slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return outputSlot;\r\n    }\r\n\r\n    getOutputSlots(outputItemId: number): OutputSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputSlots = outputItem.schema?.outputSlots;\r\n        if (!outputSlots) {\r\n            console.error(`The schema of node item '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputSlots;\r\n    }\r\n\r\n    getOutputConnections(outputItemId: number): Map<number, ItemSlotPair[]> {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return new Map<number, ItemSlotPair[]>();\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return new Map<number, ItemSlotPair[]>();\r\n        }\r\n\r\n        return outputItem.outputSlots;\r\n    }\r\n\r\n    addConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        if (inputItemId === outputItemId) {\r\n            console.error(`When adding connections, the input item id cannot be the same as the output item id.`);\r\n            return;\r\n        }\r\n        \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The output slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!inputSlot.isCorrectType(outputSlot.type))\r\n            return;\r\n\r\n        if (!inputSlot.isConnectable)\r\n            return;\r\n\r\n        // Check graph cycle here\r\n        /*\r\n        if (this.checkGraphCycleExists(inputItemId, outputItemId) || this.checkFlowGraphCycleExists(inputItemId, outputItemId)) {\r\n            console.error(`Cycle detected from ${inputItemId} to ${outputItemId}.`);\r\n            return;\r\n        }\r\n        */\r\n\r\n        const otherOutput = inputItem.getInputConnection(inputSlot.id);\r\n        if (otherOutput)\r\n            this.deleteConnection(inputItemId, inputSlotId, otherOutput.itemId, otherOutput.slotId);\r\n        \r\n        inputItem.setInputConnection(inputSlot.id, outputItemId, outputSlotId);\r\n        outputItem.setOutputConnection(outputSlot.id, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n\r\n        /*\r\n        const found = outputSlot.connectedToInputs.find(pair => pair.itemId === inputItemId && pair.slotId === inputSlotId);\r\n        if (!found)\r\n            outputSlot.connectedToInputs.push({id: outputSlot.id, itemId: inputItemId, slotId: inputSlotId});\r\n        */\r\n    }\r\n\r\n    deleteConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputSlot = inputItem.schema?.inputSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputSlot) {\r\n            console.error(`The input slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputSlot = outputItem.schema?.outputSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputSlot) {\r\n            console.error(`The input slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        /*\r\n        inputSlot.connectedToOutput = undefined;\r\n        outputSlot.connectedToInputs.removeIf(entry => entry.itemId === inputItemId && entry.slotId === inputSlotId);\r\n        */\r\n\r\n        inputItem.deleteInputConnection(inputSlotId);\r\n        outputItem.deleteOutputConnection(outputSlotId, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    private checkGraphCycleExists(inputItemId: number, outputItemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return true; // True is negative in this case\r\n        }\r\n\r\n        const toItem = scriplet.getNode(outputItemId);\r\n        if (!toItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return true;\r\n        }\r\n\r\n        if (toItem.inputSlots.length <= 0)\r\n            return false;\r\n        if (toItem.inputSlots.some(entry => entry.itemId === inputItemId))\r\n            return true;\r\n\r\n        var result = false;\r\n\r\n        for (var i = 0; i < toItem.inputSlots.length; i++) {\r\n            const conn = toItem.inputSlots[i];\r\n            if (!conn)\r\n                continue;\r\n            const id = conn.itemId;\r\n            result = this.checkGraphCycleExists(inputItemId, id);\r\n            if (result)\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getInputFlowSlot(inputItemId: number, inputSlotId: number): InputFlowSlot | undefined {      \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return inputFlowSlot;\r\n    }\r\n\r\n    getInputFlowSlots(inputItemId: number): InputFlowSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputFlowSlots = inputItem.schema?.inputFlowSlots;\r\n        if (!inputFlowSlots) {\r\n            console.error(`The schema of node item '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputFlowSlots;\r\n    }\r\n\r\n    getInputFlowConnections(inputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return inputItem.inputFlowSlots;\r\n    }\r\n\r\n    getOutputFlowSlot(outputItemId: number, outputSlotId: number): OutputFlowSlot | undefined {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        return outputFlowSlot;\r\n    }\r\n\r\n    getOutputFlowSlots(outputItemId: number): OutputFlowSlot[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputFlowSlots = outputItem.schema?.outputFlowSlots;\r\n        if (!outputFlowSlots) {\r\n            console.error(`The schema of node item '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputFlowSlots;\r\n    }\r\n\r\n    getOutputFlowConnections(outputItemId: number): ItemSlotPair[] {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return [];\r\n        }\r\n\r\n        return outputItem.outputFlowSlots;\r\n    }\r\n    \r\n    addFlowConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        if (inputItemId === outputItemId) {\r\n            console.error(`When adding connections, the input item id cannot be the same as the output item id.`);\r\n            return;\r\n        }\r\n        \r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!inputFlowSlot.isConnectable)\r\n            return;\r\n\r\n        /*\r\n        if (this.checkFlowGraphCycleExists(inputItemId, outputItemId) || this.checkGraphCycleExists(inputItemId, outputItemId)) {\r\n            console.error(`Cycle detected from ${inputItemId} to ${outputItemId}.`);\r\n            return;\r\n        }\r\n        */\r\n\r\n        const otherOutput = inputItem.getInputFlowConnection(inputSlotId);\r\n        if (otherOutput)\r\n            this.deleteFlowConnection(inputItemId, inputSlotId, otherOutput.itemId, otherOutput.slotId);\r\n        \r\n        inputItem.setInputFlowConnection(inputFlowSlot.id, outputItemId, outputSlotId);\r\n        \r\n        const otherInput = outputItem.getOutputFlowConnection(outputSlotId);\r\n        if (otherInput)\r\n            this.deleteFlowConnection(otherInput.itemId, otherInput.slotId, outputItemId, outputSlotId);\r\n        \r\n        outputItem.setOutputFlowConnection(outputFlowSlot.id, inputItemId, inputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    deleteFlowConnection(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputItem = scriplet.getNode(inputItemId);\r\n        if (!inputItem) {\r\n            console.error(`The node item of id '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const inputFlowSlot = inputItem.schema?.inputFlowSlots.find(entry => entry.id === inputSlotId);\r\n        if (!inputFlowSlot) {\r\n            console.error(`The input flow slot of id '${inputSlotId}' from node item '${inputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputItem = scriplet.getNode(outputItemId);\r\n        if (!outputItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const outputFlowSlot = outputItem.schema?.outputFlowSlots.find(entry => entry.id === outputSlotId);\r\n        if (!outputFlowSlot) {\r\n            console.error(`The input flow slot of id '${outputSlotId}' from node item '${outputItemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        inputItem.deleteInputFlowConnection(inputSlotId);\r\n        outputItem.deleteOutputFlowConnection(outputSlotId);\r\n\r\n        scriplet.updateNodes();\r\n    }\r\n\r\n    private checkFlowGraphCycleExists(inputItemId: number, outputItemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return true; // True is negative in this case\r\n        }\r\n\r\n        const toItem = scriplet.getNode(outputItemId);\r\n        if (!toItem) {\r\n            console.error(`The node item of id '${outputItemId}' could not be found.`);\r\n            return true;\r\n        }\r\n\r\n        if (toItem.inputFlowSlots.length <= 0)\r\n            return false;\r\n        if (toItem.inputFlowSlots.some(entry => entry.itemId === inputItemId))\r\n            return true;\r\n\r\n        var result = false;\r\n\r\n        for (var i = 0; i < toItem.inputFlowSlots.length; i++) {\r\n            const conn = toItem.inputFlowSlots[i];\r\n            if (!conn)\r\n                continue;\r\n            const id = conn.itemId;\r\n            result = this.checkGraphCycleExists(inputItemId, id);\r\n            if (result)\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    deleteAllConnections(itemId: number): boolean {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return false;\r\n        }\r\n\r\n        const nodeItem = scriplet.getNode(itemId);\r\n        if (!nodeItem) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return false;\r\n        }\r\n\r\n        nodeItem.outputSlots.forEach(outputSlot => {\r\n            outputSlot.forEach(connectedTo => {\r\n                this.deleteConnection(connectedTo.itemId, connectedTo.slotId, itemId, connectedTo.id);\r\n            });\r\n        });\r\n\r\n        nodeItem.inputSlots.forEach(inputSlot => {\r\n            if (!inputSlot)\r\n                return;\r\n\r\n            this.deleteConnection(itemId, inputSlot.id, inputSlot.itemId, inputSlot.slotId);\r\n        });\r\n\r\n        nodeItem.inputFlowSlots.forEach(inputFlow => {\r\n            if (!inputFlow)\r\n                return;\r\n\r\n            this.deleteFlowConnection(itemId, inputFlow.id, inputFlow.itemId, inputFlow.slotId);\r\n        });\r\n\r\n        nodeItem.outputFlowSlots.forEach(outputFlow => {\r\n            if (!outputFlow)\r\n                return;\r\n            \r\n            this.deleteFlowConnection(outputFlow.itemId, outputFlow.slotId, itemId, outputFlow.id);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default new NodeConnections();","import NodeConnections from \"../managers/NodeConnections\";\r\nimport ScripletManager from \"../managers/ScripletManager\";\r\n\r\nexport type ItemSlotPair = {\r\n    id: number;\r\n    itemId: number;\r\n    slotId: number;\r\n}\r\n\r\nexport abstract class NodeSlot {\r\n    public id: number;\r\n    public name?: string;\r\n\r\n    constructor(id: number, name?: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport abstract class TypedNodeSlot extends NodeSlot {\r\n    public type: string;\r\n\r\n    constructor(id: number, type: string, name?: string) {\r\n        super(id, name);\r\n        this.type = type;\r\n    }\r\n\r\n    isCorrectType(type: string): boolean {\r\n        if (this.type === type)\r\n            return true;\r\n        return false;\r\n    }\r\n}\r\n\r\nexport type IdValuePair = {\r\n    id: number;\r\n    value?: any;\r\n}\r\n\r\nexport class InputSlot extends TypedNodeSlot {\r\n    //public connectedToOutput: ItemSlotPair | undefined;\r\n    // TODO: This value should also be serialized to db.\r\n    public defaultValue: any;\r\n    public isConnectable: boolean;\r\n\r\n    constructor(id: number, type: string, defaultValue: any, isConnectable?: boolean, name?: string) {\r\n        super(id, type, name);\r\n        this.defaultValue = defaultValue;\r\n        this.isConnectable = isConnectable ?? true;\r\n    }\r\n\r\n    getValue(itemId: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const connectedTo = item.getInputConnection(this.id);\r\n        if (!connectedTo)\r\n            return item.getInputValue(this.id) ?? this.defaultValue;\r\n\r\n        const otherSlot = NodeConnections.getOutputSlot(connectedTo.itemId, connectedTo.slotId);\r\n        if (!otherSlot) {\r\n            console.error(`The output slot '${connectedTo.slotId}' of node item '${connectedTo.itemId}' could not be found.`);\r\n            return item.getInputValue(this.id) ?? this.defaultValue;\r\n        }\r\n\r\n        return otherSlot.evaluate();\r\n    }\r\n}\r\n\r\n// TODO: Flow output slots cannot be connected to multiple Flow input slots\r\nexport class OutputSlot extends TypedNodeSlot {\r\n    //public connectedToInputs: ItemSlotPair[] = [];\r\n    public evaluate: () => any;\r\n\r\n    constructor(id: number, type: string, evaluate: () => any, name?: string) {\r\n        super(id, type, name);\r\n        this.evaluate = evaluate;\r\n    }\r\n}\r\n\r\nexport abstract class FlowNodeSlot extends NodeSlot { }\r\n\r\nexport class InputFlowSlot extends FlowNodeSlot {\r\n    //public connectedToOutput: ItemSlotPair | undefined;\r\n    public isConnectable: boolean;\r\n    private evaluate: (thisSlot: InputFlowSlot, returnToSlot?: ItemSlotPair) => any;\r\n\r\n    public returnToSlot: ItemSlotPair | undefined;\r\n\r\n    constructor(id: number, evaluate: (thisSlot: InputFlowSlot, returnToSlot?: ItemSlotPair) => any, isConnectable?: boolean, name?: string) {\r\n        super(id, name);\r\n        this.evaluate = evaluate;\r\n        this.isConnectable = isConnectable ?? true;\r\n    }\r\n\r\n    evaluateSlot(returnToSlot?: ItemSlotPair) {\r\n        this.evaluate(this, returnToSlot);\r\n    }\r\n}\r\n\r\nexport class OutputFlowSlot extends FlowNodeSlot {\r\n    //public connectedToInput: ItemSlotPair | undefined;\r\n\r\n    goNext(itemId: number, returnToSlot?: ItemSlotPair) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const connectedTo = item.getOutputFlowConnection(this.id);\r\n        if (connectedTo) {\r\n            const inputSlot = NodeConnections.getInputFlowSlot(connectedTo.itemId, connectedTo.slotId);\r\n            if (!inputSlot) {\r\n                console.error(`The input flow slot '${connectedTo.slotId}' of node item '${connectedTo.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            inputSlot.evaluateSlot(returnToSlot);\r\n            return;\r\n        }\r\n\r\n        if (returnToSlot) {\r\n            // Return to where the returnToSlot points to\r\n            const returnSlot = NodeConnections.getInputFlowSlot(returnToSlot.itemId, returnToSlot.slotId);\r\n            if (!returnSlot) {\r\n                console.error(`The input flow slot '${returnToSlot.slotId}' of node item '${returnToSlot.itemId}' could not be found.`)\r\n                return;\r\n            }\r\n\r\n            returnSlot.evaluateSlot();\r\n            return;\r\n        }\r\n    }\r\n}","export interface IAssignable<T> {\r\n    value: T;\r\n}\r\n\r\nexport interface IAssignableStatic<T> {\r\n    defaultValue: T;\r\n}\r\n\r\nexport interface IConvertible<T> {\r\n    fromString(value: string): void;\r\n    toString(): string;\r\n}\r\n\r\nexport interface IConvertibleStatic<T> {\r\n    convertFromString(value: string): T | undefined;\r\n    convertToString(value: T): string;\r\n}\r\n\r\nexport interface INamedClassStatic {\r\n    className: string;\r\n}\r\n\r\nexport function staticImplements<T>() {\r\n    return <U extends T>(constructor: U) => { return constructor; };\r\n}\r\n\r\n// TODO: Implement type converters\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<number>>()\r\n@staticImplements<IConvertibleStatic<number>>()\r\nexport class Number implements IAssignable<number> {\r\n    public static className: string = \"Number\";\r\n    public static defaultValue: number = 0;\r\n\r\n    public value: number;\r\n    \r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): number | undefined {\r\n        // TODO: Use regex to check input\r\n        const regex = \"^(-[1-9][0-9]*)|([0-9]+)$\";\r\n        const val = value.match(regex);\r\n        if (!val) {\r\n            console.error(`The input doesn't match the regex '${regex}'.`);\r\n            return;\r\n        }\r\n\r\n        return parseInt(value);\r\n    }\r\n\r\n    public static convertToString(value: number): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<string>>()\r\n@staticImplements<IConvertibleStatic<string>>()\r\nexport class String implements IAssignable<string> {\r\n    public static className: string = \"String\";\r\n    public static defaultValue: string = \"\";\r\n\r\n    public value: string;\r\n\r\n    constructor(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): string | undefined {\r\n        return value;\r\n    }\r\n\r\n    public static convertToString(value: string): string {\r\n        return value;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<boolean>>()\r\n@staticImplements<IConvertibleStatic<boolean>>()\r\nexport class Boolean implements IAssignable<boolean> {\r\n    public static className: string = \"Boolean\";\r\n    public static defaultValue: boolean = true;\r\n\r\n    public value: boolean;\r\n\r\n    constructor(value: boolean) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): boolean | undefined {\r\n        return value === \"true\" ? true : false;\r\n    }\r\n\r\n    public static convertToString(value: boolean): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<number>>()\r\n@staticImplements<IConvertibleStatic<number>>()\r\nexport class Flow implements IAssignable<number> {\r\n    public static className: string = \"Flow\";\r\n    public static defaultValue: number = -1;\r\n\r\n    public value: number;\r\n    \r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    public static convertFromString(value: string): number | undefined {\r\n        // TODO: Use regex to check input\r\n        const regex = \"^([0-9]+)$\";\r\n        const val = value.match(regex);\r\n        if (!val) {\r\n            console.error(`The input doesn't match the regex '${regex}'.`);\r\n            return;\r\n        }\r\n\r\n        return parseInt(value);\r\n    }\r\n\r\n    public static convertToString(value: number): string {\r\n        return `${value}`;\r\n    }\r\n}\r\n\r\n@staticImplements<INamedClassStatic>()\r\n@staticImplements<IAssignableStatic<any>>()\r\nexport class Any implements IAssignable<any> {\r\n    public static className: string = \"Any\";\r\n    public static defaultValue: any;\r\n\r\n    public value: any;\r\n\r\n    constructor(value: any) {\r\n        this.value = value;\r\n    }\r\n}","import { BaseNodeSchema } from \"../models/NodeSchema\";\r\n\r\nclass NodeSchemaManager {\r\n    public nodeSchemas: Map<string, BaseNodeSchema>;\r\n\r\n    constructor() {\r\n        this.nodeSchemas = new Map<string, BaseNodeSchema>();\r\n    }\r\n\r\n    getNewSchema(itemId: number, schemaId: string): BaseNodeSchema {\r\n        const schema = this.nodeSchemas.get(schemaId);\r\n        if (!schema)\r\n            throw new Error(`The schema '${schemaId}' could not be found.`);\r\n        return schema.createNew(itemId);\r\n    }\r\n\r\n    getBaseSchema(id: string): BaseNodeSchema {\r\n        const schema = this.nodeSchemas.get(id);\r\n        if (!schema)\r\n            throw new Error(`The schema '${id}' could not be found.`);\r\n        return schema;\r\n    }\r\n\r\n    getBaseSchemas(): BaseNodeSchema[] {\r\n        return [...this.nodeSchemas.values()];\r\n    }\r\n}\r\n\r\nexport default new NodeSchemaManager();","export default class Colors {\r\n    static Gray = {\r\n        100: '#f7fafc',\r\n        200: '#edf2f7',\r\n        300: '#e2e8f0',\r\n        400: '#cbd5e0',\r\n        500: '#a0aec0',\r\n        600: '#718096',\r\n        700: '#4a5568',\r\n        800: '#2d3748',\r\n        900: '#1a202c',\r\n    };\r\n    static Red = {\r\n        100: '#fff5f5',\r\n        200: '#fed7d7',\r\n        300: '#feb2b2',\r\n        400: '#fc8181',\r\n        500: '#f56565',\r\n        600: '#e53e3e',\r\n        700: '#c53030',\r\n        800: '#9b2c2c',\r\n        900: '#742a2a',\r\n    };\r\n    static Orange = {\r\n        100: '#fffaf0',\r\n        200: '#feebc8',\r\n        300: '#fbd38d',\r\n        400: '#f6ad55',\r\n        500: '#ed8936',\r\n        600: '#dd6b20',\r\n        700: '#c05621',\r\n        800: '#9c4221',\r\n        900: '#7b341e',\r\n    };\r\n    static Yellow = {\r\n        100: '#fffff0',\r\n        200: '#fefcbf',\r\n        300: '#faf089',\r\n        400: '#f6e05e',\r\n        500: '#ecc94b',\r\n        600: '#d69e2e',\r\n        700: '#b7791f',\r\n        800: '#975a16',\r\n        900: '#744210',\r\n    };\r\n    static Green = {\r\n        100: '#f0fff4',\r\n        200: '#c6f6d5',\r\n        300: '#9ae6b4',\r\n        400: '#68d391',\r\n        500: '#48bb78',\r\n        600: '#38a169',\r\n        700: '#2f855a',\r\n        800: '#276749',\r\n        900: '#22543d',\r\n    };\r\n    static Teal = {\r\n        100: '#e6fffa',\r\n        200: '#b2f5ea',\r\n        300: '#81e6d9',\r\n        400: '#4fd1c5',\r\n        500: '#38b2ac',\r\n        600: '#319795',\r\n        700: '#2c7a7b',\r\n        800: '#285e61',\r\n        900: '#234e52',\r\n    };\r\n    static Blue = {\r\n        100: '#ebf8ff',\r\n        200: '#bee3f8',\r\n        300: '#90cdf4',\r\n        400: '#63b3ed',\r\n        500: '#4299e1',\r\n        600: '#3182ce',\r\n        700: '#2b6cb0',\r\n        800: '#2c5282',\r\n        900: '#2a4365',\r\n    };\r\n    static Indigo = {\r\n        100: '#ebf4ff',\r\n        200: '#c3dafe',\r\n        300: '#a3bffa',\r\n        400: '#7f9cf5',\r\n        500: '#667eea',\r\n        600: '#5a67d8',\r\n        700: '#4c51bf',\r\n        800: '#434190',\r\n        900: '#3c366b',\r\n    };\r\n    static Purple = {\r\n        100: '#faf5ff',\r\n        200: '#e9d8fd',\r\n        300: '#d6bcfa',\r\n        400: '#b794f4',\r\n        500: '#9f7aea',\r\n        600: '#805ad5',\r\n        700: '#6b46c1',\r\n        800: '#553c9a',\r\n        900: '#44337a',\r\n    };\r\n    static Pink = {\r\n        100: '#fff5f7',\r\n        200: '#fed7e2',\r\n        300: '#fbb6ce',\r\n        400: '#f687b3',\r\n        500: '#ed64a6',\r\n        600: '#d53f8c',\r\n        700: '#b83280',\r\n        800: '#97266d',\r\n        900: '#702459',\r\n    };\r\n}","import { OutputSlot, InputSlot, InputFlowSlot, OutputFlowSlot } from \"./NodeSlot\";\r\nimport { Number, Boolean } from \"../utils/Types\";\r\nimport NodeSchemaManager from \"../managers/NodeSchemaManager\";\r\nimport Console from \"../managers/Console\";\r\n\r\nfunction AddSchema(target: Function) {\r\n    const origCtor = target;\r\n\r\n    function instantiate(constructor: any, ...args: any[]) {\r\n        return new constructor(...args);\r\n    }\r\n\r\n    const newCtor = function(...args: any[]) {\r\n        return instantiate(origCtor, ...args);\r\n    };\r\n\r\n    newCtor.prototype = origCtor.prototype;\r\n\r\n    const schema = newCtor() as BaseNodeSchema;\r\n    NodeSchemaManager.nodeSchemas.set(schema.id, schema.createNew(-1));\r\n}\r\n\r\nexport enum BaseSchemaTypes {\r\n    Start = \"Hidden/Start\",\r\n    IfElse = \"Base/ControlFlow/IfElse\",\r\n    ForLoop = \"Base/ControlFlow/ForLoop\",\r\n    ForLoopBreak = \"Base/ControlFlow/ForLoopBreak\",\r\n    WhileLoop = \"Base/ControlFlow/WhileLoop\",\r\n    Input = \"Hidden/Input\",\r\n    Output = \"Hidden/Output\",\r\n    PrintNumber = \"Base/Debug/PrintNumber\",\r\n    PrintBoolean = \"Base/Debug/PrintBoolean\",\r\n\r\n    InputNumber = \"Base/InputNumber\",\r\n    AddNumbers = \"Base/Math/Number/Add\",\r\n    SubtractNumbers = \"Base/Math/Number/Subtract\",\r\n    MultiplyNumbers = \"Base/Math/Number/Multiply\",\r\n    DivideNumbers = \"Base/Math/Number/Divide\",\r\n    ModuloNumbers = \"Base/Math/Number/Modulo\",\r\n    PowNumbers = \"Base/Math/Number/Power\",\r\n    SqrtNumber = \"Base/Math/Number/SquareRoot\",\r\n    CeilNumber = \"Base/Math/Number/Ceiling\",\r\n    FloorNumber = \"Base/Math/Number/Floor\",\r\n    LessThanNumbers = \"Base/Math/Number/LessThan\",\r\n    LessThanEqualNumbers = \"Base/Math/Number/LessThanEqual\",\r\n    GreaterThanNumbers = \"Base/Math/Number/GreaterThan\",\r\n    GreaterThanEqualNumbers = \"Base/Math/Number/GreaterThanEqual\",\r\n    EqualNumbers = \"Base/Math/Number/Equal\",\r\n    NotEqualNumbers = \"Base/Math/Number/NotEqual\",\r\n\r\n    AndBoolean = \"Base/Math/Boolean/And\",\r\n    OrBoolean = \"Base/Math/Boolean/Or\",\r\n    EqualBoolean = \"Base/Math/Boolean/Equal\",\r\n    NotEqualBoolean = \"Base/Math/Boolean/NotEqual\",\r\n    NotBoolean = \"Base/Math/Boolean/Not\",\r\n}\r\n\r\n// TODO: Possibly move all these things to a config file that is read by these and behavior is filled in\r\nexport abstract class BaseNodeSchema {\r\n    readonly id: string;\r\n    readonly name: string;\r\n    readonly uniqueNamePrefix: string;\r\n    readonly width: number;\r\n    //readonly hasVariable: boolean;\r\n    readonly inputFlowSlots: InputFlowSlot[];\r\n    readonly outputFlowSlots: OutputFlowSlot[];\r\n    readonly inputSlots: InputSlot[];\r\n    readonly outputSlots: OutputSlot[];\r\n\r\n    readonly isDeletable: boolean;\r\n\r\n    itemId: number = -1;\r\n\r\n    protected abstract createNewSchema(): BaseNodeSchema;\r\n\r\n    constructor(id: string, name: string, uniqueNamePrefix: string, width: number, inputFlowSlots: InputFlowSlot[], outputFlowSlots: OutputFlowSlot[], inputSlots: InputSlot[], outputSlots: OutputSlot[], isDeletable: boolean = true) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.uniqueNamePrefix = uniqueNamePrefix;\r\n        this.width = width;\r\n        this.inputFlowSlots = inputFlowSlots;\r\n        this.outputFlowSlots = outputFlowSlots;\r\n        this.inputSlots = inputSlots;\r\n        this.outputSlots = outputSlots;\r\n\r\n        this.isDeletable = isDeletable;\r\n    }\r\n\r\n    maxLength(): number {\r\n        return Math.max(this.inputFlowSlots.length + this.inputSlots.length, this.outputFlowSlots.length + this.outputSlots.length);\r\n    }\r\n\r\n    createNew(itemId: number): BaseNodeSchema {\r\n        const schema = this.createNewSchema();\r\n        schema.itemId = itemId;\r\n        return schema;\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class StartFlowSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.Start;\r\n        const name = \"Start\";\r\n        const uniqueNamePrefix = \"start\";\r\n\r\n        const output1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlowSlots = [output1];\r\n        const inputFlowSlots: InputFlowSlot[] = [new InputFlowSlot(0, () => {\r\n            output1.goNext(this.itemId);\r\n        }, false, \" \")];\r\n\r\n        super(id, name, uniqueNamePrefix, 120, inputFlowSlots, outputFlowSlots, [], [], false);\r\n    }\r\n\r\n    createNewSchema(): StartFlowSchema {\r\n        return new StartFlowSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class IfElseSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.IfElse;\r\n        const name = \"If/Else\";\r\n        const uniqueNamePrefix = \"ifElse\";\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue, true, \"Condition\");\r\n        const inputSlots = [input1];\r\n\r\n        const output1 = new OutputFlowSlot(0, \"True\");\r\n        const output2 = new OutputFlowSlot(1, \"False\");\r\n        const outputFlowSlots = [output1, output2];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (input1.getValue(this.itemId) === true)\r\n                output1.goNext(this.itemId, returnToSlot)\r\n            else\r\n                output2.goNext(this.itemId, returnToSlot);\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 220, inputFlowSlots, outputFlowSlots, inputSlots, []);\r\n    }\r\n\r\n    createNewSchema(): IfElseSchema {\r\n        return new IfElseSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ForLoopSchema extends BaseNodeSchema {\r\n    private start: number | undefined;\r\n    private end: number | undefined;\r\n    private increment: number | undefined;\r\n    private index: number;\r\n\r\n    constructor() {\r\n        const id = BaseSchemaTypes.ForLoop;\r\n        const name = \"For Loop\";\r\n        const uniqueNamePrefix = \"forLoop\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue, true, \"Start\");\r\n        const input3 = new InputSlot(2, Number.className, 10, true, \"End\");\r\n        const input4 = new InputSlot(3, Number.className, 1, true, \"Increment\");\r\n        const inputSlots = [input2, input3, input4];\r\n\r\n        const output3 = new OutputSlot(2, Number.className, () => {\r\n            // TODO: Kinda hackish to solve the problem below\r\n            return this.index - (this.increment ?? 1);\r\n        }, \"Index\");\r\n        const outputSlots = [output3];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.start == null || this.end == null || this.increment == null) {\r\n                this.start = input2.getValue(this.itemId);\r\n                this.end = input3.getValue(this.itemId);\r\n                this.increment = input4.getValue(this.itemId);\r\n                this.index = this.start ?? 0;\r\n            }\r\n            \r\n            if (this.index < (this.end ?? 0)) {\r\n                // TODO: This should really increment only after everything else is done.\r\n                this.index += this.increment ?? 1;\r\n                outputFlow1.goNext(this.itemId, {id: -1, itemId: this.itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.index = 0;\r\n                this.start = undefined;\r\n                this.end = undefined;\r\n                outputFlow2.goNext(this.itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.index = 0;\r\n    }\r\n\r\n    createNewSchema(): ForLoopSchema {\r\n        return new ForLoopSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ForLoopBreakSchema extends BaseNodeSchema {\r\n    private start: number | undefined;\r\n    private end: number | undefined;\r\n    private increment: number | undefined;\r\n    private index: number;\r\n\r\n    constructor() {\r\n        const id = BaseSchemaTypes.ForLoopBreak;\r\n        const name = \"For Loop Break\";\r\n        const uniqueNamePrefix = \"forLoopBreak\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input2 = new InputSlot(2, Number.className, Number.defaultValue, true, \"Start\");\r\n        const input3 = new InputSlot(3, Number.className, 10, true, \"End\");\r\n        const input4 = new InputSlot(4, Number.className, 1, true, \"Increment\");\r\n        const inputSlots = [input2, input3, input4];\r\n\r\n        const output3 = new OutputSlot(2, Number.className, () => {\r\n            // TODO: Kinda hackish to solve the problem below\r\n            return this.index - (this.increment ?? 1);\r\n        }, \"Index\");\r\n        const outputSlots = [output3];\r\n\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.start == null || this.end == null || this.increment == null) {\r\n                this.start = input2.getValue(this.itemId);\r\n                this.end = input3.getValue(this.itemId);\r\n                this.increment = input4.getValue(this.itemId);\r\n                this.index = this.start ?? 0;\r\n            }\r\n            \r\n            if (this.index < (this.end ?? 0)) {\r\n                // TODO: This should really increment only after everything else is done.\r\n                this.index += this.increment ?? 1;\r\n                outputFlow1.goNext(this.itemId, {id: -1, itemId: this.itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.index = 0;\r\n                this.start = undefined;\r\n                this.end = undefined;\r\n                outputFlow2.goNext(this.itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\");\r\n\r\n        const inputFlow5 = new InputFlowSlot(1, (thisSlot, returnToSlot) => {\r\n            const returnTo = thisSlot.returnToSlot;\r\n            thisSlot.returnToSlot = undefined;\r\n            this.index = 0;\r\n            this.start = undefined;\r\n            this.end = undefined;\r\n            outputFlow2.goNext(this.itemId, returnTo);\r\n        }, true, \"Break\");\r\n\r\n        const inputFlowSlots = [inputFlow1, inputFlow5];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.index = 0;\r\n    }\r\n\r\n    createNewSchema(): ForLoopBreakSchema {\r\n        return new ForLoopBreakSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class WhileLoopSchema extends BaseNodeSchema {\r\n    // This limit is so the while loop will still halt at some point instead of \r\n    // freezing the entire app. Can be set to 0 to run forever.\r\n    private limit: number | undefined;\r\n    private counter: number;\r\n    constructor() {\r\n        const id = BaseSchemaTypes.WhileLoop;\r\n        const name = \"While Loop\";\r\n        const uniqueNamePrefix = \"whileLoop\";\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Body\");\r\n        const outputFlow2 = new OutputFlowSlot(1, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1, outputFlow2];\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue, true, \"Condition\");\r\n        const input2 = new InputSlot(2, Number.className, 10000, true, \"Limit\");\r\n        const inputSlots = [input1, input2];\r\n\r\n        const outputSlots: OutputSlot[] = [];\r\n\r\n        const inputFlowSlots = [new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            if (!thisSlot.returnToSlot)\r\n                thisSlot.returnToSlot = returnToSlot;\r\n            if (this.limit == null) {\r\n                this.limit = input2.getValue(this.itemId);\r\n            }\r\n            \r\n            if (this.limit == null)\r\n                console.error(`The limit of while loop of id '${this.itemId}' is undefined, therefore this while loop won't run. Set it to 0 if it is intended to run forever.`);\r\n\r\n            if (input1.getValue(this.itemId) && this.limit != null && this.counter < (this.limit <= 0 ? 1 : this.limit)) {\r\n                if (this.limit > 0)\r\n                    this.counter += 1;\r\n\r\n                outputFlow1.goNext(this.itemId, {id: -1, itemId: this.itemId, slotId: thisSlot.id});\r\n            } else {\r\n                const returnTo = thisSlot.returnToSlot;\r\n                thisSlot.returnToSlot = undefined;\r\n                this.counter = 0;\r\n                this.limit = undefined;\r\n                outputFlow2.goNext(this.itemId, returnTo);\r\n            }\r\n        }, true, \"Entry\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n        this.counter = 0;\r\n    }\r\n\r\n    createNewSchema(): WhileLoopSchema {\r\n        return new WhileLoopSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class InputSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.Input;\r\n        const name = \"Input\";\r\n        const uniqueNamePrefix = \"input\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(this.itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 190, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): InputSchema {\r\n        return new InputSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class OutputSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.Output;\r\n        const name = \"Output\";\r\n        const uniqueNamePrefix = \"output\";\r\n        const inputSlots = [new InputSlot(0, Number.className, Number.defaultValue)];\r\n        const outputSlots: OutputSlot[] = [];\r\n\r\n        super(id, name, uniqueNamePrefix, 120, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): OutputSchema {\r\n        return new OutputSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class InputNumberSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.InputNumber;\r\n        const name = \"Input Number\";\r\n        const uniqueNamePrefix = \"inputNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue, false);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(this.itemId);\r\n        })];\r\n\r\n        super(id, name, uniqueNamePrefix, 190, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): InputNumberSchema {\r\n        return new InputNumberSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PrintNumberSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.PrintNumber;\r\n        const name = \"Print Number\";\r\n        const uniqueNamePrefix = \"printNum\";\r\n\r\n        const input1 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Number.className, () => {\r\n            return input1.getValue(this.itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            Console.log(input1.getValue(this.itemId));\r\n            outputFlow1.goNext(this.itemId, returnToSlot);\r\n        }, true, \"Entry\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): PrintNumberSchema {\r\n        return new PrintNumberSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PrintBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.PrintBoolean;\r\n        const name = \"Print Boolean\";\r\n        const uniqueNamePrefix = \"printBool\";\r\n\r\n        const input1 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(1, Boolean.className, () => {\r\n            return input1.getValue(this.itemId);\r\n        })];\r\n\r\n        const outputFlow1 = new OutputFlowSlot(0, \"Exit\");\r\n        const outputFlowSlots = [outputFlow1];\r\n        const inputFlow1 = new InputFlowSlot(0, (thisSlot, returnToSlot) => {\r\n            Console.log(input1.getValue(this.itemId));\r\n            outputFlow1.goNext(this.itemId, returnToSlot);\r\n        }, true, \"Entry\");\r\n        const inputFlowSlots = [inputFlow1];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, inputFlowSlots, outputFlowSlots, inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): PrintBooleanSchema {\r\n        return new PrintBooleanSchema();\r\n    }\r\n}\r\n\r\n// The base class for all addition \r\n// We have two choices:\r\n// - Extend from this AddSchema to make addition nodes for different object types\r\n//   - Can customize every aspect of the node\r\n// - Create a universal way to add same-typed objects together through interfaces\r\n//   - Will only need one universal addition node that uses the interface to add objects\r\n@AddSchema\r\nexport class AddNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.AddNumbers;\r\n        const name = \"Add Numbers\";\r\n        const uniqueNamePrefix = \"addNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            // TODO: Type check maybe?\r\n            return input1.getValue(this.itemId) + input2.getValue(this.itemId);\r\n        }, \"Sum\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 200, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): AddNumbersSchema {\r\n        return new AddNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SubtractNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.SubtractNumbers;\r\n        const name = \"Subtract Numbers\";\r\n        const uniqueNamePrefix = \"subtractNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(this.itemId) - input2.getValue(this.itemId);\r\n        }, \"Difference\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 220, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): SubtractNumbersSchema {\r\n        return new SubtractNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class MultiplyNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.MultiplyNumbers;\r\n        const name = \"Multiply Numbers\";\r\n        const uniqueNamePrefix = \"multiplyNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(this.itemId) * input2.getValue(this.itemId);\r\n        }, \"Product\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 210, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): MultiplyNumbersSchema {\r\n        return new MultiplyNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class DivideNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.DivideNumbers;\r\n        const name = \"Divide Numbers\";\r\n        const uniqueNamePrefix = \"divideNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, 1);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return input1.getValue(this.itemId) / (input2.getValue(this.itemId) || 1);\r\n        }, \"Quotient\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 210, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): DivideNumbersSchema {\r\n        return new DivideNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class ModuloNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.ModuloNumbers;\r\n        const name = \"Modulo Numbers\";\r\n        const uniqueNamePrefix = \"moduloNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            const num1 = input1.getValue(this.itemId);\r\n            const num2 = input2.getValue(this.itemId);\r\n            return ((num1 % num2) + num2) % num2;\r\n        }, \"Modulo\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): ModuloNumbersSchema {\r\n        return new ModuloNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class PowNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.PowNumbers;\r\n        const name = \"Power Numbers\";\r\n        const uniqueNamePrefix = \"powNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue, true, \"Base\");\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue, true, \"Exponent\");\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.pow(input1.getValue(this.itemId), input2.getValue(this.itemId));\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): PowNumbersSchema {\r\n        return new PowNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class SqrtNumberSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.SqrtNumber;\r\n        const name = \"Square Root Number\";\r\n        const uniqueNamePrefix = \"sqrtNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.sqrt(input1.getValue(this.itemId));\r\n        }, \"Sqrt\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): SqrtNumberSchema {\r\n        return new SqrtNumberSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class CeilNumberSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.CeilNumber;\r\n        const name = \"Ceiling Number\";\r\n        const uniqueNamePrefix = \"ceilNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.ceil(input1.getValue(this.itemId));\r\n        }, \"Ceil\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): CeilNumberSchema {\r\n        return new CeilNumberSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class FloorNumberSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.FloorNumber;\r\n        const name = \"Floor Number\";\r\n        const uniqueNamePrefix = \"floorNum\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Number.className, () => {\r\n            return Math.floor(input1.getValue(this.itemId));\r\n        }, \"Floor\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): FloorNumberSchema {\r\n        return new FloorNumberSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class LessThanNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.LessThanNumbers;\r\n        const name = \"Less Than Numbers\";\r\n        const uniqueNamePrefix = \"lessThanNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) < input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): LessThanNumbersSchema {\r\n        return new LessThanNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class LessThanEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.LessThanEqualNumbers;\r\n        const name = \"Less Than Equal Numbers\";\r\n        const uniqueNamePrefix = \"lessThanEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) <= input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): LessThanEqualNumbersSchema {\r\n        return new LessThanEqualNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GreaterThanNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.GreaterThanNumbers;\r\n        const name = \"Greater Than Numbers\";\r\n        const uniqueNamePrefix = \"greaterThanNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) > input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): GreaterThanNumbersSchema {\r\n        return new GreaterThanNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class GreaterThanEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.GreaterThanEqualNumbers;\r\n        const name = \"Greater Than Equal Numbers\";\r\n        const uniqueNamePrefix = \"greaterThanEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) >= input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): GreaterThanEqualNumbersSchema {\r\n        return new GreaterThanEqualNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class EqualNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.EqualNumbers;\r\n        const name = \"Equal Numbers\";\r\n        const uniqueNamePrefix = \"equalNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) === input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): EqualNumbersSchema {\r\n        return new EqualNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotEqualNumbersSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.NotEqualNumbers;\r\n        const name = \"Not Equal Numbers\";\r\n        const uniqueNamePrefix = \"notEqualNums\";\r\n        const input1 = new InputSlot(0, Number.className, Number.defaultValue);\r\n        const input2 = new InputSlot(1, Number.className, Number.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) !== input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): NotEqualNumbersSchema {\r\n        return new NotEqualNumbersSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class AndBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.AndBoolean;\r\n        const name = \"And Boolean\";\r\n        const uniqueNamePrefix = \"andBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) && input2.getValue(this.itemId);\r\n        }, \"And\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): AndBooleanSchema {\r\n        return new AndBooleanSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class OrBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.OrBoolean;\r\n        const name = \"Or Boolean\";\r\n        const uniqueNamePrefix = \"orBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) || input2.getValue(this.itemId);\r\n        }, \"Or\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): OrBooleanSchema {\r\n        return new OrBooleanSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class EqualBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.EqualBoolean;\r\n        const name = \"Equal Boolean\";\r\n        const uniqueNamePrefix = \"equalBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) === input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): EqualBooleanSchema {\r\n        return new EqualBooleanSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotEqualBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.NotEqualBoolean;\r\n        const name = \"Not Equal Boolean\";\r\n        const uniqueNamePrefix = \"notEqualBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const input2 = new InputSlot(1, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1, input2];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return input1.getValue(this.itemId) !== input2.getValue(this.itemId);\r\n        }, \"Result\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): NotEqualBooleanSchema {\r\n        return new NotEqualBooleanSchema();\r\n    }\r\n}\r\n\r\n@AddSchema\r\nexport class NotBooleanSchema extends BaseNodeSchema {\r\n    constructor() {\r\n        const id = BaseSchemaTypes.NotBoolean;\r\n        const name = \"Not Boolean\";\r\n        const uniqueNamePrefix = \"notBool\";\r\n        const input1 = new InputSlot(0, Boolean.className, Boolean.defaultValue);\r\n        const inputSlots = [input1];\r\n        const outputSlots = [new OutputSlot(0, Boolean.className, () => {\r\n            return !input1.getValue(this.itemId);\r\n        }, \"Not\")];\r\n\r\n        super(id, name, uniqueNamePrefix, 205, [], [], inputSlots, outputSlots);\r\n    }\r\n\r\n    createNewSchema(): NotBooleanSchema {\r\n        return new NotBooleanSchema();\r\n    }\r\n}","import Colors from \"../utils/Colors\";\r\nimport { SimpleEventDispatcher, ISimpleEventHandler } from \"ste-simple-events\";\r\n\r\nexport type ConsoleMessage = {\r\n    message: string;\r\n    color: string;\r\n}\r\n\r\nclass Console {\r\n    private onMessage = new SimpleEventDispatcher<ConsoleMessage>();\r\n\r\n    subscribe(func: ISimpleEventHandler<ConsoleMessage>) {\r\n        this.onMessage.subscribe(func)\r\n    }\r\n\r\n    log(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Gray[100]});\r\n    }\r\n\r\n    error(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Red[500]});\r\n    }\r\n\r\n    success(message: string) {\r\n        this.onMessage.dispatch({message: message, color: Colors.Green[400]});\r\n    }\r\n}\r\n\r\nexport default new Console();","import NodeSchemaManager from \"./NodeSchemaManager\";\r\n\r\nclass VariableManager {\r\n    private typeCount: Map<string, number>;\r\n\r\n    constructor() {\r\n        this.typeCount = new Map<string, number>();\r\n    }\r\n\r\n    getNextVariableName(schemaId: string): string | undefined {\r\n        const schema = NodeSchemaManager.getBaseSchema(schemaId);\r\n        if (!schema) {\r\n            console.error(`The schema of id '${schemaId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        let count = this.typeCount.get(schemaId);\r\n        // This shouldn't be written as !count because having a value of 0 will always return true.\r\n        if (count == null) {\r\n            this.typeCount.set(schemaId, 1);\r\n            count = 1;\r\n        }\r\n        else\r\n            this.typeCount.set(schemaId, count + 1);\r\n\r\n        return `${schema.uniqueNamePrefix}${count}`;\r\n    }\r\n}\r\n\r\nexport default new VariableManager();","import { BaseNodeSchema } from './NodeSchema';\r\nimport NodeSchemaManager from '../managers/NodeSchemaManager';\r\nimport VariableManager from '../managers/VariableManager';\r\nimport { IdValuePair, ItemSlotPair } from './NodeSlot';\r\n\r\n// TODO: Implement slot connections here instead because...\r\n// When getting a node from the scriplet, it always creates a new schema,\r\n// therefore the slot connections added there when connecting nodes are not saved.\r\nexport interface INodeItem {\r\n    id: number;\r\n    customName?: string;\r\n    x: number;\r\n    y: number;\r\n    schemaId: string;\r\n    inputValues: IdValuePair[];\r\n    inputSlots: ItemSlotPair[];\r\n    inputFlowSlots: ItemSlotPair[];\r\n    outputSlots: Map<number, ItemSlotPair[]>;\r\n    outputFlowSlots: ItemSlotPair[];\r\n}\r\n\r\n// TODO: When position changes, new x and y coords are not saved to db\r\nexport class NodeItem implements INodeItem {\r\n    public id: number;\r\n    public customName?: string;\r\n    public x: number;\r\n    public y: number;\r\n    public schemaId: string;\r\n    public inputValues: IdValuePair[];\r\n    public inputSlots: ItemSlotPair[];\r\n    public inputFlowSlots: ItemSlotPair[];\r\n    public outputSlots: Map<number, ItemSlotPair[]>;\r\n    public outputFlowSlots: ItemSlotPair[];\r\n\r\n    public variableName: string;\r\n    public schema: BaseNodeSchema;\r\n\r\n    constructor(id: number, x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string) {\r\n        this.id = id;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.schemaId = schemaId;\r\n        this.inputValues = inputValues;\r\n        this.inputSlots = inputSlots;\r\n        this.inputFlowSlots = inputFlowSlots;\r\n        this.outputSlots = outputSlots;\r\n        this.outputFlowSlots = outputFlowSlots;\r\n        \r\n        if (customName)\r\n            this.customName = customName;\r\n\r\n        this.variableName = VariableManager.getNextVariableName(schemaId) ?? \"undefined\";\r\n        this.schema = NodeSchemaManager.getNewSchema(id, schemaId);\r\n\r\n        // Necessary so the variableName and schema are not serialized to db\r\n        Object.defineProperties(this, {\r\n            variableName: {enumerable: false, writable: true},\r\n            schema: {enumerable: false, writable: true}\r\n        });\r\n    }\r\n\r\n    getInputConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.inputSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setInputConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.inputSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Input slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteInputConnection(slotId: number) {\r\n        this.inputSlots = this.inputSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n\r\n    // I'm an idiot... I really made just one field to store the input\r\n    // value of a node when a node can have multiple input slots... *facepalm*\r\n    getInputValue(slotId: number): any {\r\n        const result = this.inputValues.filter(value => value.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input value '${slotId}' of node item '${this.id}' can only have 1 value. Will return the first value found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0].value;\r\n    }\r\n\r\n    setInputValue(slotId: number, value?: any) {\r\n        const result = this.inputValues.filter(value => value.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input value '${slotId}' of node item '${this.id}' can only have 1 value. Will return the first value found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputValues.push({id: slotId, value: value});\r\n            return;\r\n        }\r\n\r\n        const val = result[0];\r\n        val.value = value;\r\n    }\r\n\r\n    getOutputConnections(slotId: number): ItemSlotPair[] {\r\n        // TODO: Also check if all slots in a subset have the same ids\r\n        const result = this.outputSlots.get(slotId);\r\n        if (!result)\r\n            return [];\r\n\r\n        return result;\r\n    }\r\n\r\n    setOutputConnection(id: number, itemId: number, slotId: number) {\r\n        const result = this.outputSlots.get(id);\r\n        if (!result) {\r\n            this.outputSlots.set(id, [{id, itemId, slotId}]);\r\n            return;\r\n        }\r\n\r\n        const similar = result.find(pair => pair.id === id && pair.itemId === itemId && pair.slotId === slotId);\r\n        if (similar) {\r\n            console.error(`The connection '${itemId}, ${slotId}' is already connected to node item slot '${this.id}, ${id}'. Something in the code may have caused this duplication.`);\r\n            return;\r\n        }\r\n\r\n        result.push({id, itemId, slotId});\r\n    }\r\n\r\n    deleteOutputConnection(id: number, itemId: number, slotId: number) {\r\n        let result = this.outputSlots.get(id);\r\n        if (result) {\r\n            result = result.filter(pair => pair.id !== id && pair.itemId !== itemId && pair.slotId !== slotId);\r\n            this.outputSlots.set(id, result);\r\n        }\r\n    }\r\n\r\n    getInputFlowConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.inputFlowSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Input flow slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setInputFlowConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.inputFlowSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Input flow slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.inputFlowSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteInputFlowConnection(slotId: number) {\r\n        this.inputFlowSlots = this.inputFlowSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n\r\n    getOutputFlowConnection(slotId: number): ItemSlotPair | undefined {\r\n        const result = this.outputFlowSlots.filter(slot => slot.id === slotId);\r\n        if (result.length > 1)\r\n            console.error(`Output flow slot '${slotId}' of node item '${this.id}' can only have 1 connection. Will return the first connection found.`);\r\n\r\n        if (result.length < 1)\r\n            return;\r\n        \r\n        return result[0];\r\n    }\r\n\r\n    setOutputFlowConnection(id: number, itemId: number, slotId: number) {\r\n        // TODO: Save changes to db\r\n        const result = this.outputFlowSlots.filter(slot => slot.id === id);\r\n        if (result.length > 1)\r\n            console.error(`Output flow slot '${id}' of node item '${this.id}' can only have 1 connection. Will replace the first connection found.`);\r\n\r\n        if (result.length < 1) {\r\n            this.outputFlowSlots.push({id, itemId, slotId});\r\n            return;\r\n        }\r\n        \r\n        const slot = result[0];\r\n        slot.itemId = itemId;\r\n        slot.slotId = slotId;\r\n    }\r\n\r\n    deleteOutputFlowConnection(slotId: number) {\r\n        this.outputFlowSlots = this.outputFlowSlots.filter(pair => pair.id !== slotId);\r\n    }\r\n}","import { INodeItem, NodeItem } from \"./NodeItem\";\r\nimport { BaseSchemaTypes } from \"./NodeSchema\";\r\nimport VisualScriptingDB from \"../managers/VisualScriptingDB\";\r\nimport { IdValuePair, ItemSlotPair } from \"./NodeSlot\";\r\n\r\nexport class Scriplet {\r\n    public id: number;\r\n    public name: string;\r\n    public start: INodeItem;\r\n    public items: Map<number, INodeItem>;\r\n    public itemCounter: number;\r\n\r\n    constructor(name: string) {\r\n        this.id = 0;\r\n        this.itemCounter = 1;\r\n\r\n        this.name = name;\r\n        this.items = new Map<number, INodeItem>();\r\n        this.start = {id: 0, x: 0, y: 0, schemaId: BaseSchemaTypes.Start, inputValues: [], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: []};\r\n        this.items.set(0, this.start);\r\n    }\r\n\r\n    addNode(x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string) {\r\n        this.addNodes(false, {x, y, schemaId, inputValues, inputSlots, inputFlowSlots, outputSlots, outputFlowSlots, customName});\r\n    }\r\n\r\n    // TODO: reloadOnFinish is only needed when seeding the db, seems hackish...\r\n    addNodes(reloadOnFinish: boolean, ...nodes: {x: number, y: number, schemaId: string, inputValues: IdValuePair[], inputSlots: ItemSlotPair[], inputFlowSlots: ItemSlotPair[], outputSlots: Map<number, ItemSlotPair[]>, outputFlowSlots: ItemSlotPair[], customName?: string}[]) {\r\n        nodes.forEach(node => {\r\n            const key = this.itemCounter++;\r\n            this.items.set(key, {id: key, x: node.x, y: node.y, schemaId: node.schemaId, inputValues: node.inputValues, inputSlots: node.inputSlots, inputFlowSlots: node.inputFlowSlots, outputSlots: node.outputSlots, outputFlowSlots: node.outputFlowSlots, customName: node.customName});\r\n        });\r\n\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items, \"itemCounter\": this.itemCounter}).then(result => {\r\n            if (result && reloadOnFinish)\r\n                window.location.reload();\r\n        });\r\n    }\r\n\r\n    getStart(): NodeItem {\r\n        if (!(this.start as NodeItem).schema) {\r\n            const newNode = new NodeItem(this.start.id, this.start.x, this.start.y, this.start.schemaId, this.start.inputValues, this.start.inputSlots, this.start.inputFlowSlots, this.start.outputSlots, this.start.outputFlowSlots, this.start.customName);\r\n            this.start = newNode;\r\n            return newNode;\r\n        }\r\n        return this.start as NodeItem;\r\n    }\r\n\r\n    getNode(itemId: number): NodeItem | undefined {\r\n        const result = this.items.get(itemId);\r\n        if (!result)\r\n            return;\r\n        \r\n        return this.convertToNodeItem(result);\r\n    }\r\n\r\n    getNodes(): NodeItem[] {\r\n        const result: NodeItem[] = [];\r\n        this.items.forEach(node => {\r\n            result.push(this.convertToNodeItem(node));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    convertToNodeItem(node: INodeItem): NodeItem {\r\n        if (!(node as NodeItem).schema) {\r\n            const newNode = new NodeItem(node.id, node.x, node.y, node.schemaId, node.inputValues, node.inputSlots, node.inputFlowSlots, node.outputSlots, node.outputFlowSlots, node.customName);\r\n            this.items.set(node.id, newNode);\r\n            return newNode;\r\n        }\r\n\r\n        return node as NodeItem;\r\n    }\r\n\r\n    updateNodes() {\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items});\r\n    }\r\n\r\n    deleteNode(itemId: number): boolean {\r\n        return this.deleteNodes(itemId);\r\n    }\r\n\r\n    deleteNodes(...itemIds: number[]): boolean {\r\n        let result = true;\r\n        itemIds.forEach(itemId => {\r\n            if(!this.items.delete(itemId))\r\n                result = false;\r\n        });\r\n\r\n        VisualScriptingDB.updateScriplet(this.id, {\"items\": this.items});\r\n        return result;\r\n    }\r\n}","import Dexie from 'dexie';\r\nimport { BaseSchemaTypes } from '../models/NodeSchema';\r\nimport { ItemSlotPair } from '../models/NodeSlot';\r\nimport { Scriplet } from '../models/Scriplet';\r\n\r\nclass VisualScriptingDB extends Dexie {\r\n    public scriplets: Dexie.Table<Scriplet, number>;\r\n\r\n    constructor() {\r\n        super(\"VisualScriptingDB\");\r\n\r\n        this.version(1).stores({\r\n            scriplets: \"++id, name\"\r\n        });\r\n        this.open().catch(error => {\r\n            console.error(`Opening the db '${this.name}' failed: ${error}`);\r\n        });\r\n\r\n        this.scriplets = this.table(\"scriplets\");\r\n        this.scriplets.mapToClass(Scriplet);\r\n\r\n        this.seedData();\r\n    }\r\n\r\n    seedData() {\r\n        /*\r\n        NodeConnections.addConnection(2, 1, 1, 0);\r\n        NodeConnections.addConnection(4, 0, 2, 0);\r\n        NodeConnections.addConnection(3, 1, 2, 0);\r\n        NodeConnections.addConnection(4, 1, 3, 1);\r\n        NodeConnections.addConnection(5, 0, 4, 0);\r\n        NodeConnections.addConnection(7, 0, 4, 0);\r\n        NodeConnections.addConnection(7, 1, 6, 0);\r\n        NodeConnections.addConnection(8, 0, 7, 0);\r\n        */\r\n\r\n        this.scriplets.toArray().then(scriplets => {\r\n            if (scriplets.length <= 0) {\r\n                this.addScriplet(\"Check If Prime\").then(scriplet => {\r\n                    scriplet.addNodes(true,\r\n                        {x: -530, y: 240, schemaId: BaseSchemaTypes.InputNumber, inputValues: [{id: 0, value: 97}], inputSlots: [], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 2, slotId: 0}, {id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Number To Check\"},\r\n                        {x: -290, y: 118, schemaId: BaseSchemaTypes.DivideNumbers, inputValues: [{id: 1, value: 2}], inputSlots: [{id: 0, itemId: 1, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 3, slotId: 0}]]]), outputFlowSlots: [], customName: \"Half Number\"},\r\n                        {x: -32, y: 118, schemaId: BaseSchemaTypes.AddNumbers, inputValues: [{id: 1, value: 1}], inputSlots: [{id: 0, itemId: 2, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 4, slotId: 3}]]]), outputFlowSlots: [], customName: \"Plus One\"},\r\n                        {x: 225, y: 0, schemaId: BaseSchemaTypes.ForLoopBreak, inputValues: [{id: 2, value: 2}], inputSlots: [{id: 3, itemId: 3, slotId: 0}], inputFlowSlots: [{id: 1, itemId: 8, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>([[2, [{id: 2, itemId: 5, slotId: 1}]]]), outputFlowSlots: [{id: 0, itemId: 7, slotId: 0}, {id: 1, itemId: 9, slotId: 0}]},\r\n                        {x: 473, y: 240, schemaId: BaseSchemaTypes.ModuloNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 1, slotId: 0}, {id: 1, itemId: 4, slotId: 2}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 6, slotId: 0}]]]), outputFlowSlots: []},\r\n                        {x: 743, y: 132, schemaId: BaseSchemaTypes.EqualNumbers, inputValues: [], inputSlots: [{id: 0, itemId: 5, slotId: 0}], inputFlowSlots: [], outputSlots: new Map<number, ItemSlotPair[]>([[0, [{id: 0, itemId: 7, slotId: 1}]]]), outputFlowSlots: [], customName: \"Equals Zero\"},\r\n                        {x: 986, y: -18, schemaId: BaseSchemaTypes.IfElse, inputValues: [], inputSlots: [{id: 1, itemId: 6, slotId: 0}], inputFlowSlots: [{id: 0, itemId: 4, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 8, slotId: 0}], customName: \"Check If Prime\"},\r\n                        {x: 1250, y: 100, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [{id: 1, value: false}], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 7, slotId: 0}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], customName: \"Is Not Prime\"},\r\n                        {x: 864, y: 278, schemaId: BaseSchemaTypes.PrintBoolean, inputValues: [], inputSlots: [], inputFlowSlots: [{id: 0, itemId: 4, slotId: 1}], outputSlots: new Map<number, ItemSlotPair[]>(), outputFlowSlots: [], customName: \"Is Prime\"}\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    async getScriplet(id: number): Promise<Scriplet | undefined> {\r\n        return await this.scriplets.get(id);\r\n    }\r\n\r\n    async getScriplets(): Promise<Scriplet[]> {\r\n        return await this.scriplets.toArray();\r\n    }\r\n\r\n    async addScriplet(name: string): Promise<Scriplet> {\r\n        const scriplet = new Scriplet(name);\r\n        const id = await this.scriplets.add(scriplet);\r\n        scriplet.id = id;\r\n        return scriplet;\r\n    }\r\n\r\n    async updateScriplet(id: number, changes: {[keyPath: string]: any}): Promise<boolean> {\r\n        const result = await this.scriplets.update(id, changes);\r\n        if (result === 0) {\r\n            console.error(`The scriplet of id '${id}' could not be found in the database; nothing was updated.`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    async updateEntireScriplet(scriplet: Scriplet): Promise<boolean> {\r\n        const result = await this.scriplets\r\n                                .where(\":id\")\r\n                                .equals(scriplet.id)\r\n                                .modify((value, ref) => ref.value = scriplet);\r\n        \r\n        if (result === 0) {\r\n            console.error(`The scriplet of id '${scriplet.id}' could not be found in the database; nothing was updated.`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    async deleteScriplet(id: number) {\r\n        await this.scriplets.delete(id);\r\n    }\r\n}\r\n\r\nexport default new VisualScriptingDB();","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport VisualScriptingDB from '../managers/VisualScriptingDB';\r\nimport { Scriplet } from '../models/Scriplet';\r\n\r\nexport type SidebarState = {\r\n    scriplets: Scriplet[];\r\n    isNavMenuOpen: boolean;\r\n    isSidebarOpen: boolean;\r\n}\r\n\r\nexport type SidebarProps = {\r\n    \r\n}\r\n\r\nexport default class SidebarNav extends React.Component<SidebarProps, SidebarState> {\r\n    constructor(props: SidebarProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            scriplets: [],\r\n            isNavMenuOpen: false,\r\n            isSidebarOpen: true\r\n        };\r\n\r\n        this.openNavMenu = this.openNavMenu.bind(this);\r\n        this.closeNavMenu = this.closeNavMenu.bind(this);\r\n        this.toggleNavMenu = this.toggleNavMenu.bind(this);\r\n        this.openSidebar = this.openSidebar.bind(this);\r\n        this.closeSidebar = this.closeSidebar.bind(this);\r\n        this.toggleSidebar = this.toggleSidebar.bind(this);\r\n        this.handleOnScripletCreate = this.handleOnScripletCreate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        VisualScriptingDB.getScriplets().then(scriplets => {\r\n            this.setState({scriplets: scriplets});\r\n        });\r\n    }\r\n\r\n    openNavMenu() {\r\n        this.setState({isNavMenuOpen: true});\r\n    }\r\n\r\n    closeNavMenu() {\r\n        this.setState({isNavMenuOpen: false});\r\n    }\r\n\r\n    toggleNavMenu() {\r\n        if (this.state.isNavMenuOpen)\r\n            this.closeNavMenu();\r\n        else\r\n            this.openNavMenu();\r\n    }\r\n\r\n    openSidebar() {\r\n        this.setState({isSidebarOpen: true});\r\n    }\r\n\r\n    closeSidebar() {\r\n        this.setState({isSidebarOpen: false});\r\n    }\r\n\r\n    toggleSidebar() {\r\n        if (this.state.isSidebarOpen)\r\n            this.closeSidebar();\r\n        else\r\n            this.openSidebar();\r\n    }\r\n\r\n    handleOnScripletCreate(name: string) {\r\n        // TODO: Show feedback for invalid input\r\n        if (!name)\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        const { scriplets } = this.state;\r\n        return (\r\n            <nav className=\"nav\">\r\n                {/* \r\n                * Plan is to have a top navigation for md and below\r\n                * screen sizes, but have sidebar for lg and above\r\n                * \r\n                * Ignore animations for now\r\n                */}\r\n\r\n                { /* Top navbar */ }\r\n                <div className=\"topbar\">\r\n                    <div className=\"lg:hidden flex items-center justify-between p-4 bg-gray-800\">\r\n                        { /* Logo */ }\r\n                        <div className=\"\">\r\n                            <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                Visual Scripting\r\n                            </Link>\r\n                        </div>\r\n\r\n                        { /* Hamburger for sidebar items */ }\r\n                        <div className=\"block\">\r\n                            <button className=\"flex items-center py-2 px-3 text-indigo-500 rounded border border-indigo-500 hover:bg-indigo-300\"\r\n                                    onClick={this.toggleNavMenu} >\r\n                                <FontAwesomeIcon icon=\"bars\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    { /* Nav Items */ }\r\n                    <div className={`${this.state.isNavMenuOpen ? '' : 'hidden'} lg:hidden relative z-20`}>\r\n                        <div className=\"absolute w-full px-4 pb-4 bg-gray-800\">\r\n                            {\r\n                                scriplets.map((scriplet, i) => (\r\n                                    <Link key={i} \r\n                                            onClick={this.closeNavMenu} \r\n                                            to={\"/scriplet/\" + scriplet.id} \r\n                                            className=\"block mb-1 px-4 py-2 rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100\">\r\n                                        <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                                        {scriplet.name}\r\n                                    </Link>\r\n                                ))\r\n                            }\r\n                                <div className=\"w-full mb-1 px-4 py-2 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                        onClick={() => {\r\n                                            //this.state.openProjectModal();\r\n                                            this.closeNavMenu();\r\n                                        }}>\r\n                                    <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"plus\" />\r\n                                    <span className=\"font-medium\">Add Scriplet</span>\r\n                                </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                { /* Sidebar */ }\r\n                <div>\r\n                    <div className={`${this.state.isSidebarOpen ? \"sidebar shadow\" : \"hidden\"}`}>\r\n                        <div className=\"flex-grow h-screen bg-gray-800 relative\">\r\n                            { /* Logo */ }\r\n                            <div className=\"p-4 h-16\">\r\n                                <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                    <FontAwesomeIcon className=\"mr-4 text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                    Visual Scripting\r\n                                </Link>\r\n                            </div>\r\n\r\n                            { /* Sidebar Items */ }\r\n                            <div className=\"p-2 fixed top-16 bottom-0 my-auto lg:w-64\">\r\n                                { /* TODO: Place the dashboard item here */ }\r\n                                <Scrollbar noScrollX>\r\n                                    {\r\n                                        scriplets.map((scriplet, i) => (\r\n                                            <Link key={i} \r\n                                                    onClick={this.closeNavMenu} \r\n                                                    to={\"/scriplet/\" + scriplet.id} \r\n                                                    className=\"block mb-1 px-4 py-2 rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100\">\r\n                                                <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" icon=\"folder\" />\r\n                                                {scriplet.name}\r\n                                            </Link>\r\n                                        ))\r\n                                    }\r\n                                    <div className=\"w-full mb-1 px-4 py-2 rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                            onClick={() => {\r\n                                                //this.state.openProjectModal;\r\n                                            }}>\r\n                                        <FontAwesomeIcon className=\"mr-4 text-lg text-gray-600\" \r\n                                                        icon=\"plus\" />\r\n                                        <span className=\"font-medium\">Add Scriplet</span>\r\n                                    </div>\r\n                                </Scrollbar>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={`${this.state.isSidebarOpen ? \"hidden\" : \"collapsed-sidebar shadow\"}`}>\r\n                        <div className=\"flex-grow h-screen bg-gray-800 relative\">\r\n                            { /* Logo */ }\r\n                            <div className=\"p-4 h-16 text-center\">\r\n                                <Link to=\"/\" className=\"text-xl text-gray-100 font-semibold\">\r\n                                    <FontAwesomeIcon className=\"text-2xl text-indigo-500\" \r\n                                                    icon=\"project-diagram\" />\r\n                                </Link>\r\n                            </div>\r\n\r\n                            { /* Sidebar Items */ }\r\n                            <div className=\"sidebar-items p-2 fixed top-16 bottom-0 my-auto\">\r\n                                { /* TODO: Place the dashboard item here */ }\r\n                                <Scrollbar noScrollX>\r\n                                    {\r\n                                        scriplets.map((scriplet, i) => (\r\n                                            <Link key={i} \r\n                                                    onClick={this.closeNavMenu} \r\n                                                    to={\"/scriplet/\" + scriplet.id} \r\n                                                    className=\"block border-gray-700 border-solid border hover:border-opacity-0 mb-1 py-2 text-center rounded-md hover:bg-gray-900 focus:bg-gray-900 text-gray-100 font-bold\">\r\n                                                {scriplet.name[0]}\r\n                                            </Link>\r\n                                        ))\r\n                                    }\r\n                                    <div className=\"flex mb-1 py-2 justify-center rounded-md border-gray-600 border-dashed border-2 cursor-pointer hover:bg-gray-900 focus:bg-gray-900 text-gray-500\"\r\n                                            onClick={() => {\r\n                                                //this.state.openProjectModal;\r\n                                            }}>\r\n                                        <div className=\"inline-block\">\r\n                                            <FontAwesomeIcon className=\"text-lg text-gray-600\" \r\n                                                            icon=\"plus\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </Scrollbar>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <button className={`${this.state.isSidebarOpen ? \"w-64 ml-8 pl-56\" : \"w-16 ml-8 pl-8\"} sidebar-toggle items-center rounded-full bg-gray-700`}\r\n                            onClick={this.toggleSidebar}>\r\n                        <div className=\"inline-block pl-2\">\r\n                            <FontAwesomeIcon icon=\"chevron-left\"\r\n                                                className={`${this.state.isSidebarOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                            <FontAwesomeIcon icon=\"chevron-right\"\r\n                                                className={`${this.state.isSidebarOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Modals here */}\r\n                {/*\r\n                <Modal title=\"Create New Project\"\r\n                        openModal={callable => {\r\n                            if (!this.state.openProjectModal)\r\n                                this.setState({openProjectModal: callable});\r\n                        }}>\r\n                    {({closeModal}) => (\r\n                    <ProjectForm title=\"\"\r\n                                    description=\"\"\r\n                                    handleOnProjectCreate={this.handleOnScripletCreate}\r\n                                    handleCloseModal={closeModal} />\r\n                    )}\r\n                </Modal>\r\n                */}\r\n            </nav>\r\n        );\r\n    }\r\n}","import { KonvaEventObject } from \"konva/types/Node\";\r\n\r\nexport class KonvaUtils {\r\n    public static setCursor(event: KonvaEventObject<Event>, cursorType: string) {\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        stage.container().style.cursor = cursorType;\r\n    }\r\n}","import React from 'react';\r\nimport { Label, Tag, Text } from 'react-konva';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\n\r\nexport class KonvaForm {\r\n    public static cancel() {\r\n        Input.cancelInput();\r\n        Dropdown.cancelDropdown();\r\n    }\r\n} \r\n\r\nexport type InputModel = {\r\n    value: string;\r\n    type: string;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type OutputModel = {\r\n    values: string[];\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type InputProps = {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fontSize: number;\r\n    fontStyle: string;\r\n    padding: number;\r\n    textColor: string;\r\n    bgColor: string;\r\n    hoverColor: string;\r\n    borderRadius: number;\r\n    zIndex: number;\r\n    value: string;\r\n    type: string;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type InputState = {\r\n    value: string;\r\n}\r\n\r\nexport class Input extends React.Component<InputProps, InputState> {\r\n    private static inputElement: HTMLInputElement;\r\n    \r\n    static defaultProps: InputProps = {\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 20,\r\n        fontSize: 12,\r\n        fontStyle: \"normal\",\r\n        padding: 0,\r\n        textColor: \"#000000\",\r\n        bgColor: \"#ffffff\",\r\n        hoverColor: \"#cccccc\",\r\n        borderRadius: 0,\r\n        zIndex: 0,\r\n        value: \"\",\r\n        type: \"text\",\r\n        onChange: () => { return false; }\r\n    }\r\n\r\n    constructor(props: InputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n\r\n        this.showInput = this.showInput.bind(this);\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onHoverExit = this.onHoverExit.bind(this);\r\n    }\r\n\r\n    showInput(event: KonvaEventObject<Event>) {\r\n        Input.cancelInput();\r\n\r\n        const { width, height, fontSize, padding, textColor, hoverColor, borderRadius, zIndex, type, onChange } = this.props;\r\n        const value = this.state.value === \"\" ? this.props.value : this.state.value;\r\n\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n        const scale = stage.scaleX();\r\n\r\n        const top = event.target.absolutePosition().y;\r\n        const left = event.target.absolutePosition().x;\r\n\r\n        const input = document.createElement(\"input\");\r\n        document.body.appendChild(input);\r\n\r\n        input.value = value;\r\n        input.type = type;\r\n        input.style.position = \"absolute\";\r\n        input.style.top = `${top}px`;\r\n        input.style.left = `${left}px`;\r\n        input.style.width = `${Math.min(width * scale, window.innerWidth - left)}px`;\r\n        input.style.height = `${height * scale}px`;\r\n        input.style.paddingLeft = `${padding * scale}px`;\r\n        input.style.fontSize = `${fontSize * scale}px`;\r\n        input.style.color = textColor;\r\n        input.style.backgroundColor = hoverColor;\r\n        input.style.borderRadius = `${borderRadius * scale}px`;\r\n        input.style.zIndex = `${zIndex}`;\r\n        input.focus();\r\n        input.onchange = (ev: Event) => {\r\n            const target = ev.target as HTMLInputElement;\r\n\r\n            if (!target) {\r\n                console.error(`Cannot cast target to 'HTMLInputElement'.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            if (!target.value) {\r\n                console.error(`No value typed in while editing the text.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            if (!onChange(target.value)) {\r\n                console.error(`Input value requirements not met.`);\r\n                Input.cancelInput();\r\n                return;\r\n            }\r\n\r\n            onChange(target.value);\r\n            this.setState({value: target.value});\r\n            Input.cancelInput();\r\n        }\r\n\r\n        Input.inputElement = input;\r\n    }\r\n\r\n    public static cancelInput() {\r\n        const input = Input.inputElement;\r\n        if (!input)\r\n            return;\r\n        \r\n        input.onchange = null;\r\n        input.parentNode?.removeChild(input);\r\n    }\r\n\r\n    onHover(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"text\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.hoverColor);\r\n        layer.draw();\r\n    }\r\n\r\n    onHoverExit(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.bgColor);\r\n        layer.draw();\r\n    }\r\n\r\n    render() {\r\n        const { x, y, width, height, fontSize, fontStyle, padding, textColor, bgColor, borderRadius } = this.props;\r\n        const value = this.state.value === \"\" ? this.props.value : this.state.value;\r\n\r\n        return(\r\n            <Label name=\"top-bar-label\"\r\n                x={x}\r\n                y={y}\r\n                onMouseEnter={this.onHover}\r\n                onMouseLeave={this.onHoverExit} \r\n                onClick={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showInput(event);\r\n                }}\r\n                onTap={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showInput(event);\r\n                }}>\r\n                <Tag fill={bgColor}\r\n                        cornerRadius={borderRadius} />\r\n                <Text name=\"top-bar-text\"\r\n                        width={width}\r\n                        height={height}\r\n                        fontStyle={fontStyle}\r\n                        fontSize={fontSize}\r\n                        verticalAlign=\"middle\"\r\n                        padding={padding}\r\n                        fill={textColor}\r\n                        text={value} />\r\n            </Label>\r\n        );\r\n    }\r\n}\r\n\r\nexport type DropdownProps = {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fontSize: number;\r\n    fontStyle: string;\r\n    padding: number;\r\n    textColor: string;\r\n    bgColor: string;\r\n    hoverColor: string;\r\n    borderRadius: number;\r\n    zIndex: number;\r\n    values: string[];\r\n    value: string;\r\n    onChange: (value: string) => boolean;\r\n}\r\n\r\nexport type DropdownState = {\r\n    selectedIndex: number;\r\n}\r\n\r\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\r\n    private static dropdownElement: HTMLSelectElement;\r\n    \r\n    static defaultProps: DropdownProps = {\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 20,\r\n        fontSize: 12,\r\n        fontStyle: \"normal\",\r\n        padding: 0,\r\n        textColor: \"#000000\",\r\n        bgColor: \"#ffffff\",\r\n        hoverColor: \"#cccccc\",\r\n        borderRadius: 0,\r\n        zIndex: 0,\r\n        values: [],\r\n        value: \"\",\r\n        onChange: () => { return false; }\r\n    }\r\n\r\n    constructor(props: DropdownProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedIndex: 0\r\n        };\r\n\r\n        this.showDropdown = this.showDropdown.bind(this);\r\n        this.onHover = this.onHover.bind(this);\r\n        this.onHoverExit = this.onHoverExit.bind(this);\r\n    }\r\n\r\n    showDropdown(event: KonvaEventObject<Event>) {\r\n        Dropdown.cancelDropdown();\r\n\r\n        const { width, height, padding, fontSize, textColor, hoverColor, borderRadius, zIndex, values, onChange } = this.props;\r\n\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n        const scale = stage.scaleX();\r\n\r\n        const top = event.target.absolutePosition().y;\r\n        const left = event.target.absolutePosition().x;\r\n\r\n        const dropdown = document.createElement(\"select\");\r\n        document.body.appendChild(dropdown);\r\n\r\n        // Add classes here\r\n        //dropdown.classList.add(\"block\", \"appearance-none\", \"w-full\", \"bg-white\", \"border\", \"border-gray-400\", \"hover:border-gray-500\", \"px-4\", \"py-2\", \"pr-8\", \"rounded\", \"shadow\", \"leading-tight\", \"focus:outline-none\", \"focus:shadow-outline\");\r\n        values.forEach(value => {\r\n            const option = document.createElement(\"option\");\r\n            option.value = value;\r\n            option.innerText = value;\r\n            dropdown.add(option);\r\n        });\r\n\r\n        dropdown.selectedIndex = this.state.selectedIndex;\r\n        dropdown.style.position = \"absolute\";\r\n        dropdown.style.top = `${top}px`;\r\n        dropdown.style.left = `${left}px`;\r\n        dropdown.style.width = `${Math.min(width * scale, window.innerWidth - left)}px`;\r\n        dropdown.style.height = `${height * scale}px`;\r\n        dropdown.style.paddingLeft = `${padding * scale}px`;\r\n        dropdown.style.fontSize = `${fontSize * scale}px`;\r\n        dropdown.style.color = textColor;\r\n        dropdown.style.backgroundColor = hoverColor;\r\n        dropdown.style.borderRadius = `${borderRadius * scale}px`;\r\n        dropdown.style.zIndex = `${zIndex}`;\r\n        dropdown.focus();\r\n        dropdown.onchange = (ev: Event) => {\r\n            const target = ev.target as HTMLSelectElement;\r\n\r\n            if (!target) {\r\n                console.error(`Cannot cast target to 'HTMLSelectElement'.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            if (!target.value) {\r\n                console.error(`No value selected.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            if (!onChange(target.value)) {\r\n                console.error(`Input value requirements not met.`);\r\n                Dropdown.cancelDropdown();\r\n                return;\r\n            }\r\n\r\n            onChange(target.value);\r\n            this.setState({selectedIndex: target.selectedIndex});\r\n            Dropdown.cancelDropdown();\r\n        };\r\n\r\n        Dropdown.dropdownElement = dropdown;\r\n    }\r\n\r\n    public static cancelDropdown() {\r\n        const dropdown = Dropdown.dropdownElement;\r\n        if (!dropdown)\r\n            return;\r\n        \r\n        dropdown.onchange = null;\r\n        dropdown.parentNode?.removeChild(dropdown);\r\n    }\r\n\r\n    onHover(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.hoverColor);\r\n        layer.draw();\r\n    }\r\n\r\n    onHoverExit(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", this.props.bgColor);\r\n        layer.draw();\r\n    }\r\n\r\n    render() {\r\n        const { x, y, width, height, fontSize, fontStyle, padding, textColor, bgColor, borderRadius, values, value } = this.props;\r\n\r\n        return(\r\n            <Label name=\"top-bar-label\"\r\n                x={x}\r\n                y={y}\r\n                onMouseEnter={this.onHover}\r\n                onMouseLeave={this.onHoverExit} \r\n                onClick={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showDropdown(event);\r\n                }}\r\n                onTap={event => {\r\n                    event.cancelBubble = true;\r\n                    this.showDropdown(event);\r\n                }}>\r\n                <Tag fill={bgColor}\r\n                        cornerRadius={borderRadius} />\r\n                <Text name=\"top-bar-text\"\r\n                        width={width}\r\n                        height={height}\r\n                        fontStyle={fontStyle}\r\n                        fontSize={fontSize}\r\n                        verticalAlign=\"middle\"\r\n                        padding={padding}\r\n                        fill={textColor}\r\n                        text={value && values.includes(value) ? value : values[this.state.selectedIndex]} />\r\n            </Label>\r\n        );\r\n    }\r\n}","import Colors from \"../utils/Colors\";\r\nimport { Number, Boolean, Flow } from \"../utils/Types\";\r\n\r\nexport enum HandleType {\r\n    Circle,\r\n    Arrow\r\n}\r\n\r\nexport enum InputType {\r\n    None,\r\n    Input,\r\n    Dropdown\r\n}\r\n\r\nexport type SlotConfig = {\r\n    // handle config\r\n    handleType: HandleType;\r\n    handleBorderColor: string;\r\n    handleFillColor: string;\r\n\r\n    inputType: InputType;\r\n    defaultInputValue: string | string[];\r\n    initialValue: any;\r\n\r\n    fromString: (value: string) => any;\r\n    toString: (value: any) => string;\r\n}\r\n\r\nclass SlotConfigManager {\r\n    private configs: Map<string, SlotConfig>;\r\n\r\n    constructor() {\r\n        this.configs = new Map<string, SlotConfig>();\r\n\r\n        const numberConfig: SlotConfig = {\r\n            handleType: HandleType.Circle,\r\n            handleBorderColor: Colors.Green[700],\r\n            handleFillColor: Colors.Green[600],\r\n            inputType: InputType.Input,\r\n            defaultInputValue: \"\",\r\n            initialValue: Number.defaultValue,\r\n            fromString: Number.convertFromString,\r\n            toString: Number.convertToString\r\n        };\r\n\r\n        const booleanConfig: SlotConfig = {\r\n            handleType: HandleType.Circle,\r\n            handleBorderColor: Colors.Purple[600],\r\n            handleFillColor: Colors.Purple[500],\r\n            inputType: InputType.Dropdown,\r\n            defaultInputValue: [\"true\", \"false\"],\r\n            initialValue: Boolean.defaultValue,\r\n            fromString: Boolean.convertFromString,\r\n            toString: Boolean.convertToString\r\n        };\r\n\r\n        const flowConfig: SlotConfig = {\r\n            handleType: HandleType.Arrow,\r\n            handleBorderColor: Colors.Gray[500],\r\n            handleFillColor: Colors.Gray[100],\r\n            inputType: InputType.None,\r\n            defaultInputValue: \"\",\r\n            initialValue: Flow.defaultValue,\r\n            fromString: Flow.convertFromString,\r\n            toString: Flow.convertToString\r\n        }\r\n\r\n        this.configs.set(Number.className, numberConfig);\r\n        this.configs.set(Boolean.className, booleanConfig);\r\n        this.configs.set(Flow.className, flowConfig);\r\n    }\r\n\r\n    getConfig(type: string) {\r\n        return this.configs.get(type);\r\n    }\r\n}\r\n\r\nexport default new SlotConfigManager();\r\n\r\n","import React from 'react';\r\nimport { Circle, Path } from 'react-konva';\r\nimport { HandleType } from '../managers/SlotConfigManager';\r\nimport { KonvaForm } from './KonvaForm';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport Konva from 'konva';\r\nimport Colors from '../utils/Colors';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\n\r\nexport type NodeHandleProps = {\r\n    fill: string;\r\n    stroke: string;\r\n    type: HandleType;\r\n    isInput: boolean;\r\n    isFlow: boolean;\r\n    itemId: number;\r\n    slotId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type NodeHandleState = {\r\n    startPosition: Vector2d;\r\n}\r\n\r\nexport class NodeHandle extends React.Component<NodeHandleProps, NodeHandleState> {\r\n    private static path: Konva.Path | null = null;\r\n\r\n    constructor(props: NodeHandleProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            startPosition: {x: 0, y: 0},\r\n        }\r\n        \r\n        this.onDragStart = this.onDragStart.bind(this);\r\n        this.onDragMove = this.onDragMove.bind(this);\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n        this.onMouseEnter = this.onMouseEnter.bind(this);\r\n        this.onMouseExit = this.onMouseExit.bind(this);\r\n    }\r\n\r\n    onDragStart(event: KonvaEventObject<DragEvent>) {\r\n        const layer: Konva.Layer | null = event.target.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        KonvaForm.cancel();\r\n        \r\n        const thisCircle = event.target;\r\n        const parent = thisCircle.parent;\r\n        if (!parent) {\r\n            console.error(`This Konva node should be under a container node.`);\r\n            return;\r\n        }\r\n\r\n        const startPos = thisCircle.getPosition();\r\n        const endPos = startPos;\r\n        const pathData = `M${startPos.x} ${startPos.y - 2} L${endPos.x} ${endPos.y - 2}`;\r\n        const path = new Konva.Path({\r\n            data: pathData,\r\n            stroke: Colors.Gray[800],\r\n            strokeWidth: 4\r\n        });\r\n\r\n        parent.add(path);\r\n        NodeHandle.path = path;\r\n        this.setState({startPosition: startPos});\r\n    }\r\n\r\n    onDragMove(event: KonvaEventObject<DragEvent>) {\r\n        const { isInput } = this.props;\r\n        const { startPosition } = this.state;\r\n\r\n        const layer: Konva.Layer | null = event.target.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const thisCircle = event.target;\r\n        const position = thisCircle.getPosition();\r\n        let startPos, endPos;\r\n\r\n        if (isInput) {\r\n            // The isInput specifies if its either the input handle or the output\r\n            // handle that's being dragged.\r\n            // Gotta flip the start and end positions so the path forms an S shape\r\n            // instead of a mirrored S shape when dragged.\r\n            startPos = position;\r\n            endPos = startPosition;\r\n        } else {\r\n            startPos = startPosition;\r\n            endPos = position;\r\n        }\r\n\r\n        const midpointPos: Vector2d = {\r\n            x: ((endPos.x - startPos.x) / 2) + (startPos.x),\r\n            y: ((endPos.y - startPos.y) / 2) + (startPos.y)\r\n        }\r\n        const pathData = `M${startPos.x} ${startPos.y - 2} Q${startPos.x + 30} ${startPos.y - 2} ${midpointPos.x} ${midpointPos.y - 2} Q${endPos.x - 30} ${endPos.y - 2} ${endPos.x} ${endPos.y - 2}`;\r\n        const path = NodeHandle.path;\r\n        if (!path) {\r\n            console.error(`The Konva path could not be found.`);\r\n            return;\r\n        }\r\n\r\n        path.data(pathData);\r\n    }\r\n\r\n    onDragEnd(event: KonvaEventObject<DragEvent>) {\r\n        const { isInput, isFlow, itemId, onConnect } = this.props;\r\n        const { startPosition } = this.state;\r\n\r\n        const thisCircle = event.target;\r\n        thisCircle.position(startPosition);\r\n\r\n        const path = NodeHandle.path;\r\n        if (path != null) {\r\n            path.destroy();\r\n            NodeHandle.path = null;\r\n        }\r\n\r\n        const stage = thisCircle.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        stage.draw();\r\n\r\n        const pointerPos = stage.getPointerPosition();\r\n        if (!pointerPos) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const screenX = Math.floor(pointerPos.x);\r\n        const screenY = Math.floor(pointerPos.y);\r\n\r\n        const elements = stage.getAllIntersections({x: screenX, y: screenY}) as Konva.Shape[];\r\n        \r\n        if (!elements || elements.length <= 0)\r\n            return;\r\n\r\n        let element: Konva.Shape | undefined;\r\n        let otherItemId: number = 0;\r\n        let otherSlotId: number = 0;\r\n\r\n        let i;\r\n        for (i = 0; i < elements.length; i++) {\r\n            const elem = elements[i];\r\n            const type = elem.getAttr(\"data-type\");\r\n            if (!type || (isInput ? type !== \"output\" : type !== \"input\"))\r\n                continue;\r\n            const slotType = elem.getAttr(\"data-slot-type\");\r\n            if (!slotType || (isFlow ? slotType !== \"control\" : slotType !== \"data\"))\r\n                continue;\r\n\r\n            otherItemId = elem.getAttr(\"data-item-id\");\r\n            otherSlotId = elem.getAttr(\"data-slot-id\");\r\n            // NOTE: These ids can be 0 and !id will return true\r\n            // TODO: Make ids to be unique uuids\r\n            if (otherItemId == null || otherSlotId == null) {\r\n                console.error(`No attributes 'data-item-id' or 'data-slot-id' could be found from the element.`);\r\n                continue;\r\n            }\r\n\r\n            if (itemId === otherItemId)\r\n                continue;\r\n\r\n            element = elem;\r\n            break;\r\n        }\r\n\r\n        if (!element)\r\n            return;\r\n\r\n        onConnect(otherItemId, otherSlotId);\r\n    }\r\n\r\n    onMouseEnter(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n    }\r\n\r\n    onMouseExit(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n    }\r\n\r\n    render() {\r\n        const { fill, stroke, type, isInput, isFlow, itemId, slotId } = this.props;\r\n        \r\n        return(\r\n            <>\r\n            {(type === HandleType.Circle &&\r\n                <Circle x={isInput ? 18 : -18}\r\n                    y={18}\r\n                    radius={4}\r\n                    fill={fill}\r\n                    stroke={stroke}\r\n                    strokeWidth={1}\r\n                    scale={{x: 1.5, y: 1.5}}\r\n                    listening={false} />\r\n            ) ||\r\n            (type === HandleType.Arrow &&\r\n                <Path data=\"M6.659,13.549L12.139,8.753C12.356,8.563 12.481,8.288 12.481,8C12.481,7.712 12.356,7.437 12.139,7.247L6.66,2.451C6.011,1.885 5,2.345 5,3.204L5,12.796C5,12.796 5,12.797 5,12.797C5,13.345 5.451,13.797 6,13.797C6.242,13.797 6.477,13.709 6.659,13.549Z\"\r\n                    x={isInput ? 5 : -31}\r\n                    y={6}\r\n                    fill={fill}\r\n                    stroke={stroke}\r\n                    strokeWidth={1}\r\n                    scale={{x: 1.5, y: 1.5}}\r\n                    listening={false} />\r\n            )}\r\n\r\n            <Circle data-type={`${isInput ? \"input\" : \"output\"}`}\r\n                    data-slot-type={`${isFlow ? \"control\" : \"data\"}`}\r\n                    data-item-id={itemId}\r\n                    data-slot-id={slotId}\r\n                    x={isInput ? 18 : -18}\r\n                    y={22}\r\n                    radius={15}\r\n                    fill=\"transparent\"\r\n                    draggable\r\n                    onDragStart={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragStart(event);\r\n                    }}\r\n                    onDragMove={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragMove(event);\r\n                    }}\r\n                    onDragEnd={event => {\r\n                        event.cancelBubble = true;\r\n                        this.onDragEnd(event);\r\n                    }}\r\n                    onMouseEnter={this.onMouseEnter}\r\n                    onMouseLeave={this.onMouseExit} />\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Group, Text } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport Colors from '../utils/Colors';\r\nimport { Input, Dropdown } from './KonvaForm';\r\nimport SlotConfigManager, { InputType, HandleType } from '../managers/SlotConfigManager';\r\nimport { NodeHandle } from './NodeHandle';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot, ItemSlotPair } from '../models/NodeSlot';\r\nimport ScripletManager from '../managers/ScripletManager';\r\n\r\nexport type InputSlotProps = {\r\n    inputSlot: InputSlot;\r\n    inputConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onInputChange: (value: any) => boolean;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type InputSlotState = {\r\n    labelWidth: number;\r\n    typeWidth: number;\r\n}\r\n\r\nexport class InputSlotDOM extends React.Component<InputSlotProps, InputSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n    private type: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: InputSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n        this.type = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100,\r\n            typeWidth: 100\r\n        };\r\n\r\n        this.onInputChanged = this.onInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        const typeWidth = this.type.current?.width();\r\n        if (!labelWidth || !typeWidth) {\r\n            console.error(`The referenced Konva label or type text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth, typeWidth: typeWidth});\r\n    }\r\n\r\n    onInputChanged(value: string): boolean {\r\n        const { inputSlot, onInputChange } = this.props;\r\n        const config = SlotConfigManager.getConfig(inputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${inputSlot.type}'.`);\r\n            return false;\r\n        }\r\n\r\n        const val = config.fromString(value);\r\n        if (val == null)\r\n            return false;\r\n\r\n        return onInputChange(val);\r\n    }\r\n\r\n    render() {\r\n        const { inputSlot, inputConnection, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth, typeWidth } = this.state;\r\n        const config = SlotConfigManager.getConfig(inputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${inputSlot.type}'.`);\r\n            return null;\r\n        }\r\n\r\n        const item = ScripletManager.currentScriplet?.getNode(itemId);\r\n        if (!item) {\r\n            console.error(`The node item of id '${itemId}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={inputSlot.isConnectable ? 36 : 16}\r\n                        y={0}\r\n                        height={20}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        verticalAlign=\"bottom\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputSlot.name} />\r\n                <Text ref={this.type}\r\n                        x={inputSlot.isConnectable ? 36 : 16}\r\n                        y={20}\r\n                        height={20}\r\n                        fontSize={10}\r\n                        verticalAlign=\"top\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputSlot.type} />\r\n                {(!inputConnection &&\r\n                ((config.inputType === InputType.Input &&\r\n                    <Input x={inputSlot.isConnectable ? 44 + Math.max(labelWidth, typeWidth) : 24 + Math.max(labelWidth, typeWidth)}\r\n                            y={12}\r\n                            width={30}\r\n                            height={12}\r\n                            fontSize={10}\r\n                            padding={2}\r\n                            borderRadius={2}\r\n                            textColor={Colors.Gray[100]}\r\n                            bgColor={Colors.Gray[700]}\r\n                            hoverColor={Colors.Gray[600]}\r\n                            value={`${item.getInputValue(inputSlot.id) ?? inputSlot.defaultValue}`}\r\n                            onChange={this.onInputChanged} />\r\n                ) ||\r\n                (config.inputType === InputType.Dropdown &&\r\n                    <Dropdown x={inputSlot.isConnectable ? 44 + Math.max(labelWidth, typeWidth) : 24 + Math.max(labelWidth, typeWidth)}\r\n                            y={12}\r\n                            width={30}\r\n                            height={12}\r\n                            fontSize={10}\r\n                            padding={2}\r\n                            borderRadius={2}\r\n                            textColor={Colors.Gray[100]}\r\n                            bgColor={Colors.Gray[700]}\r\n                            hoverColor={Colors.Gray[600]}\r\n                            values={config.defaultInputValue as string[]}\r\n                            value={item.getInputValue(inputSlot.id) != null ? `${item.getInputValue(inputSlot.id)}` : `${inputSlot.defaultValue}`}\r\n                            onChange={this.onInputChanged} />\r\n                )))}\r\n                {(inputSlot.isConnectable &&\r\n                    <NodeHandle fill={inputConnection ? config.handleFillColor : \"transparent\"}\r\n                                stroke={config.handleBorderColor}\r\n                                type={config.handleType}\r\n                                isInput={true}\r\n                                isFlow={false}\r\n                                itemId={itemId}\r\n                                slotId={inputSlot.id}\r\n                                onConnect={onConnect} />\r\n                )}\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type OutputSlotProps = {\r\n    outputSlot: OutputSlot;\r\n    outputConnections: ItemSlotPair[];\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n};\r\n\r\nexport type OutputSlotState = {\r\n    labelWidth: number;\r\n    typeWidth: number;\r\n}\r\n\r\nexport class OutputSlotDOM extends React.Component<OutputSlotProps, OutputSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n    private type: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: OutputSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n        this.type = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100,\r\n            typeWidth: 100\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        const typeWidth = this.type.current?.width();\r\n        if (!labelWidth || !typeWidth) {\r\n            console.error(`The referenced Konva label or type text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth, typeWidth: typeWidth});\r\n    }\r\n\r\n    render() {\r\n        const { outputSlot, outputConnections, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth, typeWidth } = this.state;\r\n        const config = SlotConfigManager.getConfig(outputSlot.type);\r\n        if (!config) {\r\n            console.error(`Cannot find the input initial values for the given type '${outputSlot.type}'.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={0}\r\n                        y={0}\r\n                        offsetX={36 + labelWidth}\r\n                        height={20}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        align=\"right\"\r\n                        verticalAlign=\"bottom\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputSlot.name} />\r\n                <Text ref={this.type}\r\n                        x={0}\r\n                        y={20}\r\n                        offsetX={36 + typeWidth}\r\n                        height={20}\r\n                        fontSize={10}\r\n                        align=\"right\"\r\n                        verticalAlign=\"top\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputSlot.type} />\r\n                <NodeHandle fill={outputConnections.length > 0 ? config.handleFillColor : \"transparent\"}\r\n                            stroke={config.handleBorderColor}\r\n                            type={config.handleType}\r\n                            isInput={false}\r\n                            isFlow={false}\r\n                            itemId={itemId}\r\n                            slotId={outputSlot.id}\r\n                            onConnect={onConnect} />\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type InputFlowSlotProps = {\r\n    inputFlowSlot: InputFlowSlot;\r\n    inputFlowConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type InputFlowSlotState = {\r\n    \r\n}\r\n\r\nexport class InputFlowSlotDOM extends React.Component<InputFlowSlotProps, InputFlowSlotState> {\r\n    render() {\r\n        const { inputFlowSlot, inputFlowConnection, x, y, itemId, onConnect } = this.props;\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text x={inputFlowSlot.isConnectable ? 36 : 16}\r\n                        y={0}\r\n                        height={40}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        verticalAlign=\"middle\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={inputFlowSlot.name} />\r\n                {(inputFlowSlot.isConnectable && \r\n                    <NodeHandle fill={inputFlowConnection ? Colors.Gray[100] : \"transparent\"}\r\n                                stroke={Colors.Gray[500]}\r\n                                type={HandleType.Arrow}\r\n                                isInput={true}\r\n                                isFlow={true}\r\n                                itemId={itemId}\r\n                                slotId={inputFlowSlot.id}\r\n                                onConnect={onConnect} />\r\n                )}\r\n            </Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport type OutputFlowSlotProps = {\r\n    outputFlowSlot: OutputFlowSlot;\r\n    outputFlowConnection: ItemSlotPair | undefined;\r\n    x: number;\r\n    y: number;\r\n    itemId: number;\r\n    onConnect: (otherItemId: number, otherSlotId: number) => void;\r\n}\r\n\r\nexport type OutputFlowSlotState = {\r\n    labelWidth: number;\r\n}\r\n\r\nexport class OutputFlowSlotDOM extends React.Component<OutputFlowSlotProps, OutputFlowSlotState> {\r\n    private label: React.RefObject<Konva.Text>;\r\n\r\n    constructor(props: OutputFlowSlotProps) {\r\n        super(props);\r\n\r\n        this.label = React.createRef();\r\n\r\n        this.state = {\r\n            labelWidth: 100\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const labelWidth = this.label.current?.width();\r\n        if (!labelWidth) {\r\n            console.error(`The referenced Konva label text could not be found.`);\r\n            return;\r\n        }\r\n\r\n        this.setState({labelWidth: labelWidth});\r\n    }\r\n    \r\n    render() {\r\n        const { outputFlowSlot, outputFlowConnection, x, y, itemId, onConnect } = this.props;\r\n        const { labelWidth } = this.state;\r\n\r\n        return(\r\n            <Group x={x}\r\n                    y={y}>\r\n                <Text ref={this.label}\r\n                        x={0}\r\n                        y={0}\r\n                        offsetX={36 + labelWidth}\r\n                        height={40}\r\n                        fontSize={12}\r\n                        fontStyle=\"bold\"\r\n                        align=\"right\"\r\n                        verticalAlign=\"middle\"\r\n                        fill={Colors.Gray[100]}\r\n                        text={outputFlowSlot.name} />\r\n                <NodeHandle fill={outputFlowConnection ? Colors.Gray[100] : \"transparent\"}\r\n                            stroke={Colors.Gray[500]}\r\n                            type={HandleType.Arrow}\r\n                            isInput={false}\r\n                            isFlow={true}\r\n                            itemId={itemId}\r\n                            slotId={outputFlowSlot.id}\r\n                            onConnect={onConnect} />\r\n            </Group>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Rect, Group, Label, Tag, Text } from 'react-konva';\r\nimport { Group as KonvaGroup } from 'konva/types/Group';\r\nimport Colors from '../utils/Colors';\r\nimport NodeConnections from '../managers/NodeConnections';\r\nimport { Input, KonvaForm } from '../components/KonvaForm';\r\nimport { Path } from 'konva/types/shapes/Path';\r\nimport { NodeItem } from '../models/NodeItem';\r\nimport { InputSlot, OutputSlot, InputFlowSlot, OutputFlowSlot } from '../models/NodeSlot';\r\nimport { InputSlotDOM, OutputSlotDOM, InputFlowSlotDOM, OutputFlowSlotDOM } from './NodeSlot';\r\nimport { KonvaUtils } from '../utils/KonvaUtils';\r\nimport '../assets/css/fontawesome.min.css';\r\nimport '../assets/css/solid.min.css';\r\nimport ScripletManager from '../managers/ScripletManager';\r\n\r\nexport type NodeProps = {\r\n    item: NodeItem;\r\n    width: number;\r\n    rowHeight: number;\r\n    topBarHeight: number;\r\n    handleDragNode(index: number, x: number, y: number): any;\r\n    deleteNodeItem(id: number): any;\r\n    updateDOM(): any;\r\n}\r\n\r\nexport type NodeState = {\r\n    draggedHandlePath: Path | null;\r\n    isStateOpen: boolean;\r\n    stateVisual: KonvaGroup | null;\r\n}\r\n\r\nexport default class Node extends React.Component<NodeProps, NodeState> {\r\n    private group: React.RefObject<KonvaGroup>;\r\n    \r\n    constructor(props: NodeProps) {\r\n        super(props);\r\n\r\n        this.group = React.createRef<KonvaGroup>();\r\n\r\n        this.state = {\r\n            draggedHandlePath: null,\r\n            isStateOpen: false,\r\n            stateVisual: null\r\n        }\r\n\r\n        /*\r\n        this.handleHoverEnterEditableText = this.handleHoverEnterEditableText.bind(this);\r\n        this.handleHoverExitEditableText = this.handleHoverExitEditableText.bind(this);\r\n        this.handleHoverEnterToggleState = this.handleHoverEnterToggleState.bind(this);\r\n        this.handleHoverExitToggleState = this.handleHoverExitToggleState.bind(this);\r\n        this.openState = this.openState.bind(this);\r\n        this.closeState = this.closeState.bind(this);\r\n        this.toggleState = this.toggleState.bind(this);\r\n        */\r\n    }\r\n\r\n    componentDidMount() {\r\n        const layer = this.group.current?.getLayer();\r\n        if (layer) {\r\n        }\r\n    }\r\n\r\n    // These commented code below can eventually be used if there are some node schemas\r\n    // in the future that can have some state saved beyond their inputs.\r\n    /* \r\n    handleHoverEnterToggleState(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"pointer\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", Colors.Gray[700]);\r\n        layer.draw();\r\n    }\r\n\r\n    handleHoverExitToggleState(event: KonvaEventObject<Event>) {\r\n        KonvaUtils.setCursor(event, \"default\");\r\n\r\n        const layer = event.currentTarget.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const textBG = event.currentTarget.children[0];\r\n        textBG.setAttr(\"fill\", Colors.Gray[900]);\r\n        layer.draw();\r\n    }\r\n\r\n    openState() {\r\n        if (this.state.stateVisual) {\r\n            console.error(`This node already has an opened state visual. Close it first then try again.`);\r\n            return;\r\n        }\r\n\r\n        const { item, rowHeight, topBarHeight } = this.props;\r\n\r\n        // Show the custom schema state visual here\r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The node schema could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const state = schema.createNewSchema();\r\n\r\n        const stateVisual = schema.state.onShowStateVisual(this.props);\r\n        if (!stateVisual) {\r\n            console.error(`The Konva group to show the node state could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const thisGroup = this.group.current;\r\n        if (!thisGroup) {\r\n            console.error(`The Konva group for this node could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const layer = thisGroup.getLayer();\r\n        if (!layer) {\r\n            console.error(`The Konva layer could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const bgRect = this.group.current?.children[0] as Konva.Rect;\r\n        if (!bgRect) {\r\n            console.error(`The Konva bg rect could not be found.`);\r\n            return;\r\n        }\r\n\r\n        bgRect.cornerRadius([5, 5, 0, 0]);\r\n\r\n        const height = schema.maxLength() * rowHeight + topBarHeight + 10;\r\n        stateVisual.x(0);\r\n        stateVisual.y(height);\r\n        thisGroup.add(stateVisual);\r\n        layer.draw();\r\n\r\n        this.setState({isStateOpen: true, stateVisual: stateVisual});\r\n    }\r\n\r\n    closeState() {\r\n        if (!this.state.stateVisual) {\r\n            console.error(`This node has no state visual to close.`);\r\n            return;\r\n        }\r\n\r\n        const bgRect = this.group.current?.children[0] as Konva.Rect;\r\n        if (!bgRect) {\r\n            console.error(`The Konva bg rect could not be found.`);\r\n            return;\r\n        }\r\n\r\n        bgRect.cornerRadius(5);\r\n\r\n        this.state.stateVisual.destroy();\r\n        this.setState({isStateOpen: false, stateVisual: null});\r\n    }\r\n\r\n    toggleState() {\r\n        if (this.state.isStateOpen)\r\n            this.closeState();\r\n        else\r\n            this.openState();\r\n    }\r\n    */\r\n\r\n\r\n    render() {\r\n        const { item, width, rowHeight, topBarHeight, handleDragNode, deleteNodeItem, updateDOM } = this.props;\r\n        const height = item.schema ? item.schema.maxLength() * rowHeight + topBarHeight : 0;\r\n        \r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema for node item '${item.id}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        const inputSlots: InputSlot[] = schema.inputSlots;\r\n        const outputSlots: OutputSlot[] = schema.outputSlots;\r\n        const inputFlowSlots: InputFlowSlot[] = schema.inputFlowSlots;\r\n        const outputFlowSlots: OutputFlowSlot[] = schema.outputFlowSlots;\r\n\r\n        let inputs: (InputSlot | InputFlowSlot)[] = [];\r\n        inputs = inputs.concat(inputFlowSlots, inputSlots);\r\n\r\n        let outputs: (OutputSlot | OutputFlowSlot)[] = [];\r\n        outputs = outputs.concat(outputFlowSlots, outputSlots);\r\n\r\n        // TODO: These two seem hackish\r\n        const inputTypeGuard = (input: InputSlot | InputFlowSlot): input is InputSlot => {\r\n            if ((input as InputSlot).type)\r\n                return true;\r\n            return false;\r\n        }\r\n        const outputTypeGuard = (output: OutputSlot | OutputFlowSlot): output is OutputSlot => {\r\n            if ((output as OutputSlot).type)\r\n                return true;\r\n            return false;\r\n        }\r\n        return(\r\n            <Group id={`node-${item.id}`}\r\n                    ref={this.group}\r\n                    x={item.x}\r\n                    y={item.y}\r\n                    width={width}\r\n                    height={height}\r\n                    draggable\r\n                    onDragStart={event => {\r\n                        KonvaUtils.setCursor(event, \"move\");\r\n                        KonvaForm.cancel();\r\n                    }}\r\n                    onDragEnd={event => {\r\n                        KonvaUtils.setCursor(event, \"default\");\r\n                        ScripletManager.currentScriplet?.updateNodes();\r\n                    }}\r\n                    onDragMove={event => handleDragNode(item.id, event.target.x(), event.target.y())}>\r\n                <Rect name=\"background\"\r\n                        x={0}\r\n                        y={0}\r\n                        width={width}\r\n                        height={height + 10}\r\n                        fill={Colors.Gray[900]}\r\n                        cornerRadius={5} />\r\n                <Rect name=\"top-bar\"\r\n                        x={0}\r\n                        y={0}\r\n                        width={width}\r\n                        height={topBarHeight}\r\n                        fill={Colors.Gray[900]}\r\n                        cornerRadius={[5, 5, 0, 0]} />\r\n                <Input x={10}\r\n                        y={2.5}\r\n                        width={schema.isDeletable ? width - 40 : width - 20}\r\n                        height={topBarHeight - 5}\r\n                        borderRadius={2}\r\n                        padding={6}\r\n                        textColor={Colors.Gray[100]}\r\n                        bgColor={Colors.Gray[900]}\r\n                        hoverColor={Colors.Gray[800]}\r\n                        value={(!item.customName || item.customName === \"\") ? item.schema?.name ?? \"undefined\" : item.customName}\r\n                        onChange={value => {\r\n                            item.customName = value;\r\n                            ScripletManager.currentScriplet?.updateNodes();\r\n                            \r\n                            return true;\r\n                        }} />\r\n                {(schema.isDeletable && \r\n                    <Label x={width - 20}\r\n                            y={8}\r\n                            onMouseEnter={event => {\r\n                                event.cancelBubble = true;\r\n                                KonvaUtils.setCursor(event, \"pointer\");\r\n                            }}\r\n                            onMouseLeave={event => {\r\n                                event.cancelBubble = true;\r\n                                KonvaUtils.setCursor(event, \"default\");\r\n                            }}\r\n                            onClick={event => {\r\n                                KonvaUtils.setCursor(event, \"default\");\r\n                                KonvaForm.cancel();\r\n                                deleteNodeItem(item.id);\r\n                            }}>\r\n                        <Tag fill={Colors.Red[500]}\r\n                            cornerRadius={15} />\r\n                        <Text width={12}\r\n                                height={12}\r\n                                fontSize={14}\r\n                                fontStyle=\"bold\"\r\n                                align=\"center\"\r\n                                verticalAlign=\"center\"\r\n                                fill={Colors.Gray[900]}\r\n                                text=\"&#215;\" />\r\n                    </Label>\r\n                )}\r\n                <Rect x={0}\r\n                        y={topBarHeight}\r\n                        width={width}\r\n                        height={rowHeight * (item.schema?.maxLength() ?? 1)}\r\n                        fill={Colors.Gray[800]} />\r\n                {Array.from(Array(item.schema?.maxLength() ?? 0)).map((it, i) => {\r\n                const input: InputSlot | undefined = i < inputs.length && inputTypeGuard(inputs[i]) ? inputs[i] as InputSlot : undefined;\r\n                const output: OutputSlot | undefined = i < outputs.length && outputTypeGuard(outputs[i]) ? outputs[i] as OutputSlot : undefined;\r\n\r\n                if (input && input.name == null)\r\n                    input.name = `Input${i}`;\r\n                if (output && output.name == null)\r\n                    output.name = `Output${i}`;\r\n\r\n                const inputFlow: InputFlowSlot | undefined = i < inputs.length && !inputTypeGuard(inputs[i]) ? inputs[i] as InputFlowSlot : undefined;\r\n                const outputFlow: OutputFlowSlot | undefined = i < outputs.length && !outputTypeGuard(outputs[i]) ? outputs[i] as OutputFlowSlot : undefined;\r\n                \r\n                if (inputFlow && inputFlow.name == null)\r\n                    inputFlow.name = `Flow${i}`;\r\n                if (outputFlow && outputFlow.name == null)\r\n                    outputFlow.name = `Flow${i}`;\r\n                return(\r\n                    <React.Fragment key={`node-slot-${item.id}-${i}`}>\r\n                        {input != null  && \r\n                            <>\r\n                            <InputSlotDOM inputSlot={input}\r\n                                        inputConnection={item.getInputConnection(input.id)}\r\n                                        x={0}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onInputChange={value => {\r\n                                            item.setInputValue(input.id, value);\r\n                                            ScripletManager.currentScriplet?.updateNodes();\r\n\r\n                                            return true;\r\n                                        }}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addConnection(item.id, input.id, otherItemId, otherSlotId);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {output != null &&\r\n                            <>\r\n                            <OutputSlotDOM outputSlot={output}\r\n                                        outputConnections={item.getOutputConnections(output.id)}\r\n                                        x={width}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addConnection(otherItemId, otherSlotId, item.id, output.id);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {inputFlow != null  && \r\n                            <>\r\n                            <InputFlowSlotDOM inputFlowSlot={inputFlow}\r\n                                        inputFlowConnection={item.getInputFlowConnection(inputFlow.id)}\r\n                                        x={0}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addFlowConnection(item.id, inputFlow.id, otherItemId, otherSlotId);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                        {outputFlow != null &&\r\n                            <>\r\n                            <OutputFlowSlotDOM outputFlowSlot={outputFlow}\r\n                                        outputFlowConnection={item.getOutputFlowConnection(outputFlow.id)}\r\n                                        x={width}\r\n                                        y={topBarHeight + (i * rowHeight)}\r\n                                        itemId={item.id}\r\n                                        onConnect={(otherItemId, otherSlotId) => {\r\n                                            NodeConnections.addFlowConnection(otherItemId, otherSlotId, item.id, outputFlow.id);\r\n                                            updateDOM();\r\n                                        }} />\r\n                            </>\r\n                        }\r\n                    </React.Fragment>\r\n                );\r\n                })}\r\n                {/*\r\n                <Label name=\"show-state\"\r\n                        x={0}\r\n                        y={height}\r\n                        width={width}\r\n                        height={5}\r\n                        onMouseEnter={this.handleHoverEnterToggleState}\r\n                        onMouseLeave={this.handleHoverExitToggleState}\r\n                        onClick={this.toggleState}>\r\n                    <Tag fill={Colors.Gray[900]}\r\n                            cornerRadius={5} />\r\n                    <Text width={width}\r\n                            height={10}\r\n                            fontFamily=\"Font Awesome\\ 5 Free\"\r\n                            text={`${this.state.isStateOpen ? \"\\uf106\" : \"\\uf107\"}`}\r\n                            fill={Colors.Gray[100]}\r\n                            align=\"center\"\r\n                            verticalAlign=\"middle\" />\r\n                </Label>\r\n                */}\r\n            </Group>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { Path } from 'react-konva';\r\nimport Colors from '../utils/Colors';\r\n\r\nexport type EdgeProps = {\r\n    startPos: Vector2d;\r\n    endPos: Vector2d;\r\n    nodeWidthOther: number;\r\n    nodeHeight: number;\r\n    handleOnClick?(): any;\r\n    children?(midpointPos: Vector2d, isHovered: boolean): React.ReactNode | null;\r\n}\r\n\r\nexport type EdgeState = {\r\n    isHovered: boolean;\r\n}\r\n\r\nexport default class Edge extends React.Component<EdgeProps, EdgeState> {\r\n    constructor(props: EdgeProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isHovered: false\r\n        };\r\n\r\n        this.handleOnEnter = this.handleOnEnter.bind(this);\r\n        this.handleOnExit = this.handleOnExit.bind(this);\r\n    }\r\n\r\n    handleOnEnter() {\r\n        this.setState({isHovered: true});\r\n    }\r\n\r\n    handleOnExit() {\r\n        this.setState({isHovered: false});\r\n    }\r\n\r\n    render() {\r\n        const { startPos, endPos, nodeWidthOther: nodeWidthOutput, nodeHeight, handleOnClick, children } = this.props;\r\n        const { isHovered } = this.state;\r\n        const halfNodeHeight = nodeHeight / 2;\r\n        const midpointPos: Vector2d = {\r\n            x: ((endPos.x - startPos.x - nodeWidthOutput) / 2) + (startPos.x + nodeWidthOutput),\r\n            y: ((endPos.y + halfNodeHeight - startPos.y - halfNodeHeight) / 2) + (startPos.y + halfNodeHeight)\r\n        }\r\n        const pathData = `M${startPos.x + nodeWidthOutput} ${startPos.y + halfNodeHeight - 2} Q${startPos.x + nodeWidthOutput + 30} ${startPos.y + halfNodeHeight - 2} ${midpointPos.x} ${midpointPos.y - 2} Q${endPos.x - 30} ${endPos.y + halfNodeHeight - 2} ${endPos.x} ${endPos.y + halfNodeHeight - 2}`;\r\n        return(\r\n            <>\r\n                <Path data={pathData}\r\n                    stroke={Colors.Gray[800]}\r\n                    strokeWidth={4} />\r\n                <Path data={pathData}\r\n                    className=\"cursor-pointer\"\r\n                    stroke=\"transparent\"\r\n                    strokeWidth={50}\r\n                    onMouseEnter={event => {\r\n                        this.handleOnEnter();\r\n                        const stage = event.target.getStage();\r\n                        if (!stage) {\r\n                            console.error(`The Konva stage could not be found.`);\r\n                            return;\r\n                        }\r\n                        stage.container().style.cursor = \"pointer\";\r\n                    }}\r\n                    onMouseLeave={event => {\r\n                        this.handleOnExit();\r\n                        const stage = event.target.getStage();\r\n                        if (!stage) {\r\n                            console.error(`The Konva stage could not be found.`);\r\n                            return;\r\n                        }\r\n                        stage.container().style.cursor = \"default\";\r\n                    }}\r\n                    onMouseDown={handleOnClick}\r\n                    onTouchEnd={handleOnClick} />\r\n                {children != null ? children(midpointPos, isHovered) : null}\r\n            </>\r\n        );\r\n    }\r\n}","import { BaseNodeSchema } from \"../models/NodeSchema\";\r\nimport NodeSchemaManager from \"./NodeSchemaManager\";\r\n\r\nexport class Category {\r\n    public name: string;\r\n    public subCategories: Category[];\r\n    public contentChildren: BaseNodeSchema[];\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.subCategories = [];\r\n        this.contentChildren = [];\r\n    }\r\n\r\n    getSubCategory(name: string) {\r\n        let subCategory = this.subCategories.find(cat => cat.name === name);\r\n        if (!subCategory) {\r\n            subCategory = new Category(name);\r\n            this.subCategories.push(subCategory);\r\n        }\r\n\r\n        return subCategory;\r\n    }\r\n\r\n    addContent(id: string) {\r\n        if (this.contentChildren.find(schema => schema.name === id)) {\r\n            console.error(`A duplicate of the schema '${id}' was found.`);\r\n            return;\r\n        }\r\n\r\n        const schema = NodeSchemaManager.getBaseSchema(id);\r\n        this.contentChildren.push(schema);\r\n    }\r\n}\r\n\r\nclass CategoryManager {\r\n    getRootSchemaCategory(schemas: BaseNodeSchema[]): Category {\r\n        const categoryRoot = new Category(\"root\");\r\n\r\n        let currentCategory = categoryRoot;\r\n        schemas.forEach(schema => {\r\n            const idArr = schema.id.split(\"/\");\r\n            let i;\r\n            for (i = 0; i < idArr.length - 1; i++) {\r\n                currentCategory = currentCategory.getSubCategory(idArr[i]);\r\n            }\r\n            currentCategory.addContent(schema.id);\r\n            currentCategory = categoryRoot;\r\n        });\r\n\r\n        return categoryRoot;\r\n    }\r\n}\r\n\r\nexport default new CategoryManager();","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport NodeSchemaManager from '../managers/NodeSchemaManager';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\nimport { BaseNodeSchema } from '../models/NodeSchema';\r\nimport CategoryManager, { Category } from '../managers/CategoryManager';\r\n\r\nexport type SchemaCategoryProps = {\r\n    category: Category;\r\n    depth: number;\r\n    addNodeItem: (id: string) => any;\r\n}\r\n\r\nexport type SchemaCategoryState = {\r\n    showChildren: boolean;\r\n}\r\n\r\nclass SchemaCategory extends React.Component<SchemaCategoryProps, SchemaCategoryState> {\r\n    constructor(props: SchemaCategoryProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showChildren: true\r\n        }\r\n\r\n        this.toggleCategory = this.toggleCategory.bind(this);\r\n        this.openCategory = this.openCategory.bind(this);\r\n        this.closeCategory = this.closeCategory.bind(this);\r\n    }\r\n\r\n    toggleCategory() {\r\n        if (this.state.showChildren)\r\n            this.closeCategory();\r\n        else\r\n            this.openCategory();\r\n    }\r\n\r\n    openCategory() {\r\n        this.setState({showChildren: true});\r\n    }\r\n\r\n    closeCategory() {\r\n        this.setState({showChildren: false});\r\n    }\r\n\r\n    render() {\r\n        const { category, depth, addNodeItem } = this.props;\r\n        const { showChildren } = this.state;\r\n        if (category.name.toLowerCase() === \"hidden\")\r\n            return null;\r\n        return (\r\n            <div style={{marginLeft: `${category.name === \"root\" ? -1 : 0}rem`}}>\r\n                {category.name !== \"root\" && (\r\n                    <div className=\"flex flex-row items-center rounded-sm border-b bg-gray-900 hover:bg-gray-800 text-gray-100 cursor-pointer select-none\" \r\n                            style={{borderColor: \"#111111\"}}\r\n                            onClick={this.toggleCategory}>\r\n                        <div className=\"px-2 text-xs\">\r\n                            <FontAwesomeIcon icon=\"chevron-down\" className={`${showChildren ? \"hidden\" : \"\"}`} />\r\n                            <FontAwesomeIcon icon=\"chevron-up\" className={`${showChildren ? \"\" : \"hidden\"}`} />\r\n                        </div>\r\n                        <div className=\"text-sm\">\r\n                            {category.name}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className={`${showChildren ? \"\" : \"hidden\"} pl-4 border-l border-dashed border-gray-700`}>\r\n                    <div className=\"\">\r\n                        {category.subCategories.map((subCategory, index) => (\r\n                            <SchemaCategory key={`category-${depth}-${index}`}\r\n                                            category={subCategory} \r\n                                            depth={depth + 1}\r\n                                            addNodeItem={addNodeItem} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"\">\r\n                        {category.contentChildren.map((child, index) => (\r\n                            <div key={`child-${depth}-${index}`} \r\n                                className=\"px-2 rounded-sm hover:bg-gray-700 text-gray-100 cursor-pointer select-none\"\r\n                                onClick={event => {\r\n                                    event.stopPropagation();\r\n                                    addNodeItem(child.id);\r\n                                }}>\r\n                                {child.name}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport type SchemaSelectorProps = {\r\n    isVisible: boolean;\r\n    x: number;\r\n    y: number;\r\n    addNodeItem: (id: string) => any;\r\n}\r\n\r\nexport type SchemaSelectorState = {\r\n    searchValue: string;\r\n    schemaResults: BaseNodeSchema[];\r\n}\r\n\r\n// TODO: Categorized selector\r\nexport default class SchemaSelector extends React.Component<SchemaSelectorProps, SchemaSelectorState> {\r\n    constructor(props: SchemaSelectorProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchValue: \"\",\r\n            schemaResults: NodeSchemaManager.getBaseSchemas()\r\n        }\r\n\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n        this.onSearchReset = this.onSearchReset.bind(this);\r\n        this.filterSearch = this.filterSearch.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.filterSearch(\"\");\r\n    }\r\n\r\n    onSearchChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const searchValue = event.target.value;\r\n        this.filterSearch(searchValue);\r\n    }\r\n\r\n    onSearchReset() {\r\n        this.filterSearch(\"\");\r\n    }\r\n\r\n    filterSearch(searchValue: string) {\r\n        let schemas = NodeSchemaManager.getBaseSchemas();\r\n        schemas = schemas.filter(schema => (schema.name.toLowerCase().includes(searchValue.toLowerCase()) || \r\n                                            schema.id.toLowerCase().includes(searchValue.toLowerCase())) &&\r\n                                            !schema.id.toLowerCase().includes(\"hidden\"));\r\n        this.setState({schemaResults: schemas, searchValue: searchValue});\r\n    }\r\n\r\n    render() {\r\n        const { isVisible, x, y, addNodeItem } = this.props;\r\n        const { schemaResults } = this.state;\r\n\r\n        const width = 300;\r\n        const height = 250;\r\n\r\n        const rootCategory = CategoryManager.getRootSchemaCategory(schemaResults);\r\n        return (\r\n            <div className={`${isVisible ? \"flex\" : \"hidden\"} flex-col absolute rounded bg-gray-900 bg-opacity-90`} \r\n                    style={{top: y, left: x, width: `${Math.min(width, window.innerWidth - x)}px`, height: `${Math.min(height, window.innerHeight - y)}px`}}>\r\n                <div className=\"p-3 h-12 flex flex-row w-full\">\r\n                    <div className=\"px-2 rounded-l-full bg-gray-100\">\r\n                        <FontAwesomeIcon icon=\"search\" \r\n                                            className=\"text-sm text-gray-700\" />\r\n                    </div>\r\n                    \r\n                    <input type=\"text\" \r\n                                value={this.state.searchValue}\r\n                                className=\"w-full bg-gray-100 border-none text-sm\"\r\n                                onChange={this.onSearchChange} />\r\n                    <button className=\"px-2 flex items-center rounded-r-full bg-gray-100\"\r\n                            onClick={this.onSearchReset}>\r\n                        <FontAwesomeIcon icon=\"times-circle\" \r\n                                            className=\"text-sm text-gray-700\" />\r\n                    </button>\r\n                </div>\r\n                <Scrollbar noScrollX>\r\n                    <div className=\"pb-4\">\r\n                        <SchemaCategory category={rootCategory} depth={0} addNodeItem={addNodeItem} />\r\n                    </div>\r\n                </Scrollbar>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Node from './Node';\r\nimport { Stage, Layer, Group, Rect, Text } from 'react-konva';\r\nimport { Stage as PortalStage, Layer as PortalLayer, Portal } from 'react-konva-portal';\r\nimport Edge from './Edge';\r\nimport Colors from '../utils/Colors';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport NodeConnections from '../managers/NodeConnections';\r\nimport ScripletManager from '../managers/ScripletManager';\r\nimport Konva from 'konva';\r\nimport FontFaceObserver from 'fontfaceobserver';\r\nimport { KonvaForm } from './KonvaForm';\r\nimport SchemaSelector from './SchemaSelector';\r\nimport { Vector2d } from 'konva/types/types';\r\nimport { ItemSlotPair } from '../models/NodeSlot';\r\n\r\nexport type ScripletRootProps = {\r\n    scripletId: number;\r\n}\r\n\r\nexport type ScripletRootState = {\r\n    isDirtyDOM: boolean;\r\n    isReadyToMount: boolean;\r\n    isReady: boolean;\r\n    contextMenu: Konva.Node | null;\r\n    inputElement: HTMLInputElement | null;\r\n    isContextMenuShown: boolean;\r\n    contextMenuPos: Vector2d;\r\n    nodeInitPos: Vector2d;\r\n}\r\n\r\nexport default class ScripletRoot extends React.Component<ScripletRootProps, ScripletRootState> {\r\n    private stageContainer: React.RefObject<HTMLDivElement>;\r\n    private stage: React.RefObject<Stage>;\r\n\r\n    constructor(props: ScripletRootProps) {\r\n        super(props);\r\n\r\n        this.stageContainer = React.createRef<HTMLDivElement>();\r\n        this.stage = React.createRef<Stage>();\r\n\r\n        this.state = {\r\n            isDirtyDOM: false,\r\n            isReadyToMount: false,\r\n            isReady: false,\r\n            contextMenu: null,\r\n            inputElement: null,\r\n            isContextMenuShown: false,\r\n            contextMenuPos: {x: 0, y: 0},\r\n            nodeInitPos: {x: 0, y: 0}\r\n        };\r\n\r\n        this.updateDOM = this.updateDOM.bind(this);\r\n        this.addNodeItem = this.addNodeItem.bind(this);\r\n        this.deleteNodeItem = this.deleteNodeItem.bind(this);\r\n        this.handleDragNode = this.handleDragNode.bind(this);\r\n        this.handleDeleteEdge = this.handleDeleteEdge.bind(this);\r\n        this.handleDeleteFlowEdge = this.handleDeleteFlowEdge.bind(this);\r\n        this.handleZoom = this.handleZoom.bind(this);\r\n        this.handleContextMenu = this.handleContextMenu.bind(this);\r\n        this.handleCancelContextMenu = this.handleCancelContextMenu.bind(this);\r\n        this.fitToParent = this.fitToParent.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ScripletManager.selectScriplet(this.props.scripletId).then(result => {\r\n            if (!result)\r\n                return;\r\n\r\n            this.setState({isReadyToMount: true});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.fitToParent);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.isReadyToMount) {\r\n            window.addEventListener('resize', this.fitToParent);\r\n            this.fitToParent();\r\n\r\n            const stage = this.stage.current?.getStage();\r\n            if (stage) {\r\n                const fontAwesomeObserver = new FontFaceObserver(\"Font Awesome 5 Free\");\r\n                // This is necessary to show the fontawesome icons at start\r\n                fontAwesomeObserver.load().then(() => {\r\n                    console.log(\"Font Awesome 5 has loaded!\");\r\n                    stage.draw();\r\n                }, () => {\r\n                    console.error(\"Font Awesome 5 has not loaded!\");\r\n                });\r\n            }\r\n\r\n            this.setState({isReadyToMount: false, isReady: true});\r\n        }\r\n\r\n        if (this.state.isDirtyDOM) {\r\n            this.setState({isDirtyDOM: false});\r\n        }\r\n    }\r\n\r\n    updateDOM() {\r\n        this.setState({isDirtyDOM: true});\r\n    }\r\n\r\n    addNodeItem(id: string) {\r\n        const { nodeInitPos } = this.state;\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        scriplet.addNode(nodeInitPos.x, nodeInitPos.y, id, [], [], [], new Map<number, ItemSlotPair[]>(), []);\r\n        this.handleCancelContextMenu();\r\n        this.updateDOM();\r\n    }\r\n\r\n    deleteNodeItem(id: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const item = scriplet.getNode(id);\r\n        if (!item) {\r\n            console.error(`The node item of id '${id}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema of node item '${id}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (!schema.isDeletable) {\r\n            console.error(`This schema cannot be deleted.`);\r\n            return;\r\n        }\r\n\r\n        // Delete the node connections to other nodes too\r\n        if (NodeConnections.deleteAllConnections(id)) {\r\n            scriplet.deleteNode(id);\r\n            this.updateDOM();\r\n        }\r\n    }\r\n\r\n    // Should only happen on drag end, but node connections won't follow anymore if not done on drag move\r\n    // TODO: Optimize this!\r\n    handleDragNode(itemId: number, x: number, y: number) {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const node = scriplet.getNode(itemId);\r\n        if (!node) {\r\n            console.error(`The node of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n\r\n        node.x = x;\r\n        node.y = y;\r\n\r\n        scriplet.items.set(itemId, node);\r\n\r\n        // TODO: This lags! If possible, access the edges (konva path) directly and change the coords there\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleDeleteEdge(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        NodeConnections.deleteConnection(inputItemId, inputSlotId, outputItemId, outputSlotId);\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleDeleteFlowEdge(inputItemId: number, inputSlotId: number, outputItemId: number, outputSlotId: number) {\r\n        NodeConnections.deleteFlowConnection(inputItemId, inputSlotId, outputItemId, outputSlotId);\r\n        this.updateDOM();\r\n    }\r\n\r\n    handleZoom(event: KonvaEventObject<WheelEvent>) {\r\n        event.evt.preventDefault();\r\n        const stage = event.target.getStage();\r\n        if (!stage) {\r\n            console.error(`The Konva Stage could not be found.`);\r\n            return;\r\n        }\r\n            \r\n        const oldScale: number = stage.scaleX();\r\n        const scaleBy = 1.1;\r\n        const pointer = stage.getPointerPosition();\r\n        if (!pointer) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const mousePosition = {\r\n            x: (pointer.x - stage.x()) / oldScale,\r\n            y: (pointer.y - stage.y()) / oldScale\r\n        };\r\n\r\n        const newScale = event.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n\r\n        stage.scale({ x: newScale, y: newScale});\r\n\r\n        const newPos = {\r\n            x: pointer.x - mousePosition.x * newScale,\r\n            y: pointer.y - mousePosition.y * newScale\r\n        };\r\n        stage.position(newPos);\r\n        stage.batchDraw();\r\n    }\r\n\r\n    handleContextMenu(event: KonvaEventObject<PointerEvent>) {\r\n        if (event.target.getType() !== \"Stage\")\r\n            return;\r\n        const stage = event.target.getStage();\r\n        const layer: Konva.Layer | null = event.target.getChildren(item => item.getAttr(\"data-name\") === \"context-menu-layer\")[0];\r\n        if (!layer || !stage) {\r\n            console.error(`Either the Konva layer or Konva stage could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const pointerPos = stage.getPointerPosition();\r\n        if (!pointerPos) {\r\n            console.error(`The Konva pointer position could not be found.`);\r\n            return;\r\n        }\r\n\r\n        pointerPos.x = (pointerPos.x - stage.x()) / stage.scaleX();\r\n        pointerPos.y = (pointerPos.y - stage.y()) / stage.scaleY();\r\n\r\n        this.setState({isContextMenuShown: true, contextMenuPos: {x: event.evt.pageX, y: event.evt.pageY}, nodeInitPos: pointerPos});\r\n    }\r\n\r\n    handleCancelContextMenu() {\r\n        this.setState({isContextMenuShown: false});\r\n    }\r\n\r\n    fitToParent() {\r\n        const container = this.stageContainer.current;\r\n        const stage = this.stage.current;\r\n        if (!container || !stage) {\r\n            console.error(`Either the referenced container or referenced stage could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const stageObj = stage.getStage();\r\n        stageObj.width(container.offsetWidth);\r\n        stageObj.height(container.offsetHeight);\r\n        stageObj.draw();\r\n    }\r\n    \r\n    render() {\r\n        const { isReadyToMount, isReady, isContextMenuShown, contextMenuPos } = this.state;\r\n\r\n        if (!isReadyToMount && !isReady)\r\n            return null;\r\n\r\n        const rowHeight = 40;\r\n        const topBarHeight = 30;\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet of id '${this.props.scripletId}' could not be found.`);\r\n            return null;\r\n        }\r\n\r\n        return(\r\n            <div ref={this.stageContainer} className=\"main\">\r\n                <PortalStage ref={this.stage}\r\n                    className=\"bg-gray-200\"\r\n                    onWheel={(event: KonvaEventObject<WheelEvent>) => {\r\n                        this.handleZoom(event);\r\n                        this.handleCancelContextMenu();\r\n                        KonvaForm.cancel();\r\n                    }}\r\n                    onContextMenu={(event: KonvaEventObject<PointerEvent>) => {\r\n                        event.evt.preventDefault();\r\n                        event.cancelBubble = true;\r\n\r\n                        this.handleContextMenu(event);\r\n                    }}\r\n                    onClick={(event: KonvaEventObject<MouseEvent>) => {\r\n                        this.handleCancelContextMenu();\r\n                        KonvaForm.cancel();\r\n                    }}\r\n                    onDragStart={(event: KonvaEventObject<DragEvent>)  => {\r\n                        this.handleCancelContextMenu();\r\n                        KonvaForm.cancel();\r\n                    }}\r\n                    draggable>\r\n                    <PortalLayer id=\"edges-layer\">\r\n                    </PortalLayer>\r\n                    <Layer>\r\n                        {[...scriplet.getNodes()].map(item => {\r\n                        const schema = item.schema;\r\n                        if (!schema) {\r\n                            console.error(`The schema for node item '${item.id}' could not be found.`);\r\n                            return null;\r\n                        }\r\n                        const inputSlots = NodeConnections.getInputConnections(item.id);\r\n                        const inputFlowSlots = NodeConnections.getInputFlowConnections(item.id);\r\n                        return (\r\n                            <Group key={`node-${item.id}`}>\r\n                                {inputSlots.map(conn => {\r\n                                if (!conn)\r\n                                    return null;\r\n                                const otherItem = scriplet.getNode(conn.itemId);\r\n                                if (!otherItem) {\r\n                                    console.error(`The node item of id '${conn.itemId}' could not be found.`);\r\n                                    return null;\r\n                                }\r\n                                const otherSchema = otherItem.schema;\r\n                                if (!otherSchema) {\r\n                                    console.error(`The schema for node item '${otherItem.id}' could not be found.`);\r\n                                    return null;\r\n                                }\r\n                                return(\r\n                                    <Portal key={`edge-${item.id}-${conn.id}-${conn.itemId}-${conn.slotId}`} \r\n                                            containerId=\"edges-layer\">\r\n                                        <Edge \r\n                                            startPos={{x: otherItem.x, y: otherItem.y + (conn.slotId * rowHeight) + topBarHeight}}\r\n                                            endPos={{x: item.x, y: item.y + (conn.id * rowHeight) + topBarHeight}}\r\n                                            nodeWidthOther={otherSchema.width}\r\n                                            nodeHeight={rowHeight}\r\n                                            handleOnClick={() => this.handleDeleteEdge(item.id, conn.id, conn.itemId, conn.slotId)}>\r\n                                            {(midpointPos, isHovered) => (\r\n                                                <>\r\n                                                    <Rect visible={isHovered}\r\n                                                        x={midpointPos.x - 12}\r\n                                                        y={midpointPos.y - 10}\r\n                                                        width={24}\r\n                                                        height={16}\r\n                                                        fill={Colors.Gray[800]}\r\n                                                        listening={false} />\r\n                                                    <Text visible={isHovered}\r\n                                                        x={midpointPos.x - 12}\r\n                                                        y={midpointPos.y - 10}\r\n                                                        width={24}\r\n                                                        height={19}\r\n                                                        text=\"&#215;\"\r\n                                                        fontStyle=\"bold\"\r\n                                                        fontSize={20}\r\n                                                        align=\"center\"\r\n                                                        verticalAlign=\"middle\"\r\n                                                        fill={Colors.Gray[100]}\r\n                                                        listening={false} />\r\n                                                </>\r\n                                            )}\r\n                                        </Edge>\r\n                                    </Portal>\r\n                                );\r\n                                })}\r\n                                {inputFlowSlots.map(conn => {\r\n                                if (!conn)\r\n                                    return null;\r\n                                const otherItem = scriplet.getNode(conn.itemId);\r\n                                if (!otherItem) {\r\n                                    console.error(`The item of id '${conn.itemId}' could not be found.`);\r\n                                    return null;\r\n                                }\r\n                                const otherSchema = otherItem.schema;\r\n                                if (!otherSchema) {\r\n                                    console.error(`The schema for node item '${otherItem.id}' could not be found.`);\r\n                                    return null;\r\n                                }\r\n                                return(\r\n                                    <Portal key={`edge-flow-${item.id}-${conn.id}-${conn.itemId}-${conn.slotId}`} \r\n                                            containerId=\"edges-layer\">\r\n                                        <Edge \r\n                                            startPos={{x: otherItem.x, y: otherItem.y + (conn.slotId * rowHeight) + topBarHeight}}\r\n                                            endPos={{x: item.x, y: item.y + (conn.id * rowHeight) + topBarHeight}}\r\n                                            nodeWidthOther={otherSchema.width}\r\n                                            nodeHeight={rowHeight}\r\n                                            handleOnClick={() => this.handleDeleteFlowEdge(item.id, conn.id, conn.itemId, conn.slotId)}>\r\n                                            {(midpointPos, isHovered) => (\r\n                                                <>\r\n                                                    <Rect visible={isHovered}\r\n                                                        x={midpointPos.x - 12}\r\n                                                        y={midpointPos.y - 10}\r\n                                                        width={24}\r\n                                                        height={16}\r\n                                                        fill={Colors.Gray[800]}\r\n                                                        listening={false} />\r\n                                                    <Text visible={isHovered}\r\n                                                        x={midpointPos.x - 12}\r\n                                                        y={midpointPos.y - 10}\r\n                                                        width={24}\r\n                                                        height={19}\r\n                                                        text=\"&#215;\"\r\n                                                        fontStyle=\"bold\"\r\n                                                        fontSize={20}\r\n                                                        align=\"center\"\r\n                                                        verticalAlign=\"middle\"\r\n                                                        fill={Colors.Gray[100]}\r\n                                                        listening={false} />\r\n                                                </>\r\n                                            )}\r\n                                        </Edge>\r\n                                    </Portal>\r\n                                );\r\n                                })}\r\n                                <Node item={item}\r\n                                    width={schema.width}\r\n                                    rowHeight={rowHeight}\r\n                                    topBarHeight={topBarHeight}\r\n                                    handleDragNode={this.handleDragNode}\r\n                                    deleteNodeItem={this.deleteNodeItem}\r\n                                    updateDOM={this.updateDOM} />\r\n                            </Group>\r\n                        );\r\n                        })}\r\n                    </Layer>\r\n                    <Layer data-name=\"context-menu-layer\">\r\n                    </Layer>\r\n                </PortalStage>\r\n                <SchemaSelector isVisible={isContextMenuShown} x={contextMenuPos.x} y={contextMenuPos.y} addNodeItem={this.addNodeItem} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Controlled as CodeMirror } from 'react-codemirror2';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ScripletManager from '../managers/ScripletManager';\r\nimport Console, { ConsoleMessage } from '../managers/Console';\r\nimport Scrollbar from 'react-scrollbars-custom';\r\n\r\nrequire('codemirror/mode/javascript/javascript');\r\nvar jsbeautify = require('js-beautify').js_beautify;\r\n\r\nexport class EvalResult {\r\n    public inputVars: string[];\r\n    public outputVar: string;\r\n    public evalValue: any;\r\n    public toParent: string;\r\n    public toCode: string;\r\n\r\n    constructor(evalValue: any, toParent: string, toCode: string) {\r\n        this.inputVars = [];\r\n        this.outputVar = \"\";\r\n        this.evalValue = evalValue;\r\n        this.toParent = toParent;\r\n        this.toCode = toCode;\r\n    }\r\n}\r\n\r\nexport type CodeProps = {\r\n    scripletId: number;\r\n}\r\n\r\nexport type CodeState = {\r\n    editorValue: string;\r\n    isCodeOpen: boolean;\r\n    screenWidth: number;\r\n}\r\n\r\nexport default class CodeEditor extends React.Component<CodeProps, CodeState> {\r\n    private codeResult: React.RefObject<HTMLDivElement>;\r\n    constructor(props: CodeProps) {\r\n        super(props);\r\n\r\n        this.codeResult = React.createRef();\r\n        this.state = {\r\n            editorValue: jsbeautify(\"return 42;\", { indent_size: 4 }),\r\n            isCodeOpen: false,\r\n            screenWidth: window.innerWidth\r\n        }\r\n\r\n        this.setScreenWidth = this.setScreenWidth.bind(this);\r\n        this.handleRun = this.handleRun.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleBeautifyCode = this.handleBeautifyCode.bind(this);\r\n        this.handleEvaluateNodes = this.handleEvaluateNodes.bind(this);\r\n        //this.evaluateNodes = this.evaluateNodes.bind(this);\r\n        this.openCode = this.openCode.bind(this);\r\n        this.closeCode = this.closeCode.bind(this);\r\n        this.toggleCode = this.toggleCode.bind(this);\r\n\r\n        this.onMessageLog = this.onMessageLog.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.setScreenWidth);\r\n        \r\n        Console.subscribe(message => this.onMessageLog(message));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.setScreenWidth);\r\n    }\r\n\r\n    setScreenWidth() {\r\n        this.setState({screenWidth: window.innerWidth});\r\n    }\r\n\r\n    handleRun() {\r\n        const scriplet = ScripletManager.currentScriplet;\r\n        if (!scriplet) {\r\n            console.error(`The current scriplet could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const startNode = scriplet.getStart();\r\n        const startSchema = startNode.schema;\r\n        if (!startSchema) {\r\n            console.error(`The start node is missing the schema.`);\r\n            return;\r\n        }\r\n\r\n        const startSlot = startSchema.inputFlowSlots[0];\r\n        if (!startSlot) {\r\n            console.error(`The start node is missing the Entry input flow slot.`);\r\n            return;\r\n        }\r\n\r\n        startSlot.evaluateSlot();\r\n        Console.success(\"Finished running code!\");\r\n    }\r\n\r\n    handleClear() {\r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`App console could not be found.`);\r\n            return;\r\n        }\r\n\r\n        codeResult.innerText = \"Run code first\";\r\n    }\r\n\r\n    handleBeautifyCode() {\r\n        this.setState(prevState => ({editorValue: jsbeautify(prevState.editorValue, { indent_size: 4 })}));\r\n    }\r\n\r\n    handleEvaluateNodes() {\r\n        /*\r\n        // Look for the output node\r\n        const scriplet = this.state.scriplet;\r\n        if (!scriplet) {\r\n            console.error(`The scriplet in this state could not be found.`);\r\n            return;\r\n        }\r\n\r\n        const items = [...scriplet.items];\r\n        const inputEntries = items.filter(entry => entry[1].schema?.name === \"Input\");\r\n        if (!inputEntries) {\r\n            console.error(`No input nodes were found in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        const outputEntries = items.filter(entry => entry[1].schema?.name === \"Output\");\r\n        if (!outputEntries) {\r\n            console.error(`No output nodes were found in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        \r\n        let visited = new Map<number, EvalResult>();\r\n        const results: EvalResult[] = [];\r\n        let inputInitStrs = \"\";\r\n        outputEntries.forEach(entry => {\r\n            const result = this.evaluateNodes(new EvalResult(0, \"\", \"\"), visited, entry[1].id);\r\n            if (result)\r\n                results.push(result);\r\n            \r\n            inputEntries.forEach(entry2 => {\r\n                const inputRes = visited.get(entry2[1].id);\r\n                if (inputRes) {\r\n                    const code = `const ${entry2[1].variableName} = ${inputRes.evalValue}; `;\r\n                    if (!inputInitStrs.includes(code))\r\n                        inputInitStrs += code;\r\n                }\r\n            });\r\n            visited = new Map<number, EvalResult>();\r\n        });\r\n\r\n        if (!results) {\r\n            console.error(`Something went wrong when evaluating the nodes of the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n        \r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`Could not get the div element of the referenced code result element.`);\r\n            return;\r\n        }\r\n\r\n        let fullCode: string = `${inputInitStrs}`;\r\n        const evalValues: any[] = [];\r\n        results.forEach(result => {\r\n            const code = `function ${result.outputVar}(${result.inputVars}) { ${result.toCode} }`;\r\n            evalValues.push(result.evalValue);\r\n            if (code)\r\n                fullCode += code;\r\n        });\r\n        fullCode += \"return [\";\r\n        results.forEach((result, index) => {\r\n            fullCode += index === results.length - 1 ? `${result.outputVar}(${result.inputVars})` : `${result.outputVar}(${result.inputVars}), `;\r\n        });\r\n        fullCode += \"];\"\r\n\r\n        codeResult.textContent = evalValues.toString();\r\n        this.setState({editorValue: jsbeautify(fullCode, { indent_size: 4 })});\r\n        */\r\n    }\r\n\r\n    /* TODO: This is too hackish\r\n    // What this should do is place all the state data (like evaluated value, )\r\n    evaluateNodes(result: EvalResult, visited: Map<number, EvalResult>, itemId: number): EvalResult | undefined {\r\n        const scriplet = this.state.scriplet;\r\n        if (!scriplet) {\r\n            console.error(`The scriplet in this state could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const items = scriplet.items;\r\n        if (!items) {\r\n            console.error(`Could not get the node items in the scriplet of id '${scriplet.id}'.`);\r\n            return;\r\n        }\r\n\r\n        const item = items.get(itemId);\r\n        if (!item) {\r\n            console.error(`The item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const schema = item.schema;\r\n        if (!schema) {\r\n            console.error(`The schema of the item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        \r\n        const variableName = schema.state.hasVariable ? item.variableName : \"\";\r\n        if (schema.name === \"Input\") {\r\n            result.evalValue = schema.evalFunction();\r\n            result.toParent = variableName;\r\n            result.inputVars.push(variableName);\r\n            visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n            return result;\r\n        }\r\n\r\n        if (schema.name === \"Output\") {\r\n            result.outputVar = item.variableName;\r\n        }\r\n\r\n        const children = NodeConnections.getInputConnections(itemId);\r\n        if (!children) {\r\n            console.error(`The children of the node item of id '${itemId}' could not be found.`);\r\n            return;\r\n        }\r\n        if (children.size <= 0) {\r\n            const visitedRes = visited.get(itemId);\r\n            if (visitedRes)\r\n                return visitedRes;\r\n            result.evalValue = schema.evalFunction();\r\n            result.toParent = schema.toParent() === \"variable\" ? variableName : schema.toParent();\r\n            result.toCode = `${result.toCode} ${schema.state.hasVariable ? \"const \" + variableName + \" = \" + schema.toCode() : schema.toCode()};`;\r\n            visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n            return result;\r\n        }\r\n        \r\n        var i;\r\n        let arr: any[] = [];\r\n        let arrStr: string[] = [];\r\n        // This for loop is determining the values of the toParent functions of the children\r\n        // TODO: Don't travel to the already visited nodes\r\n        for (i = 0; i < schema.inputSlots.length; i++) {\r\n            const childConn = children.get(schema.inputSlots[i].id);\r\n            if (!childConn) {\r\n                arr.push(schema.inputSlots[i].defaultValue);\r\n                arrStr.push(schema.inputSlots[i].defaultValueStr);\r\n                continue;\r\n            }\r\n\r\n            const childItem = scriplet.items.get(childConn.outputId);\r\n            if (!childItem) {\r\n                console.error(`The node item of id '${childConn.outputId}' could not be found in the scriplet.`);\r\n                return;\r\n            }\r\n            const visitedRes = visited.get(childItem.id);\r\n            if (visitedRes != null) {\r\n                arr.push(visitedRes.evalValue);\r\n                arrStr.push(visitedRes.toParent);\r\n                continue;\r\n            }\r\n            \r\n            const res = this.evaluateNodes(result, visited, childItem.id);\r\n            if (!res) {\r\n                console.error(`Something went wrong when evaluating the child nodes of the node item of id '${childItem.id}'.`);\r\n                return;\r\n            }\r\n            \r\n            arr.push(res.evalValue);\r\n            arrStr.push(res.toParent);\r\n        }\r\n\r\n        schema.state.onEvaluate(...arr);\r\n\r\n        result.evalValue = schema.evalFunction(...arr);\r\n        result.toParent = schema.toParent(...arrStr) === \"variable\" ? variableName : schema.toParent(...arrStr);\r\n        result.toCode = `${result.toCode} ${schema.state.hasVariable ? \"const \" + variableName + \" = \" + schema.toCode(...arrStr) : schema.toCode(...arrStr)};`;\r\n        visited.set(item.id, new EvalResult(result.evalValue, result.toParent, result.toCode));\r\n\r\n        return result;\r\n    }\r\n    /**/\r\n\r\n    openCode() {\r\n        this.setState({isCodeOpen: true});\r\n    }\r\n\r\n    closeCode() {\r\n        this.setState({isCodeOpen: false});\r\n    }\r\n\r\n    toggleCode() {\r\n        if (this.state.isCodeOpen)\r\n            this.closeCode();\r\n        else\r\n            this.openCode();\r\n    }\r\n\r\n    onMessageLog(message: ConsoleMessage) {\r\n        const codeResult = this.codeResult.current;\r\n        if (!codeResult) {\r\n            console.error(`App console could not be found.`);\r\n            return;\r\n        }\r\n\r\n        if (codeResult.innerText === \"Run code first\")\r\n            codeResult.innerHTML = `<p style=\"color: ${message.color}\">${message.message}</p>`;\r\n        else\r\n            codeResult.innerHTML += `<p style=\"color: ${message.color}\">${message.message}</p>`;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className={`${this.state.isCodeOpen ? \"code-container\" : \"hidden\"} shadow flex flex-row lg:flex-col`}>\r\n                    {/* \r\n                    <CodeMirror value={this.state.editorValue}\r\n                                options={{\r\n                                    mode: 'javascript',\r\n                                    theme: 'code-editor material',\r\n                                    lineNumbers: true\r\n                                }}\r\n                                onBeforeChange={(editor, data, value) => {\r\n                                    this.setState({editorValue: value});\r\n                                }}\r\n                                onChange={(editor, data, value) => {\r\n\r\n                                }} />\r\n                    <button className=\"beautify-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleBeautifyCode}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"magic\" />&nbsp;\r\n                        Beautify\r\n                    </button>\r\n                    <button className=\"eval-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleEvaluateNodes}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"lightbulb\" />&nbsp;\r\n                        Evaluate\r\n                    </button>\r\n                    */}\r\n\r\n                    <div className=\"w-full h-full bg-gray-800\">\r\n                        <Scrollbar>\r\n                            <div className=\"px-4 py-2 lg:w-auto lg:h-56 flex-grow text-gray-100\" ref={this.codeResult}>\r\n                                Run code first\r\n                            </div>\r\n                        </Scrollbar>\r\n                    </div>\r\n                    <button className=\"run-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleRun}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"play\"/>&nbsp;\r\n                        Run\r\n                    </button>\r\n                    <button className=\"clear-code items-center justify-center rounded shadow bg-gray-700 text-gray-200 hover:bg-gray-600 select-none\" onClick={this.handleClear}>\r\n                        <FontAwesomeIcon className=\"text-sm\" icon=\"trash\"/>&nbsp;\r\n                        Clear\r\n                    </button>\r\n                </div>\r\n                <div className={`${this.state.isCodeOpen ? \"hidden\" : \"collapsed-code\"} shadow bg-gray-800 items-center lg:justify-center lg:items-start`}>\r\n                    <div className=\"p-4\">\r\n                        <FontAwesomeIcon icon=\"code\" className=\"text-xl text-gray-300\" />\r\n                    </div>\r\n                </div>\r\n                <button className={`${this.state.isCodeOpen ? \"h-40 mb-8 pb-32\" : \"h-16 mb-8 pb-8\"} ${this.state.screenWidth >= 1024 ? \"hidden\" : \"code-toggle\"} items-center flex-col-reverse rounded-full bg-gray-700`}\r\n                        onClick={this.toggleCode}>\r\n                    <div className=\"inline-block pb-1\">\r\n                        <FontAwesomeIcon icon=\"chevron-down\"\r\n                                            className={`${this.state.isCodeOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                        <FontAwesomeIcon icon=\"chevron-up\"\r\n                                            className={`${this.state.isCodeOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                    </div>\r\n                </button>\r\n                <button className={`${this.state.isCodeOpen ? \"w-64 mr-8 pr-56\" : \"w-16 mr-8 pr-8\"} ${this.state.screenWidth >= 1024 ? \"code-toggle\" : \"hidden\"} items-center flex-row-reverse rounded-full bg-gray-700`}\r\n                        onClick={this.toggleCode}>\r\n                    <div className=\"inline-block pr-2\">\r\n                        <FontAwesomeIcon icon=\"chevron-right\"\r\n                                            className={`${this.state.isCodeOpen ? \"block\" : \"hidden\"} text-gray-300`} />\r\n                        <FontAwesomeIcon icon=\"chevron-left\"\r\n                                            className={`${this.state.isCodeOpen ? \"hidden\" : \"block\"} text-gray-300`} />\r\n                    </div>\r\n                </button>\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport './assets/main.css';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { Switch, Route, useParams } from 'react-router-dom';\r\n\r\nimport SidebarNav from './components/SidebarNav';\r\nimport ScripletRoot from './components/ScripletRoot';\r\nimport CodeEditor from './components/CodeEditor';\r\n\r\nlibrary.add(fas);\r\n\r\nfunction App() {\r\n    return(\r\n        <div className=\"flex flex-col lg:flex-row\">\r\n            <SidebarNav />\r\n            <main>\r\n                <Switch>\r\n                    <Route path=\"/scriplet/:scripletId\">\r\n                        <ParamsProvider>\r\n                            {(scripletId) => (\r\n                                <>\r\n                                    <ScripletRoot scripletId={scripletId} />\r\n                                    <CodeEditor scripletId={scripletId} />\r\n                                </>\r\n                            )}\r\n                        </ParamsProvider>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <div className=\"p-6 flex justify-center items-center h-screen w-screen\">\r\n                            <h1 className=\"text-xl text-gray-600\">\r\n                                Please select a scriplet first.\r\n                            </h1>\r\n                        </div>\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ParamsProps = {\r\n    children?(scripletId: number): React.ReactNode | null;\r\n}\r\n\r\nfunction ParamsProvider({children}: ParamsProps): JSX.Element {\r\n    const { scripletId } = useParams();\r\n    return (\r\n        <>\r\n            {children != null ? children(parseInt(scripletId)) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/vso\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}